/*
 * generated by Xtext 2.29.0
 */
grammar InternalTraceryPP;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.mdd.tracerypp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mdd.tracerypp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.mdd.tracerypp.services.TraceryPPGrammarAccess;

}

@parser::members {

 	private TraceryPPGrammarAccess grammarAccess;

    public InternalTraceryPPParser(TokenStream input, TraceryPPGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TraceryPPGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getDefinitionParserRuleCall_0());
		}
		this_Definition_0=ruleDefinition
		{
			$current = $this_Definition_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getRuleParserRuleCall_1());
		}
		this_Rule_1=ruleRule
		{
			$current = $this_Rule_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStoryParserRuleCall_2());
		}
		this_Story_2=ruleStory
		{
			$current = $this_Story_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current; }
	EOF;

// Rule Definition
ruleDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getDefinitionAccess().getListDefinitionParserRuleCall());
	}
	this_ListDefinition_0=ruleListDefinition
	{
		$current = $this_ListDefinition_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getRuleAccess().getSentenceRuleParserRuleCall());
	}
	this_SentenceRule_0=ruleSentenceRule
	{
		$current = $this_SentenceRule_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleStory
entryRuleStory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoryRule()); }
	iv_ruleStory=ruleStory
	{ $current=$iv_ruleStory.current; }
	EOF;

// Rule Story
ruleStory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='The story looks like this:'
		{
			newLeafNode(otherlv_0, grammarAccess.getStoryAccess().getTheStoryLooksLikeThisKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStoryAccess().getStoryWordParserRuleCall_1_0_0());
					}
					lv_story_1_1=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStoryRule());
						}
						add(
							$current,
							"story",
							lv_story_1_1,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getStoryAccess().getStoryStoryVariableParserRuleCall_1_0_1());
					}
					lv_story_1_2=ruleStoryVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStoryRule());
						}
						add(
							$current,
							"story",
							lv_story_1_2,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.StoryVariable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleListDefinition
entryRuleListDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListDefinitionRule()); }
	iv_ruleListDefinition=ruleListDefinition
	{ $current=$iv_ruleListDefinition.current; }
	EOF;

// Rule ListDefinition
ruleListDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getListDefinitionAccess().getStart_symbolVariableParserRuleCall_0_0());
				}
				lv_start_symbol_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListDefinitionRule());
					}
					set(
						$current,
						"start_symbol",
						lv_start_symbol_0_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=' can have values: '
			{
				newLeafNode(otherlv_1, grammarAccess.getListDefinitionAccess().getCanHaveValuesKeyword_1_0());
			}
			    |
			otherlv_2=' can be: '
			{
				newLeafNode(otherlv_2, grammarAccess.getListDefinitionAccess().getCanBeKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getListDefinitionAccess().getListListParserRuleCall_2_0());
				}
				lv_list_3_0=ruleList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListDefinitionRule());
					}
					set(
						$current,
						"list",
						lv_list_3_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSentenceRule
entryRuleSentenceRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentenceRuleRule()); }
	iv_ruleSentenceRule=ruleSentenceRule
	{ $current=$iv_ruleSentenceRule.current; }
	EOF;

// Rule SentenceRule
ruleSentenceRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSentenceRuleAccess().getStart_symbolVariableParserRuleCall_0());
			}
			lv_start_symbol_0_0=ruleVariable
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSentenceRuleRule());
				}
				set(
					$current,
					"start_symbol",
					lv_start_symbol_0_0,
					"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Variable");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_ID
			{
				newLeafNode(lv_value_0_0, grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getListAccess().getWordsWordParserRuleCall_0_0());
				}
				lv_words_0_0=ruleWord
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRule());
					}
					add(
						$current,
						"words",
						lv_words_0_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getListAccess().getSepSeparatorParserRuleCall_1_0_0());
					}
					lv_sep_1_0=ruleSeparator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListRule());
						}
						set(
							$current,
							"sep",
							lv_sep_1_0,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Separator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getListAccess().getWordWordParserRuleCall_1_1_0());
					}
					lv_word_2_0=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListRule());
						}
						set(
							$current,
							"word",
							lv_word_2_0,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSeparator
entryRuleSeparator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSeparatorRule()); }
	iv_ruleSeparator=ruleSeparator
	{ $current=$iv_ruleSeparator.current.getText(); }
	EOF;

// Rule Separator
ruleSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSeparatorAccess().getCommaKeyword_0());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSeparatorAccess().getOrKeyword_1());
		}
	)
;

// Entry rule entryRuleStoryVariable
entryRuleStoryVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoryVariableRule()); }
	iv_ruleStoryVariable=ruleStoryVariable
	{ $current=$iv_ruleStoryVariable.current; }
	EOF;

// Rule StoryVariable
ruleStoryVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_ID
				{
					newLeafNode(lv_value_0_0, grammarAccess.getStoryVariableAccess().getValueIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStoryVariableRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStoryVariableAccess().getModifiersModifierParserRuleCall_1_0());
				}
				lv_modifiers_1_0=ruleModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStoryVariableRule());
					}
					add(
						$current,
						"modifiers",
						lv_modifiers_1_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Modifier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getModifierRule()); }
	iv_ruleModifier=ruleModifier
	{ $current=$iv_ruleModifier.current.getText(); }
	EOF;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModifierAccess().getCapitalizationModifierParserRuleCall_0());
		}
		this_CapitalizationModifier_0=ruleCapitalizationModifier
		{
			$current.merge(this_CapitalizationModifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModifierAccess().getFullCapitalizationModifierParserRuleCall_1());
		}
		this_FullCapitalizationModifier_1=ruleFullCapitalizationModifier
		{
			$current.merge(this_FullCapitalizationModifier_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModifierAccess().getPluralityModifierParserRuleCall_2());
		}
		this_PluralityModifier_2=rulePluralityModifier
		{
			$current.merge(this_PluralityModifier_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModifierAccess().getArticleModifierParserRuleCall_3());
		}
		this_ArticleModifier_3=ruleArticleModifier
		{
			$current.merge(this_ArticleModifier_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModifierAccess().getPastTenseModifierParserRuleCall_4());
		}
		this_PastTenseModifier_4=rulePastTenseModifier
		{
			$current.merge(this_PastTenseModifier_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCapitalizationModifier
entryRuleCapitalizationModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCapitalizationModifierRule()); }
	iv_ruleCapitalizationModifier=ruleCapitalizationModifier
	{ $current=$iv_ruleCapitalizationModifier.current.getText(); }
	EOF;

// Rule CapitalizationModifier
ruleCapitalizationModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.capitalize'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCapitalizationModifierAccess().getCapitalizeKeyword());
	}
;

// Entry rule entryRuleFullCapitalizationModifier
entryRuleFullCapitalizationModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFullCapitalizationModifierRule()); }
	iv_ruleFullCapitalizationModifier=ruleFullCapitalizationModifier
	{ $current=$iv_ruleFullCapitalizationModifier.current.getText(); }
	EOF;

// Rule FullCapitalizationModifier
ruleFullCapitalizationModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.CAPITALIZE'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFullCapitalizationModifierAccess().getCAPITALIZEKeyword());
	}
;

// Entry rule entryRulePluralityModifier
entryRulePluralityModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPluralityModifierRule()); }
	iv_rulePluralityModifier=rulePluralityModifier
	{ $current=$iv_rulePluralityModifier.current.getText(); }
	EOF;

// Rule PluralityModifier
rulePluralityModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.s'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPluralityModifierAccess().getSKeyword());
	}
;

// Entry rule entryRuleArticleModifier
entryRuleArticleModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArticleModifierRule()); }
	iv_ruleArticleModifier=ruleArticleModifier
	{ $current=$iv_ruleArticleModifier.current.getText(); }
	EOF;

// Rule ArticleModifier
ruleArticleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.a'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getArticleModifierAccess().getAKeyword());
	}
;

// Entry rule entryRulePastTenseModifier
entryRulePastTenseModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPastTenseModifierRule()); }
	iv_rulePastTenseModifier=rulePastTenseModifier
	{ $current=$iv_rulePastTenseModifier.current.getText(); }
	EOF;

// Rule PastTenseModifier
rulePastTenseModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.ed'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPastTenseModifierAccess().getEdKeyword());
	}
;

// Entry rule entryRuleWord
entryRuleWord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWordRule()); }
	iv_ruleWord=ruleWord
	{ $current=$iv_ruleWord.current; }
	EOF;

// Rule Word
ruleWord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getWordRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
