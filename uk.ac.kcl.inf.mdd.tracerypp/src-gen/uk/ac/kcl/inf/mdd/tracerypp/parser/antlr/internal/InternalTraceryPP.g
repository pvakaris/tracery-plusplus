/*
 * generated by Xtext 2.29.0
 */
grammar InternalTraceryPP;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.mdd.tracerypp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mdd.tracerypp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.mdd.tracerypp.services.TraceryPPGrammarAccess;

}

@parser::members {

 	private TraceryPPGrammarAccess grammarAccess;

    public InternalTraceryPPParser(TokenStream input, TraceryPPGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TraceryPPGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTitleParserRuleCall_0());
		}
		this_Title_0=ruleTitle
		{
			$current = $this_Title_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSentenceParserRuleCall_1());
		}
		this_Sentence_1=ruleSentence
		{
			$current = $this_Sentence_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleTitle
entryRuleTitle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTitleRule()); }
	iv_ruleTitle=ruleTitle
	{ $current=$iv_ruleTitle.current; }
	EOF;

// Rule Title
ruleTitle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTitleAccess().getStart_symbolStartSymbolParserRuleCall_0_0());
				}
				lv_start_symbol_0_0=ruleStartSymbol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTitleRule());
					}
					set(
						$current,
						"start_symbol",
						lv_start_symbol_0_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.StartSymbol");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='can have values:'
		{
			newLeafNode(otherlv_1, grammarAccess.getTitleAccess().getCanHaveValuesKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTitleAccess().getListListParserRuleCall_2_0());
				}
				lv_list_2_0=ruleList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTitleRule());
					}
					set(
						$current,
						"list",
						lv_list_2_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.List");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStartSymbol
entryRuleStartSymbol returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartSymbolRule()); }
	iv_ruleStartSymbol=ruleStartSymbol
	{ $current=$iv_ruleStartSymbol.current; }
	EOF;

// Rule StartSymbol
ruleStartSymbol returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_title_0_0=RULE_STRING
			{
				newLeafNode(lv_title_0_0, grammarAccess.getStartSymbolAccess().getTitleSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStartSymbolRule());
				}
				setWithLastConsumed(
					$current,
					"title",
					lv_title_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleList
entryRuleList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListRule()); }
	iv_ruleList=ruleList
	{ $current=$iv_ruleList.current; }
	EOF;

// Rule List
ruleList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getListAccess().getWordWordParserRuleCall_0_0());
				}
				lv_word_0_0=ruleWord
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListRule());
					}
					set(
						$current,
						"word",
						lv_word_0_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1=','
				{
					newLeafNode(otherlv_1, grammarAccess.getListAccess().getCommaKeyword_1_0_0());
				}
				    |
				otherlv_2=', '
				{
					newLeafNode(otherlv_2, grammarAccess.getListAccess().getCommaSpaceKeyword_1_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getListAccess().getWordWordParserRuleCall_1_1_0());
					}
					lv_word_3_0=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getListRule());
						}
						set(
							$current,
							"word",
							lv_word_3_0,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleWord
entryRuleWord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWordRule()); }
	iv_ruleWord=ruleWord
	{ $current=$iv_ruleWord.current; }
	EOF;

// Rule Word
ruleWord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_word_0_0=RULE_STRING
			{
				newLeafNode(lv_word_0_0, grammarAccess.getWordAccess().getWordSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getWordRule());
				}
				setWithLastConsumed(
					$current,
					"word",
					lv_word_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleSentence
entryRuleSentence returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSentenceRule()); }
	iv_ruleSentence=ruleSentence
	{ $current=$iv_ruleSentence.current; }
	EOF;

// Rule Sentence
ruleSentence returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_word_0_0=RULE_STRING
			{
				newLeafNode(lv_word_0_0, grammarAccess.getSentenceAccess().getWordSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSentenceRule());
				}
				setWithLastConsumed(
					$current,
					"word",
					lv_word_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
