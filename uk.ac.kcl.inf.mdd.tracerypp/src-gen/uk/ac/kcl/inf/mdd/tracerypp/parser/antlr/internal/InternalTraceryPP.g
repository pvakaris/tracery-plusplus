/*
 * generated by Xtext 2.29.0
 */
grammar InternalTraceryPP;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.mdd.tracerypp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mdd.tracerypp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.mdd.tracerypp.services.TraceryPPGrammarAccess;

}

@parser::members {

 	private TraceryPPGrammarAccess grammarAccess;

    public InternalTraceryPPParser(TokenStream input, TraceryPPGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TraceryPPGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0_0());
				}
				lv_statements_0_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"statements",
						lv_statements_0_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getStoryStoryParserRuleCall_1_0());
				}
				lv_story_1_0=ruleStory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"story",
						lv_story_1_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Story");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getStatementAccess().getDeclarationParserRuleCall());
	}
	this_Declaration_0=ruleDeclaration
	{
		$current = $this_Declaration_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	iv_ruleDeclaration=ruleDeclaration
	{ $current=$iv_ruleDeclaration.current; }
	EOF;

// Rule Declaration
ruleDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getListDeclarationParserRuleCall_0());
		}
		this_ListDeclaration_0=ruleListDeclaration
		{
			$current = $this_ListDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getDeclarationAccess().getObjectDeclarationParserRuleCall_1());
		}
		this_ObjectDeclaration_1=ruleObjectDeclaration
		{
			$current = $this_ObjectDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStory
entryRuleStory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoryRule()); }
	iv_ruleStory=ruleStory
	{ $current=$iv_ruleStory.current; }
	EOF;

// Rule Story
ruleStory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStoryAccess().getStoryAction_0(),
					$current);
			}
		)
		otherlv_1='The story:'
		{
			newLeafNode(otherlv_1, grammarAccess.getStoryAccess().getTheStoryKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStoryAccess().getStoryWordParserRuleCall_2_0_0());
					}
					lv_story_2_1=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStoryRule());
						}
						add(
							$current,
							"story",
							lv_story_2_1,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getStoryAccess().getStoryStoryVariableParserRuleCall_2_0_1());
					}
					lv_story_2_2=ruleStoryVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStoryRule());
						}
						add(
							$current,
							"story",
							lv_story_2_2,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.StoryVariable");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getStoryAccess().getStoryObjectAttributeParserRuleCall_2_0_2());
					}
					lv_story_2_3=ruleObjectAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStoryRule());
						}
						add(
							$current,
							"story",
							lv_story_2_3,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.ObjectAttribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleListDeclaration
entryRuleListDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getListDeclarationRule()); }
	iv_ruleListDeclaration=ruleListDeclaration
	{ $current=$iv_ruleListDeclaration.current; }
	EOF;

// Rule ListDeclaration
ruleListDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getListDeclarationAccess().getStart_symbolVariableParserRuleCall_0_0());
				}
				lv_start_symbol_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListDeclarationRule());
					}
					set(
						$current,
						"start_symbol",
						lv_start_symbol_0_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='can have values:'
			{
				newLeafNode(otherlv_1, grammarAccess.getListDeclarationAccess().getCanHaveValuesKeyword_1_0());
			}
			    |
			otherlv_2='can be:'
			{
				newLeafNode(otherlv_2, grammarAccess.getListDeclarationAccess().getCanBeKeyword_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getListDeclarationAccess().getListWordListParserRuleCall_2_0());
				}
				lv_list_3_0=ruleWordList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getListDeclarationRule());
					}
					set(
						$current,
						"list",
						lv_list_3_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.WordList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleObjectDeclaration
entryRuleObjectDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectDeclarationRule()); }
	iv_ruleObjectDeclaration=ruleObjectDeclaration
	{ $current=$iv_ruleObjectDeclaration.current; }
	EOF;

// Rule ObjectDeclaration
ruleObjectDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getObjectDeclarationAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='is an object.'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectDeclarationAccess().getIsAnObjectKeyword_1());
		}
		otherlv_2='It has these attributes:'
		{
			newLeafNode(otherlv_2, grammarAccess.getObjectDeclarationAccess().getItHasTheseAttributesKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectDeclarationAccess().getAttributesAttributeListParserRuleCall_3_0());
				}
				lv_attributes_3_0=ruleAttributeList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectDeclarationRule());
					}
					set(
						$current,
						"attributes",
						lv_attributes_3_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.AttributeList");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleWord
entryRuleWord returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWordRule()); }
	iv_ruleWord=ruleWord
	{ $current=$iv_ruleWord.current; }
	EOF;

// Rule Word
ruleWord returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getWordRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleStoryVariable
entryRuleStoryVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStoryVariableRule()); }
	iv_ruleStoryVariable=ruleStoryVariable
	{ $current=$iv_ruleStoryVariable.current; }
	EOF;

// Rule StoryVariable
ruleStoryVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStoryVariableRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getStoryVariableAccess().getVariableVariableCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStoryVariableAccess().getModifiersModifierParserRuleCall_1_0());
				}
				lv_modifiers_1_0=ruleModifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStoryVariableRule());
					}
					add(
						$current,
						"modifiers",
						lv_modifiers_1_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Modifier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	iv_ruleAttribute=ruleAttribute
	{ $current=$iv_ruleAttribute.current; }
	EOF;

// Rule Attribute
ruleAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getEqualsSignKeyword_1_1());
			}
			(
				(
					lv_value_3_0=RULE_STRING
					{
						newLeafNode(lv_value_3_0, grammarAccess.getAttributeAccess().getValueSTRINGTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAttributeRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleObjectAttribute
entryRuleObjectAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectAttributeRule()); }
	iv_ruleObjectAttribute=ruleObjectAttribute
	{ $current=$iv_ruleObjectAttribute.current; }
	EOF;

// Rule ObjectAttribute
ruleObjectAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectAttributeRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getObjectAttributeAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_attribute_2_0=RULE_ID
				{
					newLeafNode(lv_attribute_2_0, grammarAccess.getObjectAttributeAccess().getAttributeIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectAttributeRule());
					}
					setWithLastConsumed(
						$current,
						"attribute",
						lv_attribute_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleWordList
entryRuleWordList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWordListRule()); }
	iv_ruleWordList=ruleWordList
	{ $current=$iv_ruleWordList.current; }
	EOF;

// Rule WordList
ruleWordList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWordListAccess().getWordsWordParserRuleCall_0_0());
				}
				lv_words_0_0=ruleWord
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWordListRule());
					}
					add(
						$current,
						"words",
						lv_words_0_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWordListAccess().getSeparatorParserRuleCall_1_0());
				}
				ruleSeparator
				{
					afterParserOrEnumRuleCall();
				}
			)+
			(
				(
					{
						newCompositeNode(grammarAccess.getWordListAccess().getWordsWordParserRuleCall_1_1_0());
					}
					lv_words_2_0=ruleWord
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWordListRule());
						}
						add(
							$current,
							"words",
							lv_words_2_0,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAttributeList
entryRuleAttributeList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAttributeListRule()); }
	iv_ruleAttributeList=ruleAttributeList
	{ $current=$iv_ruleAttributeList.current; }
	EOF;

// Rule AttributeList
ruleAttributeList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAttributeListAccess().getAttributesAttributeParserRuleCall_0_0());
				}
				lv_attributes_0_0=ruleAttribute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAttributeListRule());
					}
					add(
						$current,
						"attributes",
						lv_attributes_0_0,
						"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Attribute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_1=','
				{
					newLeafNode(otherlv_1, grammarAccess.getAttributeListAccess().getCommaKeyword_1_0());
				}
			)+
			(
				(
					{
						newCompositeNode(grammarAccess.getAttributeListAccess().getAttributesAttributeParserRuleCall_1_1_0());
					}
					lv_attributes_2_0=ruleAttribute
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAttributeListRule());
						}
						add(
							$current,
							"attributes",
							lv_attributes_2_0,
							"uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Attribute");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSeparator
entryRuleSeparator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSeparatorRule()); }
	iv_ruleSeparator=ruleSeparator
	{ $current=$iv_ruleSeparator.current.getText(); }
	EOF;

// Rule Separator
ruleSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSeparatorAccess().getCommaKeyword_0());
		}
		    |
		kw='or'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSeparatorAccess().getOrKeyword_1());
		}
	)
;

// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getModifierRule()); }
	iv_ruleModifier=ruleModifier
	{ $current=$iv_ruleModifier.current.getText(); }
	EOF;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModifierAccess().getCapitalizationModifierParserRuleCall_0());
		}
		this_CapitalizationModifier_0=ruleCapitalizationModifier
		{
			$current.merge(this_CapitalizationModifier_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModifierAccess().getFullCapitalizationModifierParserRuleCall_1());
		}
		this_FullCapitalizationModifier_1=ruleFullCapitalizationModifier
		{
			$current.merge(this_FullCapitalizationModifier_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModifierAccess().getPluralityModifierParserRuleCall_2());
		}
		this_PluralityModifier_2=rulePluralityModifier
		{
			$current.merge(this_PluralityModifier_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModifierAccess().getArticleModifierParserRuleCall_3());
		}
		this_ArticleModifier_3=ruleArticleModifier
		{
			$current.merge(this_ArticleModifier_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModifierAccess().getPastTenseModifierParserRuleCall_4());
		}
		this_PastTenseModifier_4=rulePastTenseModifier
		{
			$current.merge(this_PastTenseModifier_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCapitalizationModifier
entryRuleCapitalizationModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCapitalizationModifierRule()); }
	iv_ruleCapitalizationModifier=ruleCapitalizationModifier
	{ $current=$iv_ruleCapitalizationModifier.current.getText(); }
	EOF;

// Rule CapitalizationModifier
ruleCapitalizationModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.capitalize'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCapitalizationModifierAccess().getCapitalizeKeyword());
	}
;

// Entry rule entryRuleFullCapitalizationModifier
entryRuleFullCapitalizationModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFullCapitalizationModifierRule()); }
	iv_ruleFullCapitalizationModifier=ruleFullCapitalizationModifier
	{ $current=$iv_ruleFullCapitalizationModifier.current.getText(); }
	EOF;

// Rule FullCapitalizationModifier
ruleFullCapitalizationModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.CAPITALIZE'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getFullCapitalizationModifierAccess().getCAPITALIZEKeyword());
	}
;

// Entry rule entryRulePluralityModifier
entryRulePluralityModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPluralityModifierRule()); }
	iv_rulePluralityModifier=rulePluralityModifier
	{ $current=$iv_rulePluralityModifier.current.getText(); }
	EOF;

// Rule PluralityModifier
rulePluralityModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.s'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPluralityModifierAccess().getSKeyword());
	}
;

// Entry rule entryRuleArticleModifier
entryRuleArticleModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArticleModifierRule()); }
	iv_ruleArticleModifier=ruleArticleModifier
	{ $current=$iv_ruleArticleModifier.current.getText(); }
	EOF;

// Rule ArticleModifier
ruleArticleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.a'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getArticleModifierAccess().getAKeyword());
	}
;

// Entry rule entryRulePastTenseModifier
entryRulePastTenseModifier returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPastTenseModifierRule()); }
	iv_rulePastTenseModifier=rulePastTenseModifier
	{ $current=$iv_rulePastTenseModifier.current.getText(); }
	EOF;

// Rule PastTenseModifier
rulePastTenseModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='.ed'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getPastTenseModifierAccess().getEdKeyword());
	}
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
