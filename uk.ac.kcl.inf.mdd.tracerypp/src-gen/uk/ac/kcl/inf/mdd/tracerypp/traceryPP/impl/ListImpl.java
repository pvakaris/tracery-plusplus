/**
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mdd.tracerypp.traceryPP.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.List;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.TraceryPPPackage;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Word;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.mdd.tracerypp.traceryPP.impl.ListImpl#getWords <em>Words</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdd.tracerypp.traceryPP.impl.ListImpl#getSep <em>Sep</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.mdd.tracerypp.traceryPP.impl.ListImpl#getWord <em>Word</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ListImpl extends MinimalEObjectImpl.Container implements List
{
  /**
   * The cached value of the '{@link #getWords() <em>Words</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWords()
   * @generated
   * @ordered
   */
  protected EList<Word> words;

  /**
   * The default value of the '{@link #getSep() <em>Sep</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSep()
   * @generated
   * @ordered
   */
  protected static final String SEP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSep() <em>Sep</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSep()
   * @generated
   * @ordered
   */
  protected String sep = SEP_EDEFAULT;

  /**
   * The cached value of the '{@link #getWord() <em>Word</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWord()
   * @generated
   * @ordered
   */
  protected Word word;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TraceryPPPackage.Literals.LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Word> getWords()
  {
    if (words == null)
    {
      words = new EObjectContainmentEList<Word>(Word.class, this, TraceryPPPackage.LIST__WORDS);
    }
    return words;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getSep()
  {
    return sep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSep(String newSep)
  {
    String oldSep = sep;
    sep = newSep;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraceryPPPackage.LIST__SEP, oldSep, sep));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Word getWord()
  {
    return word;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWord(Word newWord, NotificationChain msgs)
  {
    Word oldWord = word;
    word = newWord;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraceryPPPackage.LIST__WORD, oldWord, newWord);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWord(Word newWord)
  {
    if (newWord != word)
    {
      NotificationChain msgs = null;
      if (word != null)
        msgs = ((InternalEObject)word).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraceryPPPackage.LIST__WORD, null, msgs);
      if (newWord != null)
        msgs = ((InternalEObject)newWord).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraceryPPPackage.LIST__WORD, null, msgs);
      msgs = basicSetWord(newWord, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraceryPPPackage.LIST__WORD, newWord, newWord));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TraceryPPPackage.LIST__WORDS:
        return ((InternalEList<?>)getWords()).basicRemove(otherEnd, msgs);
      case TraceryPPPackage.LIST__WORD:
        return basicSetWord(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TraceryPPPackage.LIST__WORDS:
        return getWords();
      case TraceryPPPackage.LIST__SEP:
        return getSep();
      case TraceryPPPackage.LIST__WORD:
        return getWord();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TraceryPPPackage.LIST__WORDS:
        getWords().clear();
        getWords().addAll((Collection<? extends Word>)newValue);
        return;
      case TraceryPPPackage.LIST__SEP:
        setSep((String)newValue);
        return;
      case TraceryPPPackage.LIST__WORD:
        setWord((Word)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TraceryPPPackage.LIST__WORDS:
        getWords().clear();
        return;
      case TraceryPPPackage.LIST__SEP:
        setSep(SEP_EDEFAULT);
        return;
      case TraceryPPPackage.LIST__WORD:
        setWord((Word)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TraceryPPPackage.LIST__WORDS:
        return words != null && !words.isEmpty();
      case TraceryPPPackage.LIST__SEP:
        return SEP_EDEFAULT == null ? sep != null : !SEP_EDEFAULT.equals(sep);
      case TraceryPPPackage.LIST__WORD:
        return word != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (sep: ");
    result.append(sep);
    result.append(')');
    return result.toString();
  }

} //ListImpl
