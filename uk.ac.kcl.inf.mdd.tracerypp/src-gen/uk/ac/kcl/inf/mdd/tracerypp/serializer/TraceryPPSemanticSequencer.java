/*
 * generated by Xtext 2.30.0
 */
package uk.ac.kcl.inf.mdd.tracerypp.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.mdd.tracerypp.services.TraceryPPGrammarAccess;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Attribute;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.AttributeList;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.ExistingVariable;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.ListDeclaration;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Model;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.ObjectAttribute;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.ObjectDeclaration;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Story;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.StoryVariable;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.TraceryPPPackage;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Variable;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Word;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.WordList;

@SuppressWarnings("all")
public class TraceryPPSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceryPPGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TraceryPPPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TraceryPPPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case TraceryPPPackage.ATTRIBUTE_LIST:
				sequence_AttributeList(context, (AttributeList) semanticObject); 
				return; 
			case TraceryPPPackage.EXISTING_VARIABLE:
				sequence_ExistingVariable(context, (ExistingVariable) semanticObject); 
				return; 
			case TraceryPPPackage.LIST_DECLARATION:
				sequence_ListDeclaration(context, (ListDeclaration) semanticObject); 
				return; 
			case TraceryPPPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TraceryPPPackage.OBJECT_ATTRIBUTE:
				sequence_ObjectAttribute(context, (ObjectAttribute) semanticObject); 
				return; 
			case TraceryPPPackage.OBJECT_DECLARATION:
				sequence_ObjectDeclaration(context, (ObjectDeclaration) semanticObject); 
				return; 
			case TraceryPPPackage.STORY:
				sequence_Story(context, (Story) semanticObject); 
				return; 
			case TraceryPPPackage.STORY_VARIABLE:
				sequence_StoryVariable(context, (StoryVariable) semanticObject); 
				return; 
			case TraceryPPPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case TraceryPPPackage.WORD:
				sequence_Word(context, (Word) semanticObject); 
				return; 
			case TraceryPPPackage.WORD_LIST:
				sequence_WordList(context, (WordList) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeList returns AttributeList
	 *
	 * Constraint:
	 *     (attributes+=Attribute attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_AttributeList(ISerializationContext context, AttributeList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ExistingVariable | (name=Variable value=STRING))
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExistingVariable returns ExistingVariable
	 *
	 * Constraint:
	 *     pointer=[Variable|ID]
	 * </pre>
	 */
	protected void sequence_ExistingVariable(ISerializationContext context, ExistingVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.EXISTING_VARIABLE__POINTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.EXISTING_VARIABLE__POINTER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistingVariableAccess().getPointerVariableIDTerminalRuleCall_0_1(), semanticObject.eGet(TraceryPPPackage.Literals.EXISTING_VARIABLE__POINTER, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ListDeclaration
	 *     Declaration returns ListDeclaration
	 *     ListDeclaration returns ListDeclaration
	 *
	 * Constraint:
	 *     (name=Variable list=WordList)
	 * </pre>
	 */
	protected void sequence_ListDeclaration(ISerializationContext context, ListDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.LIST_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.LIST_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.LIST_DECLARATION__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.LIST_DECLARATION__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListDeclarationAccess().getNameVariableParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getListDeclarationAccess().getListWordListParserRuleCall_3_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (statements+=Statement* story=Story)
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ObjectAttribute returns ObjectAttribute
	 *
	 * Constraint:
	 *     (object=[ObjectDeclaration|ID] attribute=[Variable|ID] modifiers+=Modifier*)
	 * </pre>
	 */
	protected void sequence_ObjectAttribute(ISerializationContext context, ObjectAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ObjectDeclaration
	 *     Declaration returns ObjectDeclaration
	 *     ObjectDeclaration returns ObjectDeclaration
	 *
	 * Constraint:
	 *     (name=ID attributes=AttributeList)
	 * </pre>
	 */
	protected void sequence_ObjectDeclaration(ISerializationContext context, ObjectDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.OBJECT_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.OBJECT_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.OBJECT_DECLARATION__ATTRIBUTES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.OBJECT_DECLARATION__ATTRIBUTES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectDeclarationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjectDeclarationAccess().getAttributesAttributeListParserRuleCall_8_0(), semanticObject.getAttributes());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StoryVariable returns StoryVariable
	 *
	 * Constraint:
	 *     (variable=[Variable|ID] modifiers+=Modifier*)
	 * </pre>
	 */
	protected void sequence_StoryVariable(ISerializationContext context, StoryVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Story returns Story
	 *
	 * Constraint:
	 *     (story+=Word | story+=StoryVariable | story+=ObjectAttribute)*
	 * </pre>
	 */
	protected void sequence_Story(ISerializationContext context, Story semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WordList returns WordList
	 *
	 * Constraint:
	 *     (words+=Word words+=Word*)
	 * </pre>
	 */
	protected void sequence_WordList(ISerializationContext context, WordList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Word returns Word
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_Word(ISerializationContext context, Word semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.WORD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.WORD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
