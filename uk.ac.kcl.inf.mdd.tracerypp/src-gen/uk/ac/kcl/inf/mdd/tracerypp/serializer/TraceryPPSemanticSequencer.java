/*
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mdd.tracerypp.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.mdd.tracerypp.services.TraceryPPGrammarAccess;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.List;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.ListDefinition;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Model;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.SentenceRule;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Story;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.StoryVariable;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.TraceryPPPackage;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Variable;
import uk.ac.kcl.inf.mdd.tracerypp.traceryPP.Word;

@SuppressWarnings("all")
public class TraceryPPSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceryPPGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TraceryPPPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TraceryPPPackage.LIST:
				sequence_List(context, (List) semanticObject); 
				return; 
			case TraceryPPPackage.LIST_DEFINITION:
				sequence_ListDefinition(context, (ListDefinition) semanticObject); 
				return; 
			case TraceryPPPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case TraceryPPPackage.SENTENCE_RULE:
				sequence_SentenceRule(context, (SentenceRule) semanticObject); 
				return; 
			case TraceryPPPackage.STORY:
				sequence_Story(context, (Story) semanticObject); 
				return; 
			case TraceryPPPackage.STORY_VARIABLE:
				sequence_StoryVariable(context, (StoryVariable) semanticObject); 
				return; 
			case TraceryPPPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case TraceryPPPackage.WORD:
				sequence_Word(context, (Word) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ListDefinition
	 *     Definition returns ListDefinition
	 *     ListDefinition returns ListDefinition
	 *
	 * Constraint:
	 *     (start_symbol=Variable list=List)
	 * </pre>
	 */
	protected void sequence_ListDefinition(ISerializationContext context, ListDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.LIST_DEFINITION__START_SYMBOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.LIST_DEFINITION__START_SYMBOL));
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.LIST_DEFINITION__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.LIST_DEFINITION__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListDefinitionAccess().getStart_symbolVariableParserRuleCall_0_0(), semanticObject.getStart_symbol());
		feeder.accept(grammarAccess.getListDefinitionAccess().getListListParserRuleCall_2_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     List returns List
	 *
	 * Constraint:
	 *     (words+=Word (sep=Separator word=Word)*)
	 * </pre>
	 */
	protected void sequence_List(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     statements+=Statement+
	 * </pre>
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns SentenceRule
	 *     Rule returns SentenceRule
	 *     SentenceRule returns SentenceRule
	 *
	 * Constraint:
	 *     start_symbol=Variable
	 * </pre>
	 */
	protected void sequence_SentenceRule(ISerializationContext context, SentenceRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.SENTENCE_RULE__START_SYMBOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.SENTENCE_RULE__START_SYMBOL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSentenceRuleAccess().getStart_symbolVariableParserRuleCall_0(), semanticObject.getStart_symbol());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StoryVariable returns StoryVariable
	 *
	 * Constraint:
	 *     (value=ID modifiers+=Modifier*)
	 * </pre>
	 */
	protected void sequence_StoryVariable(ISerializationContext context, StoryVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns Story
	 *     Story returns Story
	 *
	 * Constraint:
	 *     (story+=Word | story+=StoryVariable)+
	 * </pre>
	 */
	protected void sequence_Story(ISerializationContext context, Story semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     value=ID
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.VARIABLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.VARIABLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Word returns Word
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_Word(ISerializationContext context, Word semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPPPackage.Literals.WORD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPPPackage.Literals.WORD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
