/*
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mdd.tracerypp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraceryPPGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Assignment cStoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStoryStoryParserRuleCall_1_0 = (RuleCall)cStoryAssignment_1.eContents().get(0);
		
		//// Version 1.0
		//Model:
		//    statements += Statement*
		//    story = Story
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement*
		//story = Story
		public Group getGroup() { return cGroup; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }
		
		//story = Story
		public Assignment getStoryAssignment_1() { return cStoryAssignment_1; }
		
		//Story
		public RuleCall getStoryStoryParserRuleCall_1_0() { return cStoryStoryParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Statement");
		private final RuleCall cDefinitionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//    Definition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Definition
		public RuleCall getDefinitionParserRuleCall() { return cDefinitionParserRuleCall; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Definition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Definition:
		//    ListDefinition |
		//    ObjectDefinition
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ListDefinition |
		//ObjectDefinition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ListDefinition
		public RuleCall getListDefinitionParserRuleCall_0() { return cListDefinitionParserRuleCall_0; }
		
		//ObjectDefinition
		public RuleCall getObjectDefinitionParserRuleCall_1() { return cObjectDefinitionParserRuleCall_1; }
	}
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTheStoryLooksLikeThisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStoryAlternatives_1_0 = (Alternatives)cStoryAssignment_1.eContents().get(0);
		private final RuleCall cStoryWordParserRuleCall_1_0_0 = (RuleCall)cStoryAlternatives_1_0.eContents().get(0);
		private final RuleCall cStoryStoryVariableParserRuleCall_1_0_1 = (RuleCall)cStoryAlternatives_1_0.eContents().get(1);
		private final RuleCall cStoryObjectAttributeParserRuleCall_1_0_2 = (RuleCall)cStoryAlternatives_1_0.eContents().get(2);
		
		///*
		//    Used to define what the story should look like.
		//    There must be only one story in the model for now.
		// */
		//Story:
		//    "The story looks like this:"
		//    story += ( Word | StoryVariable | ObjectAttribute )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"The story looks like this:"
		//story += ( Word | StoryVariable | ObjectAttribute )*
		public Group getGroup() { return cGroup; }
		
		//"The story looks like this:"
		public Keyword getTheStoryLooksLikeThisKeyword_0() { return cTheStoryLooksLikeThisKeyword_0; }
		
		//story += ( Word | StoryVariable | ObjectAttribute )*
		public Assignment getStoryAssignment_1() { return cStoryAssignment_1; }
		
		//( Word | StoryVariable | ObjectAttribute )
		public Alternatives getStoryAlternatives_1_0() { return cStoryAlternatives_1_0; }
		
		//Word
		public RuleCall getStoryWordParserRuleCall_1_0_0() { return cStoryWordParserRuleCall_1_0_0; }
		
		//StoryVariable
		public RuleCall getStoryStoryVariableParserRuleCall_1_0_1() { return cStoryStoryVariableParserRuleCall_1_0_1; }
		
		//ObjectAttribute
		public RuleCall getStoryObjectAttributeParserRuleCall_1_0_2() { return cStoryObjectAttributeParserRuleCall_1_0_2; }
	}
	public class ListDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.ListDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStart_symbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStart_symbolVariableParserRuleCall_0_0 = (RuleCall)cStart_symbolAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cCanHaveValuesKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCanBeKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListWordListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		
		///*
		//    Define a variable and give that variable a list of values it can take.
		//    Examples of use:
		//        colors can have values: green, blue, orange
		//        fruit can be: banana or apple or pear
		// */
		//ListDefinition:
		//    start_symbol = Variable  (" can have values: " | " can be: ") list = WordList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//start_symbol = Variable  (" can have values: " | " can be: ") list = WordList
		public Group getGroup() { return cGroup; }
		
		//start_symbol = Variable
		public Assignment getStart_symbolAssignment_0() { return cStart_symbolAssignment_0; }
		
		//Variable
		public RuleCall getStart_symbolVariableParserRuleCall_0_0() { return cStart_symbolVariableParserRuleCall_0_0; }
		
		//(" can have values: " | " can be: ")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//" can have values: "
		public Keyword getCanHaveValuesKeyword_1_0() { return cCanHaveValuesKeyword_1_0; }
		
		//" can be: "
		public Keyword getCanBeKeyword_1_1() { return cCanBeKeyword_1_1; }
		
		//list = WordList
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//WordList
		public RuleCall getListWordListParserRuleCall_2_0() { return cListWordListParserRuleCall_2_0; }
	}
	public class ObjectDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.ObjectDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectVariableParserRuleCall_0_0 = (RuleCall)cObjectAssignment_0.eContents().get(0);
		private final Keyword cIsAnObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cItHasTheseAttributesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAttributesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAttributesAttributeListParserRuleCall_3_0 = (RuleCall)cAttributesAssignment_3.eContents().get(0);
		
		//ObjectDefinition:
		//    object = Variable " is an object."
		//    "It has these attributes: " attributes = AttributeList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//object = Variable " is an object."
		//"It has these attributes: " attributes = AttributeList
		public Group getGroup() { return cGroup; }
		
		//object = Variable
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//Variable
		public RuleCall getObjectVariableParserRuleCall_0_0() { return cObjectVariableParserRuleCall_0_0; }
		
		//" is an object."
		public Keyword getIsAnObjectKeyword_1() { return cIsAnObjectKeyword_1; }
		
		//"It has these attributes: "
		public Keyword getItHasTheseAttributesKeyword_2() { return cItHasTheseAttributesKeyword_2; }
		
		//attributes = AttributeList
		public Assignment getAttributesAssignment_3() { return cAttributesAssignment_3; }
		
		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_3_0() { return cAttributesAttributeListParserRuleCall_3_0; }
	}
	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		///*
		//    Basic building blocks
		// */
		//Word:
		//    value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Variable");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Variable:
		//    value = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = ID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}
	public class StoryVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.StoryVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersModifierParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		
		//StoryVariable:
		//    value = ID modifiers += (Modifier)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = ID modifiers += (Modifier)*
		public Group getGroup() { return cGroup; }
		
		//value = ID
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_0() { return cValueIDTerminalRuleCall_0_0; }
		
		//modifiers += (Modifier)*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }
		
		//(Modifier)
		public RuleCall getModifiersModifierParserRuleCall_1_0() { return cModifiersModifierParserRuleCall_1_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Attribute");
		private final Assignment cDefinitionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDefinitionIDTerminalRuleCall_0 = (RuleCall)cDefinitionAssignment.eContents().get(0);
		
		//Attribute:
		//    definition = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//definition = ID
		public Assignment getDefinitionAssignment() { return cDefinitionAssignment; }
		
		//ID
		public RuleCall getDefinitionIDTerminalRuleCall_0() { return cDefinitionIDTerminalRuleCall_0; }
	}
	public class AdvancedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.AdvancedAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefinitionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDefinitionIDTerminalRuleCall_0_0 = (RuleCall)cDefinitionAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AdvancedAttribute:
		//    definition = ID "=" value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//definition = ID "=" value = STRING
		public Group getGroup() { return cGroup; }
		
		//definition = ID
		public Assignment getDefinitionAssignment_0() { return cDefinitionAssignment_0; }
		
		//ID
		public RuleCall getDefinitionIDTerminalRuleCall_0_0() { return cDefinitionIDTerminalRuleCall_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value = STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class ObjectAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.ObjectAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cObjectIDTerminalRuleCall_0_0 = (RuleCall)cObjectAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttributeIDTerminalRuleCall_2_0 = (RuleCall)cAttributeAssignment_2.eContents().get(0);
		
		//ObjectAttribute:
		//    object = ID "." attribute = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//object = ID "." attribute = ID
		public Group getGroup() { return cGroup; }
		
		//object = ID
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//ID
		public RuleCall getObjectIDTerminalRuleCall_0_0() { return cObjectIDTerminalRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute = ID
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//ID
		public RuleCall getAttributeIDTerminalRuleCall_2_0() { return cAttributeIDTerminalRuleCall_2_0; }
	}
	public class WordListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.WordList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWordsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWordsWordParserRuleCall_0_0 = (RuleCall)cWordsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSepAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSepSeparatorParserRuleCall_1_0_0 = (RuleCall)cSepAssignment_1_0.eContents().get(0);
		private final Assignment cWordAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWordWordParserRuleCall_1_1_0 = (RuleCall)cWordAssignment_1_1.eContents().get(0);
		
		//WordList:
		//    words += Word (sep=Separator word = Word)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//words += Word (sep=Separator word = Word)*
		public Group getGroup() { return cGroup; }
		
		//words += Word
		public Assignment getWordsAssignment_0() { return cWordsAssignment_0; }
		
		//Word
		public RuleCall getWordsWordParserRuleCall_0_0() { return cWordsWordParserRuleCall_0_0; }
		
		//(sep=Separator word = Word)*
		public Group getGroup_1() { return cGroup_1; }
		
		//sep=Separator
		public Assignment getSepAssignment_1_0() { return cSepAssignment_1_0; }
		
		//Separator
		public RuleCall getSepSeparatorParserRuleCall_1_0_0() { return cSepSeparatorParserRuleCall_1_0_0; }
		
		//word = Word
		public Assignment getWordAssignment_1_1() { return cWordAssignment_1_1; }
		
		//Word
		public RuleCall getWordWordParserRuleCall_1_1_0() { return cWordWordParserRuleCall_1_1_0; }
	}
	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.AttributeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cAttributesAlternatives_0_0 = (Alternatives)cAttributesAssignment_0.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_0_0_0 = (RuleCall)cAttributesAlternatives_0_0.eContents().get(0);
		private final RuleCall cAttributesAdvancedAttributeParserRuleCall_0_0_1 = (RuleCall)cAttributesAlternatives_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSepAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSepSeparatorParserRuleCall_1_0_0 = (RuleCall)cSepAssignment_1_0.eContents().get(0);
		private final Assignment cAttributeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cAttributeAlternatives_1_1_0 = (Alternatives)cAttributeAssignment_1_1.eContents().get(0);
		private final RuleCall cAttributeAttributeParserRuleCall_1_1_0_0 = (RuleCall)cAttributeAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cAttributeAdvancedAttributeParserRuleCall_1_1_0_1 = (RuleCall)cAttributeAlternatives_1_1_0.eContents().get(1);
		
		//AttributeList:
		//    attributes += (Attribute | AdvancedAttribute) (sep=Separator attribute = (Attribute | AdvancedAttribute))*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes += (Attribute | AdvancedAttribute) (sep=Separator attribute = (Attribute | AdvancedAttribute))*
		public Group getGroup() { return cGroup; }
		
		//attributes += (Attribute | AdvancedAttribute)
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//(Attribute | AdvancedAttribute)
		public Alternatives getAttributesAlternatives_0_0() { return cAttributesAlternatives_0_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0_0_0() { return cAttributesAttributeParserRuleCall_0_0_0; }
		
		//AdvancedAttribute
		public RuleCall getAttributesAdvancedAttributeParserRuleCall_0_0_1() { return cAttributesAdvancedAttributeParserRuleCall_0_0_1; }
		
		//(sep=Separator attribute = (Attribute | AdvancedAttribute))*
		public Group getGroup_1() { return cGroup_1; }
		
		//sep=Separator
		public Assignment getSepAssignment_1_0() { return cSepAssignment_1_0; }
		
		//Separator
		public RuleCall getSepSeparatorParserRuleCall_1_0_0() { return cSepSeparatorParserRuleCall_1_0_0; }
		
		//attribute = (Attribute | AdvancedAttribute)
		public Assignment getAttributeAssignment_1_1() { return cAttributeAssignment_1_1; }
		
		//(Attribute | AdvancedAttribute)
		public Alternatives getAttributeAlternatives_1_1_0() { return cAttributeAlternatives_1_1_0; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_1_1_0_0() { return cAttributeAttributeParserRuleCall_1_1_0_0; }
		
		//AdvancedAttribute
		public RuleCall getAttributeAdvancedAttributeParserRuleCall_1_1_0_1() { return cAttributeAdvancedAttributeParserRuleCall_1_1_0_1; }
	}
	public class SeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Separator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Separator:
		//    "," | "or"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"," | "or"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCapitalizationModifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFullCapitalizationModifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPluralityModifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArticleModifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPastTenseModifierParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Modifier:
		//    CapitalizationModifier |
		//    FullCapitalizationModifier |
		//    PluralityModifier |
		//    ArticleModifier |
		//    PastTenseModifier
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CapitalizationModifier |
		//FullCapitalizationModifier |
		//PluralityModifier |
		//ArticleModifier |
		//PastTenseModifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CapitalizationModifier
		public RuleCall getCapitalizationModifierParserRuleCall_0() { return cCapitalizationModifierParserRuleCall_0; }
		
		//FullCapitalizationModifier
		public RuleCall getFullCapitalizationModifierParserRuleCall_1() { return cFullCapitalizationModifierParserRuleCall_1; }
		
		//PluralityModifier
		public RuleCall getPluralityModifierParserRuleCall_2() { return cPluralityModifierParserRuleCall_2; }
		
		//ArticleModifier
		public RuleCall getArticleModifierParserRuleCall_3() { return cArticleModifierParserRuleCall_3; }
		
		//PastTenseModifier
		public RuleCall getPastTenseModifierParserRuleCall_4() { return cPastTenseModifierParserRuleCall_4; }
	}
	public class CapitalizationModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.CapitalizationModifier");
		private final Keyword cCapitalizeKeyword = (Keyword)rule.eContents().get(1);
		
		//CapitalizationModifier:
		//    ".capitalize"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".capitalize"
		public Keyword getCapitalizeKeyword() { return cCapitalizeKeyword; }
	}
	public class FullCapitalizationModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.FullCapitalizationModifier");
		private final Keyword cCAPITALIZEKeyword = (Keyword)rule.eContents().get(1);
		
		//FullCapitalizationModifier:
		//    ".CAPITALIZE"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".CAPITALIZE"
		public Keyword getCAPITALIZEKeyword() { return cCAPITALIZEKeyword; }
	}
	public class PluralityModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.PluralityModifier");
		private final Keyword cSKeyword = (Keyword)rule.eContents().get(1);
		
		//PluralityModifier:
		//    ".s"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".s"
		public Keyword getSKeyword() { return cSKeyword; }
	}
	public class ArticleModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.ArticleModifier");
		private final Keyword cAKeyword = (Keyword)rule.eContents().get(1);
		
		//ArticleModifier:
		//    ".a"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".a"
		public Keyword getAKeyword() { return cAKeyword; }
	}
	public class PastTenseModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.PastTenseModifier");
		private final Keyword cEdKeyword = (Keyword)rule.eContents().get(1);
		
		//PastTenseModifier:
		//    ".ed"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".ed"
		public Keyword getEdKeyword() { return cEdKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final DefinitionElements pDefinition;
	private final StoryElements pStory;
	private final ListDefinitionElements pListDefinition;
	private final ObjectDefinitionElements pObjectDefinition;
	private final WordElements pWord;
	private final VariableElements pVariable;
	private final StoryVariableElements pStoryVariable;
	private final AttributeElements pAttribute;
	private final AdvancedAttributeElements pAdvancedAttribute;
	private final ObjectAttributeElements pObjectAttribute;
	private final WordListElements pWordList;
	private final AttributeListElements pAttributeList;
	private final SeparatorElements pSeparator;
	private final ModifierElements pModifier;
	private final CapitalizationModifierElements pCapitalizationModifier;
	private final FullCapitalizationModifierElements pFullCapitalizationModifier;
	private final PluralityModifierElements pPluralityModifier;
	private final ArticleModifierElements pArticleModifier;
	private final PastTenseModifierElements pPastTenseModifier;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraceryPPGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pDefinition = new DefinitionElements();
		this.pStory = new StoryElements();
		this.pListDefinition = new ListDefinitionElements();
		this.pObjectDefinition = new ObjectDefinitionElements();
		this.pWord = new WordElements();
		this.pVariable = new VariableElements();
		this.pStoryVariable = new StoryVariableElements();
		this.pAttribute = new AttributeElements();
		this.pAdvancedAttribute = new AdvancedAttributeElements();
		this.pObjectAttribute = new ObjectAttributeElements();
		this.pWordList = new WordListElements();
		this.pAttributeList = new AttributeListElements();
		this.pSeparator = new SeparatorElements();
		this.pModifier = new ModifierElements();
		this.pCapitalizationModifier = new CapitalizationModifierElements();
		this.pFullCapitalizationModifier = new FullCapitalizationModifierElements();
		this.pPluralityModifier = new PluralityModifierElements();
		this.pArticleModifier = new ArticleModifierElements();
		this.pPastTenseModifier = new PastTenseModifierElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.mdd.tracerypp.TraceryPP".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Version 1.0
	//Model:
	//    statements += Statement*
	//    story = Story
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//    Definition
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Definition:
	//    ListDefinition |
	//    ObjectDefinition
	//;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	///*
	//    Used to define what the story should look like.
	//    There must be only one story in the model for now.
	// */
	//Story:
	//    "The story looks like this:"
	//    story += ( Word | StoryVariable | ObjectAttribute )*
	//;
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	///*
	//    Define a variable and give that variable a list of values it can take.
	//    Examples of use:
	//        colors can have values: green, blue, orange
	//        fruit can be: banana or apple or pear
	// */
	//ListDefinition:
	//    start_symbol = Variable  (" can have values: " | " can be: ") list = WordList
	//;
	public ListDefinitionElements getListDefinitionAccess() {
		return pListDefinition;
	}
	
	public ParserRule getListDefinitionRule() {
		return getListDefinitionAccess().getRule();
	}
	
	//ObjectDefinition:
	//    object = Variable " is an object."
	//    "It has these attributes: " attributes = AttributeList
	//;
	public ObjectDefinitionElements getObjectDefinitionAccess() {
		return pObjectDefinition;
	}
	
	public ParserRule getObjectDefinitionRule() {
		return getObjectDefinitionAccess().getRule();
	}
	
	///*
	//    Basic building blocks
	// */
	//Word:
	//    value = STRING
	//;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}
	
	//Variable:
	//    value = ID
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//StoryVariable:
	//    value = ID modifiers += (Modifier)*
	//;
	public StoryVariableElements getStoryVariableAccess() {
		return pStoryVariable;
	}
	
	public ParserRule getStoryVariableRule() {
		return getStoryVariableAccess().getRule();
	}
	
	//Attribute:
	//    definition = ID
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//AdvancedAttribute:
	//    definition = ID "=" value = STRING
	//;
	public AdvancedAttributeElements getAdvancedAttributeAccess() {
		return pAdvancedAttribute;
	}
	
	public ParserRule getAdvancedAttributeRule() {
		return getAdvancedAttributeAccess().getRule();
	}
	
	//ObjectAttribute:
	//    object = ID "." attribute = ID
	//;
	public ObjectAttributeElements getObjectAttributeAccess() {
		return pObjectAttribute;
	}
	
	public ParserRule getObjectAttributeRule() {
		return getObjectAttributeAccess().getRule();
	}
	
	//WordList:
	//    words += Word (sep=Separator word = Word)*
	//;
	public WordListElements getWordListAccess() {
		return pWordList;
	}
	
	public ParserRule getWordListRule() {
		return getWordListAccess().getRule();
	}
	
	//AttributeList:
	//    attributes += (Attribute | AdvancedAttribute) (sep=Separator attribute = (Attribute | AdvancedAttribute))*
	//;
	public AttributeListElements getAttributeListAccess() {
		return pAttributeList;
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}
	
	//Separator:
	//    "," | "or"
	//;
	public SeparatorElements getSeparatorAccess() {
		return pSeparator;
	}
	
	public ParserRule getSeparatorRule() {
		return getSeparatorAccess().getRule();
	}
	
	//Modifier:
	//    CapitalizationModifier |
	//    FullCapitalizationModifier |
	//    PluralityModifier |
	//    ArticleModifier |
	//    PastTenseModifier
	//;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//CapitalizationModifier:
	//    ".capitalize"
	//;
	public CapitalizationModifierElements getCapitalizationModifierAccess() {
		return pCapitalizationModifier;
	}
	
	public ParserRule getCapitalizationModifierRule() {
		return getCapitalizationModifierAccess().getRule();
	}
	
	//FullCapitalizationModifier:
	//    ".CAPITALIZE"
	//;
	public FullCapitalizationModifierElements getFullCapitalizationModifierAccess() {
		return pFullCapitalizationModifier;
	}
	
	public ParserRule getFullCapitalizationModifierRule() {
		return getFullCapitalizationModifierAccess().getRule();
	}
	
	//PluralityModifier:
	//    ".s"
	//;
	public PluralityModifierElements getPluralityModifierAccess() {
		return pPluralityModifier;
	}
	
	public ParserRule getPluralityModifierRule() {
		return getPluralityModifierAccess().getRule();
	}
	
	//ArticleModifier:
	//    ".a"
	//;
	public ArticleModifierElements getArticleModifierAccess() {
		return pArticleModifier;
	}
	
	public ParserRule getArticleModifierRule() {
		return getArticleModifierAccess().getRule();
	}
	
	//PastTenseModifier:
	//    ".ed"
	//;
	public PastTenseModifierElements getPastTenseModifierAccess() {
		return pPastTenseModifier;
	}
	
	public ParserRule getPastTenseModifierRule() {
		return getPastTenseModifierAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
