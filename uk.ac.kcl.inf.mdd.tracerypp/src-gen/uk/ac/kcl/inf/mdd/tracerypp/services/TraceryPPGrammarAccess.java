/*
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mdd.tracerypp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraceryPPGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//    statements += Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Statement");
		private final RuleCall cRuleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//    Rule
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Rule
		public RuleCall getRuleParserRuleCall() { return cRuleParserRuleCall; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStart_symbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStart_symbolVariableParserRuleCall_0_0 = (RuleCall)cStart_symbolAssignment_0.eContents().get(0);
		private final Keyword cCanHaveValuesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		
		//Rule:
		//    start_symbol = Variable  " can have values: " list = List
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//start_symbol = Variable  " can have values: " list = List
		public Group getGroup() { return cGroup; }
		
		//start_symbol = Variable
		public Assignment getStart_symbolAssignment_0() { return cStart_symbolAssignment_0; }
		
		//Variable
		public RuleCall getStart_symbolVariableParserRuleCall_0_0() { return cStart_symbolVariableParserRuleCall_0_0; }
		
		//" can have values: "
		public Keyword getCanHaveValuesKeyword_1() { return cCanHaveValuesKeyword_1; }
		
		//list = List
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//List
		public RuleCall getListListParserRuleCall_2_0() { return cListListParserRuleCall_2_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Variable");
		private final Assignment cTitleAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTitleIDTerminalRuleCall_0 = (RuleCall)cTitleAssignment.eContents().get(0);
		
		//Variable:
		//    title = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//title = ID
		public Assignment getTitleAssignment() { return cTitleAssignment; }
		
		//ID
		public RuleCall getTitleIDTerminalRuleCall_0() { return cTitleIDTerminalRuleCall_0; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWordWordParserRuleCall_0_0 = (RuleCall)cWordAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cSepAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSepSeparatorParserRuleCall_1_0_0 = (RuleCall)cSepAssignment_1_0.eContents().get(0);
		private final Assignment cWordAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWordWordParserRuleCall_1_1_0 = (RuleCall)cWordAssignment_1_1.eContents().get(0);
		
		//List:
		//    word = Word (sep=Separator word = Word)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//word = Word (sep=Separator word = Word)*
		public Group getGroup() { return cGroup; }
		
		//word = Word
		public Assignment getWordAssignment_0() { return cWordAssignment_0; }
		
		//Word
		public RuleCall getWordWordParserRuleCall_0_0() { return cWordWordParserRuleCall_0_0; }
		
		//(sep=Separator word = Word)*
		public Group getGroup_1() { return cGroup_1; }
		
		//sep=Separator
		public Assignment getSepAssignment_1_0() { return cSepAssignment_1_0; }
		
		//Separator
		public RuleCall getSepSeparatorParserRuleCall_1_0_0() { return cSepSeparatorParserRuleCall_1_0_0; }
		
		//word = Word
		public Assignment getWordAssignment_1_1() { return cWordAssignment_1_1; }
		
		//Word
		public RuleCall getWordWordParserRuleCall_1_1_0() { return cWordWordParserRuleCall_1_1_0; }
	}
	public class SeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Separator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Separator:
		//    "," | "or"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"," | "or"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}
	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
		private final Assignment cWordAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWordSTRINGTerminalRuleCall_0 = (RuleCall)cWordAssignment.eContents().get(0);
		
		//Word:
		//    word = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//word = STRING
		public Assignment getWordAssignment() { return cWordAssignment; }
		
		//STRING
		public RuleCall getWordSTRINGTerminalRuleCall_0() { return cWordSTRINGTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final RuleElements pRule;
	private final VariableElements pVariable;
	private final ListElements pList;
	private final SeparatorElements pSeparator;
	private final WordElements pWord;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraceryPPGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pRule = new RuleElements();
		this.pVariable = new VariableElements();
		this.pList = new ListElements();
		this.pSeparator = new SeparatorElements();
		this.pWord = new WordElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.mdd.tracerypp.TraceryPP".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    statements += Statement*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//    Rule
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Rule:
	//    start_symbol = Variable  " can have values: " list = List
	//;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	//Variable:
	//    title = ID
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//List:
	//    word = Word (sep=Separator word = Word)*
	//;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Separator:
	//    "," | "or"
	//;
	public SeparatorElements getSeparatorAccess() {
		return pSeparator;
	}
	
	public ParserRule getSeparatorRule() {
		return getSeparatorAccess().getRule();
	}
	
	//Word:
	//    word = STRING
	//;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
