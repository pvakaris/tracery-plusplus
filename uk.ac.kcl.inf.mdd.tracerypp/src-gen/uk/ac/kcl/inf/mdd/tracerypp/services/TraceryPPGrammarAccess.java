/*
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mdd.tracerypp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraceryPPGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//    statements += Statement*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//statements += Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTitleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSentenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//    Title |
		//    Sentence
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Title |
		//Sentence
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Title
		public RuleCall getTitleParserRuleCall_0() { return cTitleParserRuleCall_0; }
		
		//Sentence
		public RuleCall getSentenceParserRuleCall_1() { return cSentenceParserRuleCall_1; }
	}
	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStart_symbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStart_symbolStartSymbolParserRuleCall_0_0 = (RuleCall)cStart_symbolAssignment_0.eContents().get(0);
		private final Keyword cCanHaveValuesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		
		//Title:
		//    start_symbol = StartSymbol  'can have values: ' list = List
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//start_symbol = StartSymbol  'can have values: ' list = List
		public Group getGroup() { return cGroup; }
		
		//start_symbol = StartSymbol
		public Assignment getStart_symbolAssignment_0() { return cStart_symbolAssignment_0; }
		
		//StartSymbol
		public RuleCall getStart_symbolStartSymbolParserRuleCall_0_0() { return cStart_symbolStartSymbolParserRuleCall_0_0; }
		
		//'can have values: '
		public Keyword getCanHaveValuesKeyword_1() { return cCanHaveValuesKeyword_1; }
		
		//list = List
		public Assignment getListAssignment_2() { return cListAssignment_2; }
		
		//List
		public RuleCall getListListParserRuleCall_2_0() { return cListListParserRuleCall_2_0; }
	}
	public class StartSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.StartSymbol");
		private final Assignment cTitleAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTitleIDTerminalRuleCall_0 = (RuleCall)cTitleAssignment.eContents().get(0);
		
		//StartSymbol:
		//    title = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//title = ID
		public Assignment getTitleAssignment() { return cTitleAssignment; }
		
		//ID
		public RuleCall getTitleIDTerminalRuleCall_0() { return cTitleIDTerminalRuleCall_0; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWordWordParserRuleCall_0_0 = (RuleCall)cWordAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cCommaSpaceKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cWordAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWordWordParserRuleCall_1_1_0 = (RuleCall)cWordAssignment_1_1.eContents().get(0);
		
		//List:
		//    word = Word ((', ' | ',') word = Word)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//word = Word ((', ' | ',') word = Word)*
		public Group getGroup() { return cGroup; }
		
		//word = Word
		public Assignment getWordAssignment_0() { return cWordAssignment_0; }
		
		//Word
		public RuleCall getWordWordParserRuleCall_0_0() { return cWordWordParserRuleCall_0_0; }
		
		//((', ' | ',') word = Word)*
		public Group getGroup_1() { return cGroup_1; }
		
		//(', ' | ',')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//', '
		public Keyword getCommaSpaceKeyword_1_0_0() { return cCommaSpaceKeyword_1_0_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_1() { return cCommaKeyword_1_0_1; }
		
		//word = Word
		public Assignment getWordAssignment_1_1() { return cWordAssignment_1_1; }
		
		//Word
		public RuleCall getWordWordParserRuleCall_1_1_0() { return cWordWordParserRuleCall_1_1_0; }
	}
	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Word");
		private final Assignment cWordAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWordSTRINGTerminalRuleCall_0 = (RuleCall)cWordAssignment.eContents().get(0);
		
		//Word:
		//    word = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//word = STRING
		public Assignment getWordAssignment() { return cWordAssignment; }
		
		//STRING
		public RuleCall getWordSTRINGTerminalRuleCall_0() { return cWordSTRINGTerminalRuleCall_0; }
	}
	public class SentenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.mdd.tracerypp.TraceryPP.Sentence");
		private final Assignment cWordAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cWordSTRINGTerminalRuleCall_0 = (RuleCall)cWordAssignment.eContents().get(0);
		
		//Sentence:
		//    word = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//word = STRING
		public Assignment getWordAssignment() { return cWordAssignment; }
		
		//STRING
		public RuleCall getWordSTRINGTerminalRuleCall_0() { return cWordSTRINGTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final TitleElements pTitle;
	private final StartSymbolElements pStartSymbol;
	private final ListElements pList;
	private final WordElements pWord;
	private final SentenceElements pSentence;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraceryPPGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pTitle = new TitleElements();
		this.pStartSymbol = new StartSymbolElements();
		this.pList = new ListElements();
		this.pWord = new WordElements();
		this.pSentence = new SentenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.mdd.tracerypp.TraceryPP".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    statements += Statement*
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//    Title |
	//    Sentence
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Title:
	//    start_symbol = StartSymbol  'can have values: ' list = List
	//;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}
	
	//StartSymbol:
	//    title = ID
	//;
	public StartSymbolElements getStartSymbolAccess() {
		return pStartSymbol;
	}
	
	public ParserRule getStartSymbolRule() {
		return getStartSymbolAccess().getRule();
	}
	
	//List:
	//    word = Word ((', ' | ',') word = Word)*
	//;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//Word:
	//    word = STRING
	//;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}
	
	//Sentence:
	//    word = STRING
	//;
	public SentenceElements getSentenceAccess() {
		return pSentence;
	}
	
	public ParserRule getSentenceRule() {
		return getSentenceAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
