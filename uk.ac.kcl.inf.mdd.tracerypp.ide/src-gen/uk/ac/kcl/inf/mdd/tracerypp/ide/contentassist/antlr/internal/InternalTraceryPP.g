/*
 * generated by Xtext 2.29.0
 */
grammar InternalTraceryPP;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.mdd.tracerypp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mdd.tracerypp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.mdd.tracerypp.services.TraceryPPGrammarAccess;

}
@parser::members {
	private TraceryPPGrammarAccess grammarAccess;

	public void setGrammarAccess(TraceryPPGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getStatementsAssignment()); }
		(rule__Model__StatementsAssignment)*
		{ after(grammarAccess.getModelAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitle
entryRuleTitle
:
{ before(grammarAccess.getTitleRule()); }
	 ruleTitle
{ after(grammarAccess.getTitleRule()); } 
	 EOF 
;

// Rule Title
ruleTitle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTitleAccess().getGroup()); }
		(rule__Title__Group__0)
		{ after(grammarAccess.getTitleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStartSymbol
entryRuleStartSymbol
:
{ before(grammarAccess.getStartSymbolRule()); }
	 ruleStartSymbol
{ after(grammarAccess.getStartSymbolRule()); } 
	 EOF 
;

// Rule StartSymbol
ruleStartSymbol 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStartSymbolAccess().getTitleAssignment()); }
		(rule__StartSymbol__TitleAssignment)
		{ after(grammarAccess.getStartSymbolAccess().getTitleAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getGroup()); }
		(rule__List__Group__0)
		{ after(grammarAccess.getListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWord
entryRuleWord
:
{ before(grammarAccess.getWordRule()); }
	 ruleWord
{ after(grammarAccess.getWordRule()); } 
	 EOF 
;

// Rule Word
ruleWord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWordAccess().getWordAssignment()); }
		(rule__Word__WordAssignment)
		{ after(grammarAccess.getWordAccess().getWordAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSentence
entryRuleSentence
:
{ before(grammarAccess.getSentenceRule()); }
	 ruleSentence
{ after(grammarAccess.getSentenceRule()); } 
	 EOF 
;

// Rule Sentence
ruleSentence 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSentenceAccess().getWordAssignment()); }
		(rule__Sentence__WordAssignment)
		{ after(grammarAccess.getSentenceAccess().getWordAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getTitleParserRuleCall_0()); }
		ruleTitle
		{ after(grammarAccess.getStatementAccess().getTitleParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSentenceParserRuleCall_1()); }
		ruleSentence
		{ after(grammarAccess.getStatementAccess().getSentenceParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getCommaSpaceKeyword_1_0_0()); }
		', '
		{ after(grammarAccess.getListAccess().getCommaSpaceKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getListAccess().getCommaKeyword_1_0_1()); }
		','
		{ after(grammarAccess.getListAccess().getCommaKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__0__Impl
	rule__Title__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getStart_symbolAssignment_0()); }
	(rule__Title__Start_symbolAssignment_0)
	{ after(grammarAccess.getTitleAccess().getStart_symbolAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__1__Impl
	rule__Title__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getCanHaveValuesKeyword_1()); }
	'can have values: '
	{ after(grammarAccess.getTitleAccess().getCanHaveValuesKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getListAssignment_2()); }
	(rule__Title__ListAssignment_2)
	{ after(grammarAccess.getTitleAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getWordAssignment_0()); }
	(rule__List__WordAssignment_0)
	{ after(grammarAccess.getListAccess().getWordAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getGroup_1()); }
	(rule__List__Group_1__0)*
	{ after(grammarAccess.getListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1__0__Impl
	rule__List__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getAlternatives_1_0()); }
	(rule__List__Alternatives_1_0)
	{ after(grammarAccess.getListAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getWordAssignment_1_1()); }
	(rule__List__WordAssignment_1_1)
	{ after(grammarAccess.getListAccess().getWordAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Start_symbolAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleAccess().getStart_symbolStartSymbolParserRuleCall_0_0()); }
		ruleStartSymbol
		{ after(grammarAccess.getTitleAccess().getStart_symbolStartSymbolParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleAccess().getListListParserRuleCall_2_0()); }
		ruleList
		{ after(grammarAccess.getTitleAccess().getListListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StartSymbol__TitleAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStartSymbolAccess().getTitleIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getStartSymbolAccess().getTitleIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__WordAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getWordWordParserRuleCall_0_0()); }
		ruleWord
		{ after(grammarAccess.getListAccess().getWordWordParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__WordAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getWordWordParserRuleCall_1_1_0()); }
		ruleWord
		{ after(grammarAccess.getListAccess().getWordWordParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__WordAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getWordSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getWordAccess().getWordSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sentence__WordAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceAccess().getWordSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getSentenceAccess().getWordSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
