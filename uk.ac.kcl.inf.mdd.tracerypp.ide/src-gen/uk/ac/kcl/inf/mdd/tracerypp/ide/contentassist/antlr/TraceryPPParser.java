/*
 * generated by Xtext 2.29.0
 */
package uk.ac.kcl.inf.mdd.tracerypp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.mdd.tracerypp.ide.contentassist.antlr.internal.InternalTraceryPPParser;
import uk.ac.kcl.inf.mdd.tracerypp.services.TraceryPPGrammarAccess;

public class TraceryPPParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TraceryPPGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TraceryPPGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSeparatorAccess().getAlternatives(), "rule__Separator__Alternatives");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getListAccess().getGroup(), "rule__List__Group__0");
			builder.put(grammarAccess.getListAccess().getGroup_1(), "rule__List__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getStatementsAssignment(), "rule__Model__StatementsAssignment");
			builder.put(grammarAccess.getRuleAccess().getStart_symbolAssignment_0(), "rule__Rule__Start_symbolAssignment_0");
			builder.put(grammarAccess.getRuleAccess().getListAssignment_2(), "rule__Rule__ListAssignment_2");
			builder.put(grammarAccess.getVariableAccess().getTitleAssignment(), "rule__Variable__TitleAssignment");
			builder.put(grammarAccess.getListAccess().getWordAssignment_0(), "rule__List__WordAssignment_0");
			builder.put(grammarAccess.getListAccess().getSepAssignment_1_0(), "rule__List__SepAssignment_1_0");
			builder.put(grammarAccess.getListAccess().getWordAssignment_1_1(), "rule__List__WordAssignment_1_1");
			builder.put(grammarAccess.getWordAccess().getWordAssignment(), "rule__Word__WordAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TraceryPPGrammarAccess grammarAccess;

	@Override
	protected InternalTraceryPPParser createParser() {
		InternalTraceryPPParser result = new InternalTraceryPPParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TraceryPPGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TraceryPPGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
