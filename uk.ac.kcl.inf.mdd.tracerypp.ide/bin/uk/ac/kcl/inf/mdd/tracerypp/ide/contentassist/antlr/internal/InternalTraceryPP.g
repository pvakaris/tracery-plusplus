/*
 * generated by Xtext 2.29.0
 */
grammar InternalTraceryPP;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.mdd.tracerypp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.mdd.tracerypp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.mdd.tracerypp.services.TraceryPPGrammarAccess;

}
@parser::members {
	private TraceryPPGrammarAccess grammarAccess;

	public void setGrammarAccess(TraceryPPGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getStatementsAssignment()); }
		(rule__Model__StatementsAssignment)*
		{ after(grammarAccess.getModelAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getListDefinitionParserRuleCall()); }
		ruleListDefinition
		{ after(grammarAccess.getDefinitionAccess().getListDefinitionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getSentenceRuleParserRuleCall()); }
		ruleSentenceRule
		{ after(grammarAccess.getRuleAccess().getSentenceRuleParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStory
entryRuleStory
:
{ before(grammarAccess.getStoryRule()); }
	 ruleStory
{ after(grammarAccess.getStoryRule()); } 
	 EOF 
;

// Rule Story
ruleStory 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoryAccess().getGroup()); }
		(rule__Story__Group__0)
		{ after(grammarAccess.getStoryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListDefinition
entryRuleListDefinition
:
{ before(grammarAccess.getListDefinitionRule()); }
	 ruleListDefinition
{ after(grammarAccess.getListDefinitionRule()); } 
	 EOF 
;

// Rule ListDefinition
ruleListDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListDefinitionAccess().getGroup()); }
		(rule__ListDefinition__Group__0)
		{ after(grammarAccess.getListDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSentenceRule
entryRuleSentenceRule
:
{ before(grammarAccess.getSentenceRuleRule()); }
	 ruleSentenceRule
{ after(grammarAccess.getSentenceRuleRule()); } 
	 EOF 
;

// Rule SentenceRule
ruleSentenceRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSentenceRuleAccess().getStart_symbolAssignment()); }
		(rule__SentenceRule__Start_symbolAssignment)
		{ after(grammarAccess.getSentenceRuleAccess().getStart_symbolAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getValueAssignment()); }
		(rule__Variable__ValueAssignment)
		{ after(grammarAccess.getVariableAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleList
entryRuleList
:
{ before(grammarAccess.getListRule()); }
	 ruleList
{ after(grammarAccess.getListRule()); } 
	 EOF 
;

// Rule List
ruleList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListAccess().getGroup()); }
		(rule__List__Group__0)
		{ after(grammarAccess.getListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSeparator
entryRuleSeparator
:
{ before(grammarAccess.getSeparatorRule()); }
	 ruleSeparator
{ after(grammarAccess.getSeparatorRule()); } 
	 EOF 
;

// Rule Separator
ruleSeparator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSeparatorAccess().getAlternatives()); }
		(rule__Separator__Alternatives)
		{ after(grammarAccess.getSeparatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStoryVariable
entryRuleStoryVariable
:
{ before(grammarAccess.getStoryVariableRule()); }
	 ruleStoryVariable
{ after(grammarAccess.getStoryVariableRule()); } 
	 EOF 
;

// Rule StoryVariable
ruleStoryVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoryVariableAccess().getGroup()); }
		(rule__StoryVariable__Group__0)
		{ after(grammarAccess.getStoryVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModifier
entryRuleModifier
:
{ before(grammarAccess.getModifierRule()); }
	 ruleModifier
{ after(grammarAccess.getModifierRule()); } 
	 EOF 
;

// Rule Modifier
ruleModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifierAccess().getAlternatives()); }
		(rule__Modifier__Alternatives)
		{ after(grammarAccess.getModifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCapitalizationModifier
entryRuleCapitalizationModifier
:
{ before(grammarAccess.getCapitalizationModifierRule()); }
	 ruleCapitalizationModifier
{ after(grammarAccess.getCapitalizationModifierRule()); } 
	 EOF 
;

// Rule CapitalizationModifier
ruleCapitalizationModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCapitalizationModifierAccess().getCapitalizeKeyword()); }
		'.capitalize'
		{ after(grammarAccess.getCapitalizationModifierAccess().getCapitalizeKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFullCapitalizationModifier
entryRuleFullCapitalizationModifier
:
{ before(grammarAccess.getFullCapitalizationModifierRule()); }
	 ruleFullCapitalizationModifier
{ after(grammarAccess.getFullCapitalizationModifierRule()); } 
	 EOF 
;

// Rule FullCapitalizationModifier
ruleFullCapitalizationModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFullCapitalizationModifierAccess().getCAPITALIZEKeyword()); }
		'.CAPITALIZE'
		{ after(grammarAccess.getFullCapitalizationModifierAccess().getCAPITALIZEKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePluralityModifier
entryRulePluralityModifier
:
{ before(grammarAccess.getPluralityModifierRule()); }
	 rulePluralityModifier
{ after(grammarAccess.getPluralityModifierRule()); } 
	 EOF 
;

// Rule PluralityModifier
rulePluralityModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPluralityModifierAccess().getSKeyword()); }
		'.s'
		{ after(grammarAccess.getPluralityModifierAccess().getSKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArticleModifier
entryRuleArticleModifier
:
{ before(grammarAccess.getArticleModifierRule()); }
	 ruleArticleModifier
{ after(grammarAccess.getArticleModifierRule()); } 
	 EOF 
;

// Rule ArticleModifier
ruleArticleModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArticleModifierAccess().getAKeyword()); }
		'.a'
		{ after(grammarAccess.getArticleModifierAccess().getAKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePastTenseModifier
entryRulePastTenseModifier
:
{ before(grammarAccess.getPastTenseModifierRule()); }
	 rulePastTenseModifier
{ after(grammarAccess.getPastTenseModifierRule()); } 
	 EOF 
;

// Rule PastTenseModifier
rulePastTenseModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPastTenseModifierAccess().getEdKeyword()); }
		'.ed'
		{ after(grammarAccess.getPastTenseModifierAccess().getEdKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWord
entryRuleWord
:
{ before(grammarAccess.getWordRule()); }
	 ruleWord
{ after(grammarAccess.getWordRule()); } 
	 EOF 
;

// Rule Word
ruleWord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWordAccess().getValueAssignment()); }
		(rule__Word__ValueAssignment)
		{ after(grammarAccess.getWordAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getDefinitionParserRuleCall_0()); }
		ruleDefinition
		{ after(grammarAccess.getStatementAccess().getDefinitionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getRuleParserRuleCall_1()); }
		ruleRule
		{ after(grammarAccess.getStatementAccess().getRuleParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getStoryParserRuleCall_2()); }
		ruleStory
		{ after(grammarAccess.getStatementAccess().getStoryParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__StoryAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryAccess().getStoryWordParserRuleCall_1_0_0()); }
		ruleWord
		{ after(grammarAccess.getStoryAccess().getStoryWordParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStoryAccess().getStoryStoryVariableParserRuleCall_1_0_1()); }
		ruleStoryVariable
		{ after(grammarAccess.getStoryAccess().getStoryStoryVariableParserRuleCall_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDefinition__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListDefinitionAccess().getCanHaveValuesKeyword_1_0()); }
		' can have values: '
		{ after(grammarAccess.getListDefinitionAccess().getCanHaveValuesKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getListDefinitionAccess().getCanBeKeyword_1_1()); }
		' can be: '
		{ after(grammarAccess.getListDefinitionAccess().getCanBeKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Separator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeparatorAccess().getCommaKeyword_0()); }
		','
		{ after(grammarAccess.getSeparatorAccess().getCommaKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSeparatorAccess().getOrKeyword_1()); }
		'or'
		{ after(grammarAccess.getSeparatorAccess().getOrKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierAccess().getCapitalizationModifierParserRuleCall_0()); }
		ruleCapitalizationModifier
		{ after(grammarAccess.getModifierAccess().getCapitalizationModifierParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getFullCapitalizationModifierParserRuleCall_1()); }
		ruleFullCapitalizationModifier
		{ after(grammarAccess.getModifierAccess().getFullCapitalizationModifierParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getPluralityModifierParserRuleCall_2()); }
		rulePluralityModifier
		{ after(grammarAccess.getModifierAccess().getPluralityModifierParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getArticleModifierParserRuleCall_3()); }
		ruleArticleModifier
		{ after(grammarAccess.getModifierAccess().getArticleModifierParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getPastTenseModifierParserRuleCall_4()); }
		rulePastTenseModifier
		{ after(grammarAccess.getModifierAccess().getPastTenseModifierParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Story__Group__0__Impl
	rule__Story__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryAccess().getTheStoryLooksLikeThisKeyword_0()); }
	'The story looks like this:'
	{ after(grammarAccess.getStoryAccess().getTheStoryLooksLikeThisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Story__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryAccess().getStoryAssignment_1()); }
	(rule__Story__StoryAssignment_1)*
	{ after(grammarAccess.getStoryAccess().getStoryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDefinition__Group__0__Impl
	rule__ListDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDefinitionAccess().getStart_symbolAssignment_0()); }
	(rule__ListDefinition__Start_symbolAssignment_0)
	{ after(grammarAccess.getListDefinitionAccess().getStart_symbolAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDefinition__Group__1__Impl
	rule__ListDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDefinitionAccess().getAlternatives_1()); }
	(rule__ListDefinition__Alternatives_1)
	{ after(grammarAccess.getListDefinitionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDefinitionAccess().getListAssignment_2()); }
	(rule__ListDefinition__ListAssignment_2)
	{ after(grammarAccess.getListDefinitionAccess().getListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__0__Impl
	rule__List__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getWordsAssignment_0()); }
	(rule__List__WordsAssignment_0)
	{ after(grammarAccess.getListAccess().getWordsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getGroup_1()); }
	(rule__List__Group_1__0)*
	{ after(grammarAccess.getListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__List__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1__0__Impl
	rule__List__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getSepAssignment_1_0()); }
	(rule__List__SepAssignment_1_0)
	{ after(grammarAccess.getListAccess().getSepAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__List__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__List__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListAccess().getWordAssignment_1_1()); }
	(rule__List__WordAssignment_1_1)
	{ after(grammarAccess.getListAccess().getWordAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StoryVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StoryVariable__Group__0__Impl
	rule__StoryVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryVariableAccess().getValueAssignment_0()); }
	(rule__StoryVariable__ValueAssignment_0)
	{ after(grammarAccess.getStoryVariableAccess().getValueAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StoryVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryVariableAccess().getModifiersAssignment_1()); }
	(rule__StoryVariable__ModifiersAssignment_1)*
	{ after(grammarAccess.getStoryVariableAccess().getModifiersAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__StoryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryAccess().getStoryAlternatives_1_0()); }
		(rule__Story__StoryAlternatives_1_0)
		{ after(grammarAccess.getStoryAccess().getStoryAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDefinition__Start_symbolAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListDefinitionAccess().getStart_symbolVariableParserRuleCall_0_0()); }
		ruleVariable
		{ after(grammarAccess.getListDefinitionAccess().getStart_symbolVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDefinition__ListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListDefinitionAccess().getListListParserRuleCall_2_0()); }
		ruleList
		{ after(grammarAccess.getListDefinitionAccess().getListListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SentenceRule__Start_symbolAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSentenceRuleAccess().getStart_symbolVariableParserRuleCall_0()); }
		ruleVariable
		{ after(grammarAccess.getSentenceRuleAccess().getStart_symbolVariableParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getValueIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__WordsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getWordsWordParserRuleCall_0_0()); }
		ruleWord
		{ after(grammarAccess.getListAccess().getWordsWordParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__SepAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getSepSeparatorParserRuleCall_1_0_0()); }
		ruleSeparator
		{ after(grammarAccess.getListAccess().getSepSeparatorParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__List__WordAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListAccess().getWordWordParserRuleCall_1_1_0()); }
		ruleWord
		{ after(grammarAccess.getListAccess().getWordWordParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryVariableAccess().getValueIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getStoryVariableAccess().getValueIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__ModifiersAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryVariableAccess().getModifiersModifierParserRuleCall_1_0()); }
		ruleModifier
		{ after(grammarAccess.getStoryVariableAccess().getModifiersModifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
