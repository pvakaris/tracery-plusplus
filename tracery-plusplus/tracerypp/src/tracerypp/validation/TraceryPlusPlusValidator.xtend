/*
 * generated by Xtext 2.30.0
 */
package tracerypp.validation

import org.eclipse.xtext.validation.Check
import tracerypp.traceryPlusPlus.ObjectDeclaration
import tracerypp.traceryPlusPlus.Attribute
import tracerypp.traceryPlusPlus.NameExistingListAttribute
import tracerypp.traceryPlusPlus.NameValueAttribute
import tracerypp.traceryPlusPlus.ListDeclaration
import tracerypp.traceryPlusPlus.Variable
import tracerypp.traceryPlusPlus.SubstoryDeclaration
import tracerypp.traceryPlusPlus.ModifierList
import tracerypp.traceryPlusPlus.TraceryPlusPlusPackage
import tracerypp.traceryPlusPlus.TraceryPlusPlusProgram
import tracerypp.traceryPlusPlus.ObjectUse
import tracerypp.traceryPlusPlus.ListUse
import tracerypp.traceryPlusPlus.SubstoryUse

/**
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 * 
 * Author: Vakaris Paulavicius
 * Version 1.1
 */
class TraceryPlusPlusValidator extends AbstractTraceryPlusPlusValidator {

	public static val NO_STORY = 'tracer ypp.NO_STORY'

	/*
	 * The variable name 'story' is reserved and thus cannot be specified as any variable name
	 */
	@Check
	def disallowStoryName(Variable variable) {
	    if (variable.name == "story") {
	    	error("The name 'story' is reserved and cannot be used as a variable name.", null)
	    }
	}
	
	/*
	 * Check that there are no identical variable names
	 */
	@Check
	def checkUniqueVariableName(TraceryPlusPlusProgram program) {
	   val variables = program.statements.filter(Variable)
	   
		for (var i = 0; i < variables.size; i++) {
	      for (var j = i + 1; j < variables.size; j++) {
	      	
	         if (variables.get(i).name.toString() == variables.get(j).name.toString()) {
	         	val obj = variables.get(i)
	            error(getType(obj) + " with name '" + obj.name + "' already exists. Please choose other name.", variables.get(j),
		                	TraceryPlusPlusPackage.Literals.VARIABLE__NAME)
	         }
	      }
   		}
	}
	
	/*
	 * Give warnings for those variables that are never used | THE SEMANTIC CHECK
	 */
	@Check
	def checkForUnusedVariables(TraceryPlusPlusProgram program) {
	   val variables = program.statements.filter(Variable)
	   for(v : variables) {
	   	 if (!v.checkIfUsed(program)) {
	   	 	warning(getType(v) + " '" + v.name + "' is never referenced.", v, TraceryPlusPlusPackage.Literals.VARIABLE__NAME)
	   	 }
	   }
	}
	
	dispatch def checkIfUsed(ObjectDeclaration variable, TraceryPlusPlusProgram program) {
		// Check for Object uses in the main story
		val story = program.story.story
		for (element : story) {
	        if (element instanceof ObjectUse) {
	        	if (element.object.name == variable.name) {
	        		return true
	        	}
	        }
    	}
    	
    	// Check for Object uses in each substory
    	val substories = program.statements.filter(SubstoryDeclaration)
    	for (sub : substories) {
    		for(element : sub.story) {
    			if (element instanceof ObjectUse) {
		        	if (element.object.name == variable.name) {
		        		return true
		        	}
	        	}
    		}
    	}
    	return false
	}
	
	dispatch def checkIfUsed(ListDeclaration variable, TraceryPlusPlusProgram program) {
		// Check for List uses in the main story
		val story = program.story.story
		for (element : story) {
	        if (element instanceof ListUse) {
	        	if (element.variable.name == variable.name) {
	        		return true
	        	}
	        }
    	}
    	
    	// Check for List uses in each substory
    	val substories = program.statements.filter(SubstoryDeclaration)
    	for (sub : substories) {
    		for(element : sub.story) {
    			if (element instanceof ListUse) {
		        	if (element.variable.name == variable.name) {
		        		return true
		        	}
	        	}
    		}
    	}
    	
    	// Check for List uses as some values for some object attributes
    	val objects = program.statements.filter(ObjectDeclaration)
    	for(obj : objects) {
    		for(attr : obj.attributes.attributes) {
    			if(attr instanceof NameExistingListAttribute) {
    				if(attr.value.name == variable.name) {
    					return true
    				}
    			}
    		}
    	}
    	
    	return false
	}
	
	
	dispatch def checkIfUsed(SubstoryDeclaration variable, TraceryPlusPlusProgram program) {
		// Check for Substory uses in the main story
		val story = program.story.story
		for (element : story) {
	        if (element instanceof SubstoryUse) {
	        	if (element.variable.name == variable.name) {
	        		return true
	        	}
	        }
    	}
    	
    	// Check for Substory uses in each substory
    	val substories = program.statements.filter(SubstoryDeclaration)
    	for (sub : substories) {
    		for(element : sub.story) {
    			if (element instanceof SubstoryUse) {
		        	if (element.variable.name == variable.name) {
		        		return true
		        	}
	        	}
    		}
    	}
    	return false
	}
	
	// Should never be called
	dispatch def checkIfUsed(Variable variable, TraceryPlusPlusProgram program) {
		return true
	}
	
	/*
	 * Check that no two attributes defined for the same object have the same name
	 */
	@Check
	def checkUniqueObjectAttribute(ObjectDeclaration object) {
	   val objectAttributes = object.attributes.attributes
	   for (var i = 0; i < objectAttributes.size; i++) {
	      for (var j = i + 1; j < objectAttributes.size; j++) {
	         if (getAttributeName(objectAttributes.get(i)) == getAttributeName(objectAttributes.get(j))) {
	            error("Attribute '" + getAttributeName(objectAttributes.get(i)) + "' is used more than once when defining the object '" + object.name + "'.", objectAttributes.get(j), TraceryPlusPlusPackage.Literals.ATTRIBUTE__NAME)
	         }
	      }
	   }
	}
	
	
	// Validation rule to check for duplicate modifiers in the modifier list
	@Check
	def checkDuplicateModifiers(ModifierList modifiers) {
		val mods = modifiers.modifiers
	    for (var i = 0; i < mods.size; i++) {
	      for (var j = i + 1; j < mods.size; j++) {
	         if (mods.get(i) == mods.get(j)) {
	            error("Modifier '" + mods.get(i) + "' is used more than once.", null)
	         }
	      }
	   }
	}
	
    /*
	 * Validation rule to check if the story is defined. The Story is left optional with the purpose to provide a better
	 * message to the user
	 */
	@Check(NORMAL)
	def checkIfStoryIsDefined(TraceryPlusPlusProgram program) {
		if(program === null || program.story === null) {
			warning("Define your story. This can be done by writing 'The story'", program.story, TraceryPlusPlusPackage.Literals.TRACERY_PLUS_PLUS_PROGRAM__STORY, NO_STORY)
		}
	}
	
	/*
	 * Was used before because the structure for retrieving the attribute name was different for
	 * different ways of defining the attribute
	 */
	private def getAttributeName(Attribute attribute) {
    	if(attribute instanceof NameExistingListAttribute) {
    		return attribute.name
    	}
    	else if(attribute instanceof NameValueAttribute) {
    		return attribute.name
    	}
//    	else if(attribute instanceof JustNameAttribute) {
//    		return attribute.name.name
//    	}
	}
	
	/*
	 * Used to get the text to be showed to the user when a mistake is detected defining a variable
	 */
	private def getType(Variable obj) {
        switch (obj) {
	        ObjectDeclaration: return "Object"
	        ListDeclaration: return "List"
	        SubstoryDeclaration: return "Substory"
	        default: return "Variable"
    	}
	}
}
