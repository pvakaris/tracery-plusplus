grammar tracerypp.TraceryPlusPlus with org.eclipse.xtext.common.Terminals

generate traceryPlusPlus "http://www.TraceryPlusPlus.tracerypp"

/*
 * Author: Vakaris Paulavicius
 * Version 1.0
 */ 

TraceryPlusPlusProgram:
	// First all the necessary statements are declared and then the story structure is specified
	statements += Statement*
	story = Story
;
	 
Statement:
	Variable
	// For future releases: Rule (for example if else or something similar). 
;

Variable:
	ListDeclaration |
	ObjectDeclaration |
	SubstoryDeclaration
;

/*
	Pointers to variables
 */
VariableUse:
	ListUse |
	ObjectUse |
	SubstoryUse
;
/*
	Used to define what the story should look like.
	There must be only one story in the model for now.
 */
Story:
	{Story} "The" "story" AssignmentOperator?
	story += ( Word | VariableUse )*
;

/*
	Define a variable and give that variable a list of values it can take.
	Examples of use:
		colors can have values: green, blue, orange
		fruit can be: banana or apple or pear
 */
ListDeclaration:
	name = ID  ("can" "have" "values" | "can" "be" | ("has" | "have") "values") AssignmentOperator? list = WordList
;

/*
	Define an object that has attributes. If the attribute value points to a list, the value will be selected randomly from that list.
	Examples of use:
		hero is an object.
		It has attributes: name = "John", occupation = occupation
 */
ObjectDeclaration:
	"There" ("is" | "are") ("a" | "an")? name = ID
	pronouns = Pronouns ("has" | "have") "attributes"? AssignmentOperator? attributes = AttributeList
;

/*
	A substory that can be used in other substories and the story itself.
	Examples of use:
		substory small:
			"I am a small "figure.color" "figure.shape"."
		end-substory
 */
SubstoryDeclaration:
	"define"? "substory" name = ID ":" story += ( Word | VariableUse )* "end-substory"
;

/*
	Basic building blocks
 */

Word:
	value = STRING
;

Attribute:
	NameExistingListAttribute |
	NameValueAttribute
;
/* NOT IN USE CURRENTLY 

JustNameAttribute:
	name = [ListDeclaration] 
;
*/

NameExistingListAttribute:
	name = ID (AssignmentOperator | "from")? value = [ListDeclaration]
;

NameValueAttribute:
	name = ID AssignmentOperator? value = Word
;

ListUse:
	variable = [ListDeclaration]
	modifiers += Modifier*
;

SubstoryUse:
	"use" ("substory" | "sub")? variable = [SubstoryDeclaration]
;

ObjectUse:
	ObjectAttribute |
	ObjectPronoun
;

ObjectAttribute:
	object = [ObjectDeclaration] "." attribute = [Attribute]
	modifiers += Modifier*
;

ObjectPronoun:
	object = [ObjectDeclaration] "." pronoun = PronounIdentifier
;

WordList:
	words += Word (SeparatorOr words += Word)*
;

AttributeList:
	attributes += Attribute ( SeparatorAnd attributes += Attribute)*
;

/*
	Modifiers
 */
 
Pronouns:
	value = "He" | value = "She" | value = "It" | value = "They"
;

PronounIdentifier:
	name = ("they" | "them" | "their" | "theirs")
;

Modifier:
	CapitalizationModifier |
	FullCapitalizationModifier |
	PluralityModifier |
	ArticleModifier |
	PastTenseModifier
;

CapitalizationModifier:
	".capitalize"
;

FullCapitalizationModifier:
	".CAPITALIZE"
;

PluralityModifier:
	".s"
;

ArticleModifier:
	".a"
;

PastTenseModifier:
	".ed"
;

/*
	Helpers
 */
 
AssignmentOperator:
	"=" | ":" | "-" | "-->" | "equal" "to"
;

SeparatorOr:
	"," | "or" | "||"
;

SeparatorAnd:
	',' | "and" | "&&"
;