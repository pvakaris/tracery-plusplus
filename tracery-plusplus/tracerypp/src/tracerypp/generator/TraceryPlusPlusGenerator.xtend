/*
 * generated by Xtext 2.30.0
 */
package tracerypp.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import tracerypp.traceryPlusPlus.TraceryPlusPlusProgram
import tracerypp.traceryPlusPlus.ListDeclaration
import tracerypp.traceryPlusPlus.Declaration
import tracerypp.traceryPlusPlus.Word
import tracerypp.traceryPlusPlus.StoryVariable
import tracerypp.traceryPlusPlus.ObjectAttribute
import tracerypp.traceryPlusPlus.ObjectDeclaration
import java.util.List
import tracerypp.traceryPlusPlus.Statement
import tracerypp.traceryPlusPlus.Attribute
import tracerypp.traceryPlusPlus.Variable
import tracerypp.traceryPlusPlus.ExistingVariable

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TraceryPlusPlusGenerator extends AbstractGenerator {

	// File generation method
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		var model = resource.contents.head as TraceryPlusPlusProgram
		fsa.generateFile(deriveTargetFilenameFor(model, resource), model.generate)
	}
	
	// Specify the generated file name	
	def deriveTargetFilenameFor(TraceryPlusPlusProgram program, Resource resource) {
		// TraceryPlusPlusProgram and Resource are imported for future use
		return 'translated_tracerypp_grammar.json'
	}
	
	
	// Generate the content of the file
	def CharSequence generate(TraceryPlusPlusProgram program) {
		// A JSON object
		return '''
			{
				«program.statements.filter(Declaration).map[generateJsonDeclaration].join('\n')»
				"story": ["«program.story.story.map[generateJsonStoryEntry].join("")»"],
				"origin": ["#«FOR entry : getObjectDeclarationSetters(program.statements) »[#«entry»#]«ENDFOR»story#"]
			}
		'''
	}
	
	// Get setter names for all objects to be used in "origin"
	def getObjectDeclarationSetters(List<Statement> statements) {
		var objectDeclarations = statements.filter(Declaration).filter(ObjectDeclaration)
		val setters = objectDeclarations.map[declaration | 
		    val name = declaration.name.toString
		    "set" + name.substring(0, 1).toUpperCase() + name.substring(1)
		]
		return setters
	}
	
	dispatch def generateJsonStoryEntry(ObjectAttribute objectAttribute) {
		val object = objectAttribute.object.name
		val attribute = objectAttribute.attribute.name
		return '''#«object + attribute.substring(0, 1).toUpperCase() + attribute.substring(1)»« FOR mod : objectAttribute.modifiers »« mod »« ENDFOR »#'''
	}
	
	// Retrieve the plain string value
	dispatch def generateJsonStoryEntry(Word word) {
		return '''«word.value»'''
	}
	
	// Generates reference to an attribute and adds specified modifiers
	dispatch def generateJsonStoryEntry(StoryVariable storyVariable) {
		return '''#«storyVariable.variable.name»« FOR mod : storyVariable.modifiers »« mod »« ENDFOR »#'''
	}
	
	// Get lists with attributes
	dispatch def generateJsonDeclaration(ListDeclaration listDeclaration) {
		return '''"«listDeclaration.name.name»": [« FOR word : listDeclaration.list.words SEPARATOR ', ' »"« word.value »"« ENDFOR »],'''
	}
	
	// Get object specification
	dispatch def generateJsonDeclaration(ObjectDeclaration objectDeclaration) {
		// If the object was called "hero", generate a name "setHero"
		val name = objectDeclaration.name.toString
		val setter = "set" + name.substring(0, 1).toUpperCase() + name.substring(1)
		
		
		return '''"«setter»": ["« FOR attribute : objectDeclaration.attributes.attributes »« getStringForAttribute(attribute, name) »« ENDFOR »"],'''
	}
	
	def getStringForAttribute(Attribute attribute, String objectName) {
		val variable = attribute.name
    	if (variable instanceof Variable) {
    		// Example: hero has attributes - name = "John
    		// This will give ---> [heroName:John]
    		val variableName = variable.name
    		if (attribute.value instanceof String) {
    			
    			return '''[«objectName + variableName.substring(0, 1).toUpperCase() + variableName.substring(1)»:«attribute.value»]'''
    		}
    		else {
    			print("aaa")
    			return '''[«objectName + variableName.substring(0, 1).toUpperCase() + variableName.substring(1)»:#«attribute.value»#]'''
    		}
    		
    	}
    	else if(variable instanceof ExistingVariable) {
    		// Example: hero has attributes - occupation
    		// This will give ---> [heroOccupation:#occupation#]
    		val variableName = variable.pointer.name
    		return '''[«objectName + variableName.substring(0, 1).toUpperCase() + variableName.substring(1)»:#«variableName»#]'''
    	}
    	else {
    		// This place should never be reached
    		return ''''''
    	}
	}
	
	// The default text for Declaration
	dispatch def generateJsonDeclaration(Declaration listDeclaration) ''''''
}
