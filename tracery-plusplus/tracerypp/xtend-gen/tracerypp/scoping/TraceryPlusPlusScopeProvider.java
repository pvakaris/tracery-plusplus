/**
 * generated by Xtext 2.30.0
 */
package tracerypp.scoping;

import com.google.common.collect.Iterators;
import java.util.List;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import tracerypp.traceryPlusPlus.Attribute;
import tracerypp.traceryPlusPlus.ListDeclaration;
import tracerypp.traceryPlusPlus.NameExistingListAttribute;
import tracerypp.traceryPlusPlus.NameValueAttribute;
import tracerypp.traceryPlusPlus.ObjectAttribute;
import tracerypp.traceryPlusPlus.ObjectDeclaration;

/**
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 * Author: Vakaris Paulavicius
 * Version 1.1
 */
@SuppressWarnings("all")
public class TraceryPlusPlusScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_ObjectAttribute_attribute(final ObjectAttribute context, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final ObjectDeclaration objectDeclaration = context.getObject();
      IScope _xifexpression = null;
      if ((objectDeclaration != null)) {
        _xifexpression = Scopes.scopeFor(objectDeclaration.getAttributes().getAttributes());
      } else {
        _xifexpression = IScope.NULLSCOPE;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }

  public IScope scope_ObjectDeclaration_attributes(final ObjectDeclaration context, final EReference ref) {
    IScope _xblockexpression = null;
    {
      final String objectDeclaration = context.getName();
      IScope _xifexpression = null;
      if ((objectDeclaration != null)) {
        IScope _xblockexpression_1 = null;
        {
          final Function1<Attribute, String> _function = (Attribute a) -> {
            String _xifexpression_1 = null;
            if ((a instanceof NameValueAttribute)) {
              _xifexpression_1 = ((NameValueAttribute)a).getName().toString();
            } else {
              String _xifexpression_2 = null;
              if ((a instanceof NameExistingListAttribute)) {
                _xifexpression_2 = ((NameExistingListAttribute)a).getName().toString();
              }
              _xifexpression_1 = _xifexpression_2;
            }
            return _xifexpression_1;
          };
          final List<String> attributeNames = ListExtensions.<Attribute, String>map(context.getAttributes().getAttributes(), _function);
          final Function1<ListDeclaration, Boolean> _function_1 = (ListDeclaration ld) -> {
            boolean _contains = attributeNames.contains(ld.getName().toString());
            return Boolean.valueOf((!_contains));
          };
          final List<ListDeclaration> listDeclarations = IteratorExtensions.<ListDeclaration>toList(IteratorExtensions.<ListDeclaration>filter(Iterators.<ListDeclaration>filter(context.eResource().getAllContents(), ListDeclaration.class), _function_1));
          _xblockexpression_1 = Scopes.scopeFor(listDeclarations);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        _xifexpression = IScope.NULLSCOPE;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
}
