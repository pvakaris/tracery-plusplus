/*
 * generated by Xtext 2.30.0
 */
package tracerypp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraceryPlusPlusGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TraceryPlusPlusProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.TraceryPlusPlusProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Assignment cStoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStoryStoryParserRuleCall_1_0 = (RuleCall)cStoryAssignment_1.eContents().get(0);
		
		//// Version 1.0
		//TraceryPlusPlusProgram:
		//    // First all the necessary statements are declared and then the story structure is specified
		//    statements += Statement*
		//    story = Story
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// First all the necessary statements are declared and then the story structure is specified
		//statements += Statement*
		//story = Story
		public Group getGroup() { return cGroup; }
		
		//// First all the necessary statements are declared and then the story structure is specified
		//statements += Statement*
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }
		
		//story = Story
		public Assignment getStoryAssignment_1() { return cStoryAssignment_1; }
		
		//Story
		public RuleCall getStoryStoryParserRuleCall_1_0() { return cStoryStoryParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Statement");
		private final RuleCall cVariableParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//    Variable
		//    // For future releases: Rule (for example if else or something similar).
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable
		public RuleCall getVariableParserRuleCall() { return cVariableParserRuleCall; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubstoryDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variable:
		//    ListDeclaration |
		//    ObjectDeclaration |
		//    SubstoryDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ListDeclaration |
		//ObjectDeclaration |
		//SubstoryDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ListDeclaration
		public RuleCall getListDeclarationParserRuleCall_0() { return cListDeclarationParserRuleCall_0; }
		
		//ObjectDeclaration
		public RuleCall getObjectDeclarationParserRuleCall_1() { return cObjectDeclarationParserRuleCall_1; }
		
		//SubstoryDeclaration
		public RuleCall getSubstoryDeclarationParserRuleCall_2() { return cSubstoryDeclarationParserRuleCall_2; }
	}
	public class VariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.VariableUse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListUseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectUseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubstoryUseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VariableUse:
		//    ListUse |
		//    ObjectUse |
		//    SubstoryUse
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ListUse |
		//ObjectUse |
		//SubstoryUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ListUse
		public RuleCall getListUseParserRuleCall_0() { return cListUseParserRuleCall_0; }
		
		//ObjectUse
		public RuleCall getObjectUseParserRuleCall_1() { return cObjectUseParserRuleCall_1; }
		
		//SubstoryUse
		public RuleCall getSubstoryUseParserRuleCall_2() { return cSubstoryUseParserRuleCall_2; }
	}
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStoryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAssignmentOperatorParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cStoryAlternatives_4_0 = (Alternatives)cStoryAssignment_4.eContents().get(0);
		private final RuleCall cStoryWordParserRuleCall_4_0_0 = (RuleCall)cStoryAlternatives_4_0.eContents().get(0);
		private final RuleCall cStoryVariableUseParserRuleCall_4_0_1 = (RuleCall)cStoryAlternatives_4_0.eContents().get(1);
		
		///*
		//    Used to define what the story should look like.
		//    There must be only one story in the model for now.
		// */
		//Story:
		//    {Story} "The" "story" AssignmentOperator?
		//    story += ( Word | VariableUse )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Story} "The" "story" AssignmentOperator?
		//story += ( Word | VariableUse )*
		public Group getGroup() { return cGroup; }
		
		//{Story}
		public Action getStoryAction_0() { return cStoryAction_0; }
		
		//"The"
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//"story"
		public Keyword getStoryKeyword_2() { return cStoryKeyword_2; }
		
		//AssignmentOperator?
		public RuleCall getAssignmentOperatorParserRuleCall_3() { return cAssignmentOperatorParserRuleCall_3; }
		
		//story += ( Word | VariableUse )*
		public Assignment getStoryAssignment_4() { return cStoryAssignment_4; }
		
		//( Word | VariableUse )
		public Alternatives getStoryAlternatives_4_0() { return cStoryAlternatives_4_0; }
		
		//Word
		public RuleCall getStoryWordParserRuleCall_4_0_0() { return cStoryWordParserRuleCall_4_0_0; }
		
		//VariableUse
		public RuleCall getStoryVariableUseParserRuleCall_4_0_1() { return cStoryVariableUseParserRuleCall_4_0_1; }
	}
	public class ListDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ListDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCanKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cHaveKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cValuesKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCanKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cBeKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cHasKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cHaveKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Keyword cValuesKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cAssignmentOperatorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListWordListParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		
		///*
		//    Define a variable and give that variable a list of values it can take.
		//    Examples of use:
		//        colors can have values: green, blue, orange
		//        fruit can be: banana or apple or pear
		// */
		//ListDeclaration:
		//    name = ID  ("can" "have" "values" | "can" "be" | ("has" | "have") "values") AssignmentOperator? list = WordList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID  ("can" "have" "values" | "can" "be" | ("has" | "have") "values") AssignmentOperator? list = WordList
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("can" "have" "values" | "can" "be" | ("has" | "have") "values")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"can" "have" "values"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"can"
		public Keyword getCanKeyword_1_0_0() { return cCanKeyword_1_0_0; }
		
		//"have"
		public Keyword getHaveKeyword_1_0_1() { return cHaveKeyword_1_0_1; }
		
		//"values"
		public Keyword getValuesKeyword_1_0_2() { return cValuesKeyword_1_0_2; }
		
		//"can" "be"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"can"
		public Keyword getCanKeyword_1_1_0() { return cCanKeyword_1_1_0; }
		
		//"be"
		public Keyword getBeKeyword_1_1_1() { return cBeKeyword_1_1_1; }
		
		//("has" | "have") "values"
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//("has" | "have")
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }
		
		//"has"
		public Keyword getHasKeyword_1_2_0_0() { return cHasKeyword_1_2_0_0; }
		
		//"have"
		public Keyword getHaveKeyword_1_2_0_1() { return cHaveKeyword_1_2_0_1; }
		
		//"values"
		public Keyword getValuesKeyword_1_2_1() { return cValuesKeyword_1_2_1; }
		
		//AssignmentOperator?
		public RuleCall getAssignmentOperatorParserRuleCall_2() { return cAssignmentOperatorParserRuleCall_2; }
		
		//list = WordList
		public Assignment getListAssignment_3() { return cListAssignment_3; }
		
		//WordList
		public RuleCall getListWordListParserRuleCall_3_0() { return cListWordListParserRuleCall_3_0; }
	}
	public class ObjectDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ObjectDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAreKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cAnKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cPronounsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPronounsPronounsParserRuleCall_4_0 = (RuleCall)cPronounsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cHasKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cHaveKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Keyword cAttributesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cAssignmentOperatorParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cAttributesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAttributesAttributeListParserRuleCall_8_0 = (RuleCall)cAttributesAssignment_8.eContents().get(0);
		
		///*
		//    Define an object that has attributes. If the attribute value is not specified, the attribute name
		//    must be the same as one of the lists. The value will be selected randomly.
		//    Examples of use:
		//        hero is an object.
		//        It has attributes: name = "John", occupation
		// */
		//ObjectDeclaration:
		//    "There" ("is" | "are") ("a" | "an")? name = ID
		//    pronouns = Pronouns ("has" | "have") "attributes"? AssignmentOperator? attributes = AttributeList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"There" ("is" | "are") ("a" | "an")? name = ID
		//pronouns = Pronouns ("has" | "have") "attributes"? AssignmentOperator? attributes = AttributeList
		public Group getGroup() { return cGroup; }
		
		//"There"
		public Keyword getThereKeyword_0() { return cThereKeyword_0; }
		
		//("is" | "are")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"is"
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//"are"
		public Keyword getAreKeyword_1_1() { return cAreKeyword_1_1; }
		
		//("a" | "an")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"a"
		public Keyword getAKeyword_2_0() { return cAKeyword_2_0; }
		
		//"an"
		public Keyword getAnKeyword_2_1() { return cAnKeyword_2_1; }
		
		//name = ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//pronouns = Pronouns
		public Assignment getPronounsAssignment_4() { return cPronounsAssignment_4; }
		
		//Pronouns
		public RuleCall getPronounsPronounsParserRuleCall_4_0() { return cPronounsPronounsParserRuleCall_4_0; }
		
		//("has" | "have")
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//"has"
		public Keyword getHasKeyword_5_0() { return cHasKeyword_5_0; }
		
		//"have"
		public Keyword getHaveKeyword_5_1() { return cHaveKeyword_5_1; }
		
		//"attributes"?
		public Keyword getAttributesKeyword_6() { return cAttributesKeyword_6; }
		
		//AssignmentOperator?
		public RuleCall getAssignmentOperatorParserRuleCall_7() { return cAssignmentOperatorParserRuleCall_7; }
		
		//attributes = AttributeList
		public Assignment getAttributesAssignment_8() { return cAttributesAssignment_8; }
		
		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_8_0() { return cAttributesAttributeListParserRuleCall_8_0; }
	}
	public class SubstoryDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.SubstoryDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubstoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cStoryAlternatives_3_0 = (Alternatives)cStoryAssignment_3.eContents().get(0);
		private final RuleCall cStoryWordParserRuleCall_3_0_0 = (RuleCall)cStoryAlternatives_3_0.eContents().get(0);
		private final RuleCall cStoryVariableUseParserRuleCall_3_0_1 = (RuleCall)cStoryAlternatives_3_0.eContents().get(1);
		private final Keyword cEndSubstoryKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SubstoryDeclaration:
		//    "substory" name = ID ":" story += ( Word | VariableUse )* "end-substory"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"substory" name = ID ":" story += ( Word | VariableUse )* "end-substory"
		public Group getGroup() { return cGroup; }
		
		//"substory"
		public Keyword getSubstoryKeyword_0() { return cSubstoryKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//story += ( Word | VariableUse )*
		public Assignment getStoryAssignment_3() { return cStoryAssignment_3; }
		
		//( Word | VariableUse )
		public Alternatives getStoryAlternatives_3_0() { return cStoryAlternatives_3_0; }
		
		//Word
		public RuleCall getStoryWordParserRuleCall_3_0_0() { return cStoryWordParserRuleCall_3_0_0; }
		
		//VariableUse
		public RuleCall getStoryVariableUseParserRuleCall_3_0_1() { return cStoryVariableUseParserRuleCall_3_0_1; }
		
		//"end-substory"
		public Keyword getEndSubstoryKeyword_4() { return cEndSubstoryKeyword_4; }
	}
	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Word");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		///*
		//    Basic building blocks
		// */
		//Word:
		//    value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameExistingListAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameValueAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Attribute:
		//    NameExistingListAttribute |
		//    NameValueAttribute
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NameExistingListAttribute |
		//NameValueAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NameExistingListAttribute
		public RuleCall getNameExistingListAttributeParserRuleCall_0() { return cNameExistingListAttributeParserRuleCall_0; }
		
		//NameValueAttribute
		public RuleCall getNameValueAttributeParserRuleCall_1() { return cNameValueAttributeParserRuleCall_1; }
	}
	public class NameExistingListAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.NameExistingListAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cAssignmentOperatorParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cFromKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueListDeclarationCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueListDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cValueListDeclarationCrossReference_2_0.eContents().get(1);
		
		///* NOT IN USE CURRENTLY
		//JustNameAttribute:
		//    name = [ListDeclaration]
		//;
		//*/
		//NameExistingListAttribute:
		//    name = ID (AssignmentOperator | "from")? value = [ListDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID (AssignmentOperator | "from")? value = [ListDeclaration]
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(AssignmentOperator | "from")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//AssignmentOperator
		public RuleCall getAssignmentOperatorParserRuleCall_1_0() { return cAssignmentOperatorParserRuleCall_1_0; }
		
		//"from"
		public Keyword getFromKeyword_1_1() { return cFromKeyword_1_1; }
		
		//value = [ListDeclaration]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//[ListDeclaration]
		public CrossReference getValueListDeclarationCrossReference_2_0() { return cValueListDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getValueListDeclarationIDTerminalRuleCall_2_0_1() { return cValueListDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class NameValueAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.NameValueAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cAssignmentOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueWordParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//NameValueAttribute:
		//    name = ID AssignmentOperator? value = Word
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID AssignmentOperator? value = Word
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//AssignmentOperator?
		public RuleCall getAssignmentOperatorParserRuleCall_1() { return cAssignmentOperatorParserRuleCall_1; }
		
		//value = Word
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Word
		public RuleCall getValueWordParserRuleCall_2_0() { return cValueWordParserRuleCall_2_0; }
	}
	public class ListUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ListUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableListDeclarationCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableListDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableListDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersModifierParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		
		//ListUse:
		//    variable = [ListDeclaration]
		//    modifiers += Modifier*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variable = [ListDeclaration]
		//modifiers += Modifier*
		public Group getGroup() { return cGroup; }
		
		//variable = [ListDeclaration]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[ListDeclaration]
		public CrossReference getVariableListDeclarationCrossReference_0_0() { return cVariableListDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableListDeclarationIDTerminalRuleCall_0_0_1() { return cVariableListDeclarationIDTerminalRuleCall_0_0_1; }
		
		//modifiers += Modifier*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }
		
		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_1_0() { return cModifiersModifierParserRuleCall_1_0; }
	}
	public class SubstoryUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.SubstoryUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubstoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariableSubstoryDeclarationCrossReference_1_0 = (CrossReference)cVariableAssignment_1.eContents().get(0);
		private final RuleCall cVariableSubstoryDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cVariableSubstoryDeclarationCrossReference_1_0.eContents().get(1);
		
		//SubstoryUse:
		//    "substory" variable = [SubstoryDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"substory" variable = [SubstoryDeclaration]
		public Group getGroup() { return cGroup; }
		
		//"substory"
		public Keyword getSubstoryKeyword_0() { return cSubstoryKeyword_0; }
		
		//variable = [SubstoryDeclaration]
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//[SubstoryDeclaration]
		public CrossReference getVariableSubstoryDeclarationCrossReference_1_0() { return cVariableSubstoryDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getVariableSubstoryDeclarationIDTerminalRuleCall_1_0_1() { return cVariableSubstoryDeclarationIDTerminalRuleCall_1_0_1; }
	}
	public class ObjectUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ObjectUse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectPronounParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ObjectUse:
		//    ObjectAttribute |
		//    ObjectPronoun
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectAttribute |
		//ObjectPronoun
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectAttribute
		public RuleCall getObjectAttributeParserRuleCall_0() { return cObjectAttributeParserRuleCall_0; }
		
		//ObjectPronoun
		public RuleCall getObjectPronounParserRuleCall_1() { return cObjectPronounParserRuleCall_1; }
	}
	public class ObjectAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ObjectAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cObjectObjectDeclarationCrossReference_0_0 = (CrossReference)cObjectAssignment_0.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_0.eContents().get(1);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersModifierParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		
		//ObjectAttribute:
		//    object = [ObjectDeclaration] "." attribute = [Attribute]
		//    modifiers += Modifier*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//object = [ObjectDeclaration] "." attribute = [Attribute]
		//modifiers += Modifier*
		public Group getGroup() { return cGroup; }
		
		//object = [ObjectDeclaration]
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectObjectDeclarationCrossReference_0_0() { return cObjectObjectDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getObjectObjectDeclarationIDTerminalRuleCall_0_0_1() { return cObjectObjectDeclarationIDTerminalRuleCall_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute = [Attribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_2_0() { return cAttributeAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_2_0_1() { return cAttributeAttributeIDTerminalRuleCall_2_0_1; }
		
		//modifiers += Modifier*
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }
		
		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_3_0() { return cModifiersModifierParserRuleCall_3_0; }
	}
	public class ObjectPronounElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ObjectPronoun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cObjectObjectDeclarationCrossReference_0_0 = (CrossReference)cObjectAssignment_0.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPronounAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPronounPronounIdentifierParserRuleCall_2_0 = (RuleCall)cPronounAssignment_2.eContents().get(0);
		
		//ObjectPronoun:
		//    object = [ObjectDeclaration] "." pronoun = PronounIdentifier
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//object = [ObjectDeclaration] "." pronoun = PronounIdentifier
		public Group getGroup() { return cGroup; }
		
		//object = [ObjectDeclaration]
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectObjectDeclarationCrossReference_0_0() { return cObjectObjectDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getObjectObjectDeclarationIDTerminalRuleCall_0_0_1() { return cObjectObjectDeclarationIDTerminalRuleCall_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//pronoun = PronounIdentifier
		public Assignment getPronounAssignment_2() { return cPronounAssignment_2; }
		
		//PronounIdentifier
		public RuleCall getPronounPronounIdentifierParserRuleCall_2_0() { return cPronounPronounIdentifierParserRuleCall_2_0; }
	}
	public class WordListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.WordList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWordsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWordsWordParserRuleCall_0_0 = (RuleCall)cWordsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSeparatorOrParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cWordsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWordsWordParserRuleCall_1_1_0 = (RuleCall)cWordsAssignment_1_1.eContents().get(0);
		
		//WordList:
		//    words += Word (SeparatorOr words += Word)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//words += Word (SeparatorOr words += Word)*
		public Group getGroup() { return cGroup; }
		
		//words += Word
		public Assignment getWordsAssignment_0() { return cWordsAssignment_0; }
		
		//Word
		public RuleCall getWordsWordParserRuleCall_0_0() { return cWordsWordParserRuleCall_0_0; }
		
		//(SeparatorOr words += Word)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SeparatorOr
		public RuleCall getSeparatorOrParserRuleCall_1_0() { return cSeparatorOrParserRuleCall_1_0; }
		
		//words += Word
		public Assignment getWordsAssignment_1_1() { return cWordsAssignment_1_1; }
		
		//Word
		public RuleCall getWordsWordParserRuleCall_1_1_0() { return cWordsWordParserRuleCall_1_1_0; }
	}
	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.AttributeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_0_0 = (RuleCall)cAttributesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSeparatorAndParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		
		//AttributeList:
		//    attributes += Attribute ( SeparatorAnd attributes += Attribute)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes += Attribute ( SeparatorAnd attributes += Attribute)*
		public Group getGroup() { return cGroup; }
		
		//attributes += Attribute
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0_0() { return cAttributesAttributeParserRuleCall_0_0; }
		
		//( SeparatorAnd attributes += Attribute)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SeparatorAnd
		public RuleCall getSeparatorAndParserRuleCall_1_0() { return cSeparatorAndParserRuleCall_1_0; }
		
		//attributes += Attribute
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_1_0() { return cAttributesAttributeParserRuleCall_1_1_0; }
	}
	public class PronounsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Pronouns");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueHeKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueSheKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cValueItKeyword_2_0 = (Keyword)cValueAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cValueTheyKeyword_3_0 = (Keyword)cValueAssignment_3.eContents().get(0);
		
		///*
		//    Modifiers
		// */
		//Pronouns:
		//    value = "He" | value = "She" | value = "It" | value = "They"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = "He" | value = "She" | value = "It" | value = "They"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value = "He"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"He"
		public Keyword getValueHeKeyword_0_0() { return cValueHeKeyword_0_0; }
		
		//value = "She"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//"She"
		public Keyword getValueSheKeyword_1_0() { return cValueSheKeyword_1_0; }
		
		//value = "It"
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//"It"
		public Keyword getValueItKeyword_2_0() { return cValueItKeyword_2_0; }
		
		//value = "They"
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//"They"
		public Keyword getValueTheyKeyword_3_0() { return cValueTheyKeyword_3_0; }
	}
	public class PronounIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.PronounIdentifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameTheyKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameThemKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameTheirKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameTheirsKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		
		//PronounIdentifier:
		//    name = ("they" | "them" | "their" | "theirs")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ("they" | "them" | "their" | "theirs")
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//("they" | "them" | "their" | "theirs")
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//"they"
		public Keyword getNameTheyKeyword_0_0() { return cNameTheyKeyword_0_0; }
		
		//"them"
		public Keyword getNameThemKeyword_0_1() { return cNameThemKeyword_0_1; }
		
		//"their"
		public Keyword getNameTheirKeyword_0_2() { return cNameTheirKeyword_0_2; }
		
		//"theirs"
		public Keyword getNameTheirsKeyword_0_3() { return cNameTheirsKeyword_0_3; }
	}
	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCapitalizationModifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFullCapitalizationModifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPluralityModifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArticleModifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPastTenseModifierParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Modifier:
		//    CapitalizationModifier |
		//    FullCapitalizationModifier |
		//    PluralityModifier |
		//    ArticleModifier |
		//    PastTenseModifier
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//CapitalizationModifier |
		//FullCapitalizationModifier |
		//PluralityModifier |
		//ArticleModifier |
		//PastTenseModifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CapitalizationModifier
		public RuleCall getCapitalizationModifierParserRuleCall_0() { return cCapitalizationModifierParserRuleCall_0; }
		
		//FullCapitalizationModifier
		public RuleCall getFullCapitalizationModifierParserRuleCall_1() { return cFullCapitalizationModifierParserRuleCall_1; }
		
		//PluralityModifier
		public RuleCall getPluralityModifierParserRuleCall_2() { return cPluralityModifierParserRuleCall_2; }
		
		//ArticleModifier
		public RuleCall getArticleModifierParserRuleCall_3() { return cArticleModifierParserRuleCall_3; }
		
		//PastTenseModifier
		public RuleCall getPastTenseModifierParserRuleCall_4() { return cPastTenseModifierParserRuleCall_4; }
	}
	public class CapitalizationModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.CapitalizationModifier");
		private final Keyword cCapitalizeKeyword = (Keyword)rule.eContents().get(1);
		
		//CapitalizationModifier:
		//    ".capitalize"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".capitalize"
		public Keyword getCapitalizeKeyword() { return cCapitalizeKeyword; }
	}
	public class FullCapitalizationModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.FullCapitalizationModifier");
		private final Keyword cCAPITALIZEKeyword = (Keyword)rule.eContents().get(1);
		
		//FullCapitalizationModifier:
		//    ".CAPITALIZE"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".CAPITALIZE"
		public Keyword getCAPITALIZEKeyword() { return cCAPITALIZEKeyword; }
	}
	public class PluralityModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.PluralityModifier");
		private final Keyword cSKeyword = (Keyword)rule.eContents().get(1);
		
		//PluralityModifier:
		//    ".s"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".s"
		public Keyword getSKeyword() { return cSKeyword; }
	}
	public class ArticleModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ArticleModifier");
		private final Keyword cAKeyword = (Keyword)rule.eContents().get(1);
		
		//ArticleModifier:
		//    ".a"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".a"
		public Keyword getAKeyword() { return cAKeyword; }
	}
	public class PastTenseModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.PastTenseModifier");
		private final Keyword cEdKeyword = (Keyword)rule.eContents().get(1);
		
		//PastTenseModifier:
		//    ".ed"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//".ed"
		public Keyword getEdKeyword() { return cEdKeyword; }
	}
	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cEqualKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cToKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		///*
		//    Helpers
		// */
		//AssignmentOperator:
		//    "=" | ":" | "-" | "-->" | "equal" "to"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"=" | ":" | "-" | "-->" | "equal" "to"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_3; }
		
		//"equal" "to"
		public Group getGroup_4() { return cGroup_4; }
		
		//"equal"
		public Keyword getEqualKeyword_4_0() { return cEqualKeyword_4_0; }
		
		//"to"
		public Keyword getToKeyword_4_1() { return cToKeyword_4_1; }
	}
	public class SeparatorOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.SeparatorOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//SeparatorOr:
		//    "," | "or" | "||"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"," | "or" | "||"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_2() { return cVerticalLineVerticalLineKeyword_2; }
	}
	public class SeparatorAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.SeparatorAnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//SeparatorAnd:
		//    ',' | "and" | "&&"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//',' | "and" | "&&"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//"and"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_2() { return cAmpersandAmpersandKeyword_2; }
	}
	
	
	private final TraceryPlusPlusProgramElements pTraceryPlusPlusProgram;
	private final StatementElements pStatement;
	private final VariableElements pVariable;
	private final VariableUseElements pVariableUse;
	private final StoryElements pStory;
	private final ListDeclarationElements pListDeclaration;
	private final ObjectDeclarationElements pObjectDeclaration;
	private final SubstoryDeclarationElements pSubstoryDeclaration;
	private final WordElements pWord;
	private final AttributeElements pAttribute;
	private final NameExistingListAttributeElements pNameExistingListAttribute;
	private final NameValueAttributeElements pNameValueAttribute;
	private final ListUseElements pListUse;
	private final SubstoryUseElements pSubstoryUse;
	private final ObjectUseElements pObjectUse;
	private final ObjectAttributeElements pObjectAttribute;
	private final ObjectPronounElements pObjectPronoun;
	private final WordListElements pWordList;
	private final AttributeListElements pAttributeList;
	private final PronounsElements pPronouns;
	private final PronounIdentifierElements pPronounIdentifier;
	private final ModifierElements pModifier;
	private final CapitalizationModifierElements pCapitalizationModifier;
	private final FullCapitalizationModifierElements pFullCapitalizationModifier;
	private final PluralityModifierElements pPluralityModifier;
	private final ArticleModifierElements pArticleModifier;
	private final PastTenseModifierElements pPastTenseModifier;
	private final AssignmentOperatorElements pAssignmentOperator;
	private final SeparatorOrElements pSeparatorOr;
	private final SeparatorAndElements pSeparatorAnd;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraceryPlusPlusGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTraceryPlusPlusProgram = new TraceryPlusPlusProgramElements();
		this.pStatement = new StatementElements();
		this.pVariable = new VariableElements();
		this.pVariableUse = new VariableUseElements();
		this.pStory = new StoryElements();
		this.pListDeclaration = new ListDeclarationElements();
		this.pObjectDeclaration = new ObjectDeclarationElements();
		this.pSubstoryDeclaration = new SubstoryDeclarationElements();
		this.pWord = new WordElements();
		this.pAttribute = new AttributeElements();
		this.pNameExistingListAttribute = new NameExistingListAttributeElements();
		this.pNameValueAttribute = new NameValueAttributeElements();
		this.pListUse = new ListUseElements();
		this.pSubstoryUse = new SubstoryUseElements();
		this.pObjectUse = new ObjectUseElements();
		this.pObjectAttribute = new ObjectAttributeElements();
		this.pObjectPronoun = new ObjectPronounElements();
		this.pWordList = new WordListElements();
		this.pAttributeList = new AttributeListElements();
		this.pPronouns = new PronounsElements();
		this.pPronounIdentifier = new PronounIdentifierElements();
		this.pModifier = new ModifierElements();
		this.pCapitalizationModifier = new CapitalizationModifierElements();
		this.pFullCapitalizationModifier = new FullCapitalizationModifierElements();
		this.pPluralityModifier = new PluralityModifierElements();
		this.pArticleModifier = new ArticleModifierElements();
		this.pPastTenseModifier = new PastTenseModifierElements();
		this.pAssignmentOperator = new AssignmentOperatorElements();
		this.pSeparatorOr = new SeparatorOrElements();
		this.pSeparatorAnd = new SeparatorAndElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tracerypp.TraceryPlusPlus".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Version 1.0
	//TraceryPlusPlusProgram:
	//    // First all the necessary statements are declared and then the story structure is specified
	//    statements += Statement*
	//    story = Story
	//;
	public TraceryPlusPlusProgramElements getTraceryPlusPlusProgramAccess() {
		return pTraceryPlusPlusProgram;
	}
	
	public ParserRule getTraceryPlusPlusProgramRule() {
		return getTraceryPlusPlusProgramAccess().getRule();
	}
	
	//Statement:
	//    Variable
	//    // For future releases: Rule (for example if else or something similar).
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Variable:
	//    ListDeclaration |
	//    ObjectDeclaration |
	//    SubstoryDeclaration
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//VariableUse:
	//    ListUse |
	//    ObjectUse |
	//    SubstoryUse
	//;
	public VariableUseElements getVariableUseAccess() {
		return pVariableUse;
	}
	
	public ParserRule getVariableUseRule() {
		return getVariableUseAccess().getRule();
	}
	
	///*
	//    Used to define what the story should look like.
	//    There must be only one story in the model for now.
	// */
	//Story:
	//    {Story} "The" "story" AssignmentOperator?
	//    story += ( Word | VariableUse )*
	//;
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	///*
	//    Define a variable and give that variable a list of values it can take.
	//    Examples of use:
	//        colors can have values: green, blue, orange
	//        fruit can be: banana or apple or pear
	// */
	//ListDeclaration:
	//    name = ID  ("can" "have" "values" | "can" "be" | ("has" | "have") "values") AssignmentOperator? list = WordList
	//;
	public ListDeclarationElements getListDeclarationAccess() {
		return pListDeclaration;
	}
	
	public ParserRule getListDeclarationRule() {
		return getListDeclarationAccess().getRule();
	}
	
	///*
	//    Define an object that has attributes. If the attribute value is not specified, the attribute name
	//    must be the same as one of the lists. The value will be selected randomly.
	//    Examples of use:
	//        hero is an object.
	//        It has attributes: name = "John", occupation
	// */
	//ObjectDeclaration:
	//    "There" ("is" | "are") ("a" | "an")? name = ID
	//    pronouns = Pronouns ("has" | "have") "attributes"? AssignmentOperator? attributes = AttributeList
	//;
	public ObjectDeclarationElements getObjectDeclarationAccess() {
		return pObjectDeclaration;
	}
	
	public ParserRule getObjectDeclarationRule() {
		return getObjectDeclarationAccess().getRule();
	}
	
	//SubstoryDeclaration:
	//    "substory" name = ID ":" story += ( Word | VariableUse )* "end-substory"
	//;
	public SubstoryDeclarationElements getSubstoryDeclarationAccess() {
		return pSubstoryDeclaration;
	}
	
	public ParserRule getSubstoryDeclarationRule() {
		return getSubstoryDeclarationAccess().getRule();
	}
	
	///*
	//    Basic building blocks
	// */
	//Word:
	//    value = STRING
	//;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}
	
	//Attribute:
	//    NameExistingListAttribute |
	//    NameValueAttribute
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	///* NOT IN USE CURRENTLY
	//JustNameAttribute:
	//    name = [ListDeclaration]
	//;
	//*/
	//NameExistingListAttribute:
	//    name = ID (AssignmentOperator | "from")? value = [ListDeclaration]
	//;
	public NameExistingListAttributeElements getNameExistingListAttributeAccess() {
		return pNameExistingListAttribute;
	}
	
	public ParserRule getNameExistingListAttributeRule() {
		return getNameExistingListAttributeAccess().getRule();
	}
	
	//NameValueAttribute:
	//    name = ID AssignmentOperator? value = Word
	//;
	public NameValueAttributeElements getNameValueAttributeAccess() {
		return pNameValueAttribute;
	}
	
	public ParserRule getNameValueAttributeRule() {
		return getNameValueAttributeAccess().getRule();
	}
	
	//ListUse:
	//    variable = [ListDeclaration]
	//    modifiers += Modifier*
	//;
	public ListUseElements getListUseAccess() {
		return pListUse;
	}
	
	public ParserRule getListUseRule() {
		return getListUseAccess().getRule();
	}
	
	//SubstoryUse:
	//    "substory" variable = [SubstoryDeclaration]
	//;
	public SubstoryUseElements getSubstoryUseAccess() {
		return pSubstoryUse;
	}
	
	public ParserRule getSubstoryUseRule() {
		return getSubstoryUseAccess().getRule();
	}
	
	//ObjectUse:
	//    ObjectAttribute |
	//    ObjectPronoun
	//;
	public ObjectUseElements getObjectUseAccess() {
		return pObjectUse;
	}
	
	public ParserRule getObjectUseRule() {
		return getObjectUseAccess().getRule();
	}
	
	//ObjectAttribute:
	//    object = [ObjectDeclaration] "." attribute = [Attribute]
	//    modifiers += Modifier*
	//;
	public ObjectAttributeElements getObjectAttributeAccess() {
		return pObjectAttribute;
	}
	
	public ParserRule getObjectAttributeRule() {
		return getObjectAttributeAccess().getRule();
	}
	
	//ObjectPronoun:
	//    object = [ObjectDeclaration] "." pronoun = PronounIdentifier
	//;
	public ObjectPronounElements getObjectPronounAccess() {
		return pObjectPronoun;
	}
	
	public ParserRule getObjectPronounRule() {
		return getObjectPronounAccess().getRule();
	}
	
	//WordList:
	//    words += Word (SeparatorOr words += Word)*
	//;
	public WordListElements getWordListAccess() {
		return pWordList;
	}
	
	public ParserRule getWordListRule() {
		return getWordListAccess().getRule();
	}
	
	//AttributeList:
	//    attributes += Attribute ( SeparatorAnd attributes += Attribute)*
	//;
	public AttributeListElements getAttributeListAccess() {
		return pAttributeList;
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}
	
	///*
	//    Modifiers
	// */
	//Pronouns:
	//    value = "He" | value = "She" | value = "It" | value = "They"
	//;
	public PronounsElements getPronounsAccess() {
		return pPronouns;
	}
	
	public ParserRule getPronounsRule() {
		return getPronounsAccess().getRule();
	}
	
	//PronounIdentifier:
	//    name = ("they" | "them" | "their" | "theirs")
	//;
	public PronounIdentifierElements getPronounIdentifierAccess() {
		return pPronounIdentifier;
	}
	
	public ParserRule getPronounIdentifierRule() {
		return getPronounIdentifierAccess().getRule();
	}
	
	//Modifier:
	//    CapitalizationModifier |
	//    FullCapitalizationModifier |
	//    PluralityModifier |
	//    ArticleModifier |
	//    PastTenseModifier
	//;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//CapitalizationModifier:
	//    ".capitalize"
	//;
	public CapitalizationModifierElements getCapitalizationModifierAccess() {
		return pCapitalizationModifier;
	}
	
	public ParserRule getCapitalizationModifierRule() {
		return getCapitalizationModifierAccess().getRule();
	}
	
	//FullCapitalizationModifier:
	//    ".CAPITALIZE"
	//;
	public FullCapitalizationModifierElements getFullCapitalizationModifierAccess() {
		return pFullCapitalizationModifier;
	}
	
	public ParserRule getFullCapitalizationModifierRule() {
		return getFullCapitalizationModifierAccess().getRule();
	}
	
	//PluralityModifier:
	//    ".s"
	//;
	public PluralityModifierElements getPluralityModifierAccess() {
		return pPluralityModifier;
	}
	
	public ParserRule getPluralityModifierRule() {
		return getPluralityModifierAccess().getRule();
	}
	
	//ArticleModifier:
	//    ".a"
	//;
	public ArticleModifierElements getArticleModifierAccess() {
		return pArticleModifier;
	}
	
	public ParserRule getArticleModifierRule() {
		return getArticleModifierAccess().getRule();
	}
	
	//PastTenseModifier:
	//    ".ed"
	//;
	public PastTenseModifierElements getPastTenseModifierAccess() {
		return pPastTenseModifier;
	}
	
	public ParserRule getPastTenseModifierRule() {
		return getPastTenseModifierAccess().getRule();
	}
	
	///*
	//    Helpers
	// */
	//AssignmentOperator:
	//    "=" | ":" | "-" | "-->" | "equal" "to"
	//;
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return pAssignmentOperator;
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//SeparatorOr:
	//    "," | "or" | "||"
	//;
	public SeparatorOrElements getSeparatorOrAccess() {
		return pSeparatorOr;
	}
	
	public ParserRule getSeparatorOrRule() {
		return getSeparatorOrAccess().getRule();
	}
	
	//SeparatorAnd:
	//    ',' | "and" | "&&"
	//;
	public SeparatorAndElements getSeparatorAndAccess() {
		return pSeparatorAnd;
	}
	
	public ParserRule getSeparatorAndRule() {
		return getSeparatorAndAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
