/*
 * generated by Xtext 2.30.0
 */
package tracerypp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TraceryPlusPlusGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TraceryPlusPlusProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.TraceryPlusPlusProgram");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatementsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_0_0 = (RuleCall)cStatementsAssignment_0.eContents().get(0);
		private final Assignment cStoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStoryStoryParserRuleCall_1_0 = (RuleCall)cStoryAssignment_1.eContents().get(0);
		
		///*
		// * Author: Vakaris Paulavicius
		// * Version 1.0
		// */
		//TraceryPlusPlusProgram:
		//    // First all the necessary statements are declared and then the story structure is specified
		//    statements += Statement*
		//    story = Story
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// First all the necessary statements are declared and then the story structure is specified
		//statements += Statement*
		//story = Story
		public Group getGroup() { return cGroup; }
		
		//// First all the necessary statements are declared and then the story structure is specified
		//statements += Statement*
		public Assignment getStatementsAssignment_0() { return cStatementsAssignment_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_0() { return cStatementsStatementParserRuleCall_0_0; }
		
		//story = Story
		public Assignment getStoryAssignment_1() { return cStoryAssignment_1; }
		
		//Story
		public RuleCall getStoryStoryParserRuleCall_1_0() { return cStoryStoryParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Statement");
		private final RuleCall cVariableParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//    Variable
		//    // For future releases: Rule (for example if else or something similar).
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Variable
		public RuleCall getVariableParserRuleCall() { return cVariableParserRuleCall; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubstoryDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variable:
		//    ListDeclaration |
		//    ObjectDeclaration |
		//    SubstoryDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ListDeclaration |
		//ObjectDeclaration |
		//SubstoryDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ListDeclaration
		public RuleCall getListDeclarationParserRuleCall_0() { return cListDeclarationParserRuleCall_0; }
		
		//ObjectDeclaration
		public RuleCall getObjectDeclarationParserRuleCall_1() { return cObjectDeclarationParserRuleCall_1; }
		
		//SubstoryDeclaration
		public RuleCall getSubstoryDeclarationParserRuleCall_2() { return cSubstoryDeclarationParserRuleCall_2; }
	}
	public class VariableUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.VariableUse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListUseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectUseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSubstoryUseParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		//    Pointers to variables
		// */
		//VariableUse:
		//    ListUse |
		//    ObjectUse |
		//    SubstoryUse
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ListUse |
		//ObjectUse |
		//SubstoryUse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ListUse
		public RuleCall getListUseParserRuleCall_0() { return cListUseParserRuleCall_0; }
		
		//ObjectUse
		public RuleCall getObjectUseParserRuleCall_1() { return cObjectUseParserRuleCall_1; }
		
		//SubstoryUse
		public RuleCall getSubstoryUseParserRuleCall_2() { return cSubstoryUseParserRuleCall_2; }
	}
	public class StoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Story");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cStoryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cAssignmentOperatorParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cStoryAlternatives_4_0 = (Alternatives)cStoryAssignment_4.eContents().get(0);
		private final RuleCall cStoryWordParserRuleCall_4_0_0 = (RuleCall)cStoryAlternatives_4_0.eContents().get(0);
		private final RuleCall cStoryVariableUseParserRuleCall_4_0_1 = (RuleCall)cStoryAlternatives_4_0.eContents().get(1);
		
		///*
		//    Used to define what the story should look like.
		//    There must be only one story in the model for now.
		// */
		//Story:
		//    {Story} "The" "story" AssignmentOperator?
		//    story += ( Word | VariableUse )*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Story} "The" "story" AssignmentOperator?
		//story += ( Word | VariableUse )*
		public Group getGroup() { return cGroup; }
		
		//{Story}
		public Action getStoryAction_0() { return cStoryAction_0; }
		
		//"The"
		public Keyword getTheKeyword_1() { return cTheKeyword_1; }
		
		//"story"
		public Keyword getStoryKeyword_2() { return cStoryKeyword_2; }
		
		//AssignmentOperator?
		public RuleCall getAssignmentOperatorParserRuleCall_3() { return cAssignmentOperatorParserRuleCall_3; }
		
		//story += ( Word | VariableUse )*
		public Assignment getStoryAssignment_4() { return cStoryAssignment_4; }
		
		//( Word | VariableUse )
		public Alternatives getStoryAlternatives_4_0() { return cStoryAlternatives_4_0; }
		
		//Word
		public RuleCall getStoryWordParserRuleCall_4_0_0() { return cStoryWordParserRuleCall_4_0_0; }
		
		//VariableUse
		public RuleCall getStoryVariableUseParserRuleCall_4_0_1() { return cStoryVariableUseParserRuleCall_4_0_1; }
	}
	public class ListDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ListDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cCanKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cHaveKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cValuesKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cCanKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cBeKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cHasKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cHaveKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Keyword cValuesKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final RuleCall cAssignmentOperatorParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cListWordListParserRuleCall_3_0 = (RuleCall)cListAssignment_3.eContents().get(0);
		
		///*
		//    Define a variable and give that variable a list of values it can take.
		//    Examples of use:
		//        colors can have values: green, blue, orange
		//        fruit can be: banana or apple or pear
		// */
		//ListDeclaration:
		//    name = ID  ("can" "have" "values" | "can" "be" | ("has" | "have") "values") AssignmentOperator? list = WordList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID  ("can" "have" "values" | "can" "be" | ("has" | "have") "values") AssignmentOperator? list = WordList
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("can" "have" "values" | "can" "be" | ("has" | "have") "values")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"can" "have" "values"
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//"can"
		public Keyword getCanKeyword_1_0_0() { return cCanKeyword_1_0_0; }
		
		//"have"
		public Keyword getHaveKeyword_1_0_1() { return cHaveKeyword_1_0_1; }
		
		//"values"
		public Keyword getValuesKeyword_1_0_2() { return cValuesKeyword_1_0_2; }
		
		//"can" "be"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"can"
		public Keyword getCanKeyword_1_1_0() { return cCanKeyword_1_1_0; }
		
		//"be"
		public Keyword getBeKeyword_1_1_1() { return cBeKeyword_1_1_1; }
		
		//("has" | "have") "values"
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//("has" | "have")
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }
		
		//"has"
		public Keyword getHasKeyword_1_2_0_0() { return cHasKeyword_1_2_0_0; }
		
		//"have"
		public Keyword getHaveKeyword_1_2_0_1() { return cHaveKeyword_1_2_0_1; }
		
		//"values"
		public Keyword getValuesKeyword_1_2_1() { return cValuesKeyword_1_2_1; }
		
		//AssignmentOperator?
		public RuleCall getAssignmentOperatorParserRuleCall_2() { return cAssignmentOperatorParserRuleCall_2; }
		
		//list = WordList
		public Assignment getListAssignment_3() { return cListAssignment_3; }
		
		//WordList
		public RuleCall getListWordListParserRuleCall_3_0() { return cListWordListParserRuleCall_3_0; }
	}
	public class ObjectDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ObjectDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cIsKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cAreKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cAKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cAnKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cPronounsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPronounsPronounsParserRuleCall_4_0 = (RuleCall)cPronounsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cHasKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cHaveKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		private final Keyword cAttributesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cAssignmentOperatorParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cAttributesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cAttributesAttributeListParserRuleCall_8_0 = (RuleCall)cAttributesAssignment_8.eContents().get(0);
		
		///*
		//    Define an object that has attributes. If the attribute value points to a list, the value will be selected randomly from that list.
		//    Examples of use:
		//        hero is an object.
		//        It has attributes: name = "John", occupation = occupation
		// */
		//ObjectDeclaration:
		//    "There" ("is" | "are") ("a" | "an")? name = ID
		//    pronouns = Pronouns ("has" | "have") "attributes"? AssignmentOperator? attributes = AttributeList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"There" ("is" | "are") ("a" | "an")? name = ID
		//pronouns = Pronouns ("has" | "have") "attributes"? AssignmentOperator? attributes = AttributeList
		public Group getGroup() { return cGroup; }
		
		//"There"
		public Keyword getThereKeyword_0() { return cThereKeyword_0; }
		
		//("is" | "are")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"is"
		public Keyword getIsKeyword_1_0() { return cIsKeyword_1_0; }
		
		//"are"
		public Keyword getAreKeyword_1_1() { return cAreKeyword_1_1; }
		
		//("a" | "an")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"a"
		public Keyword getAKeyword_2_0() { return cAKeyword_2_0; }
		
		//"an"
		public Keyword getAnKeyword_2_1() { return cAnKeyword_2_1; }
		
		//name = ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//pronouns = Pronouns
		public Assignment getPronounsAssignment_4() { return cPronounsAssignment_4; }
		
		//Pronouns
		public RuleCall getPronounsPronounsParserRuleCall_4_0() { return cPronounsPronounsParserRuleCall_4_0; }
		
		//("has" | "have")
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//"has"
		public Keyword getHasKeyword_5_0() { return cHasKeyword_5_0; }
		
		//"have"
		public Keyword getHaveKeyword_5_1() { return cHaveKeyword_5_1; }
		
		//"attributes"?
		public Keyword getAttributesKeyword_6() { return cAttributesKeyword_6; }
		
		//AssignmentOperator?
		public RuleCall getAssignmentOperatorParserRuleCall_7() { return cAssignmentOperatorParserRuleCall_7; }
		
		//attributes = AttributeList
		public Assignment getAttributesAssignment_8() { return cAttributesAssignment_8; }
		
		//AttributeList
		public RuleCall getAttributesAttributeListParserRuleCall_8_0() { return cAttributesAttributeListParserRuleCall_8_0; }
	}
	public class SubstoryDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.SubstoryDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSubstoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStoryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cStoryAlternatives_4_0 = (Alternatives)cStoryAssignment_4.eContents().get(0);
		private final RuleCall cStoryWordParserRuleCall_4_0_0 = (RuleCall)cStoryAlternatives_4_0.eContents().get(0);
		private final RuleCall cStoryVariableUseParserRuleCall_4_0_1 = (RuleCall)cStoryAlternatives_4_0.eContents().get(1);
		private final Keyword cEndSubstoryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		//    A substory that can be used in other substories and the story itself.
		//    Examples of use:
		//        substory small:
		//            "I am a small "figure.color" "figure.shape"."
		//        end-substory
		// */
		//SubstoryDeclaration:
		//    "define"? "substory" name = ID ":" story += ( Word | VariableUse )* "end-substory"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"define"? "substory" name = ID ":" story += ( Word | VariableUse )* "end-substory"
		public Group getGroup() { return cGroup; }
		
		//"define"?
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//"substory"
		public Keyword getSubstoryKeyword_1() { return cSubstoryKeyword_1; }
		
		//name = ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//story += ( Word | VariableUse )*
		public Assignment getStoryAssignment_4() { return cStoryAssignment_4; }
		
		//( Word | VariableUse )
		public Alternatives getStoryAlternatives_4_0() { return cStoryAlternatives_4_0; }
		
		//Word
		public RuleCall getStoryWordParserRuleCall_4_0_0() { return cStoryWordParserRuleCall_4_0_0; }
		
		//VariableUse
		public RuleCall getStoryVariableUseParserRuleCall_4_0_1() { return cStoryVariableUseParserRuleCall_4_0_1; }
		
		//"end-substory"
		public Keyword getEndSubstoryKeyword_5() { return cEndSubstoryKeyword_5; }
	}
	public class WordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Word");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		///*
		//    Basic building blocks
		// */
		//Word:
		//    value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Attribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNameExistingListAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameValueAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Attribute:
		//    NameExistingListAttribute |
		//    NameValueAttribute
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//NameExistingListAttribute |
		//NameValueAttribute
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NameExistingListAttribute
		public RuleCall getNameExistingListAttributeParserRuleCall_0() { return cNameExistingListAttributeParserRuleCall_0; }
		
		//NameValueAttribute
		public RuleCall getNameValueAttributeParserRuleCall_1() { return cNameValueAttributeParserRuleCall_1; }
	}
	public class NameExistingListAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.NameExistingListAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cAssignmentOperatorParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cFromKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueListDeclarationCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueListDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cValueListDeclarationCrossReference_2_0.eContents().get(1);
		
		///* NOT IN USE CURRENTLY
		//JustNameAttribute:
		//    name = [ListDeclaration]
		//;
		//*/
		//NameExistingListAttribute:
		//    name = ID (AssignmentOperator | "from")? value = [ListDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID (AssignmentOperator | "from")? value = [ListDeclaration]
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(AssignmentOperator | "from")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//AssignmentOperator
		public RuleCall getAssignmentOperatorParserRuleCall_1_0() { return cAssignmentOperatorParserRuleCall_1_0; }
		
		//"from"
		public Keyword getFromKeyword_1_1() { return cFromKeyword_1_1; }
		
		//value = [ListDeclaration]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//[ListDeclaration]
		public CrossReference getValueListDeclarationCrossReference_2_0() { return cValueListDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getValueListDeclarationIDTerminalRuleCall_2_0_1() { return cValueListDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class NameValueAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.NameValueAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final RuleCall cAssignmentOperatorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueWordParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//NameValueAttribute:
		//    name = ID AssignmentOperator? value = Word
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID AssignmentOperator? value = Word
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//AssignmentOperator?
		public RuleCall getAssignmentOperatorParserRuleCall_1() { return cAssignmentOperatorParserRuleCall_1; }
		
		//value = Word
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Word
		public RuleCall getValueWordParserRuleCall_2_0() { return cValueWordParserRuleCall_2_0; }
	}
	public class ListUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ListUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableListDeclarationCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableListDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableListDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersModifierListParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		
		//ListUse:
		//    variable = [ListDeclaration]
		//    modifiers = ModifierList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//variable = [ListDeclaration]
		//modifiers = ModifierList
		public Group getGroup() { return cGroup; }
		
		//variable = [ListDeclaration]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[ListDeclaration]
		public CrossReference getVariableListDeclarationCrossReference_0_0() { return cVariableListDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableListDeclarationIDTerminalRuleCall_0_0_1() { return cVariableListDeclarationIDTerminalRuleCall_0_0_1; }
		
		//modifiers = ModifierList
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }
		
		//ModifierList
		public RuleCall getModifiersModifierListParserRuleCall_1_0() { return cModifiersModifierListParserRuleCall_1_0; }
	}
	public class SubstoryUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.SubstoryUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSubstoryKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSubKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVariableSubstoryDeclarationCrossReference_2_0 = (CrossReference)cVariableAssignment_2.eContents().get(0);
		private final RuleCall cVariableSubstoryDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cVariableSubstoryDeclarationCrossReference_2_0.eContents().get(1);
		
		//SubstoryUse:
		//    "use" ("substory" | "sub")? variable = [SubstoryDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"use" ("substory" | "sub")? variable = [SubstoryDeclaration]
		public Group getGroup() { return cGroup; }
		
		//"use"
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//("substory" | "sub")?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"substory"
		public Keyword getSubstoryKeyword_1_0() { return cSubstoryKeyword_1_0; }
		
		//"sub"
		public Keyword getSubKeyword_1_1() { return cSubKeyword_1_1; }
		
		//variable = [SubstoryDeclaration]
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//[SubstoryDeclaration]
		public CrossReference getVariableSubstoryDeclarationCrossReference_2_0() { return cVariableSubstoryDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getVariableSubstoryDeclarationIDTerminalRuleCall_2_0_1() { return cVariableSubstoryDeclarationIDTerminalRuleCall_2_0_1; }
	}
	public class ObjectUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ObjectUse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cObjectAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectPronounParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ObjectUse:
		//    ObjectAttribute |
		//    ObjectPronoun
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ObjectAttribute |
		//ObjectPronoun
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ObjectAttribute
		public RuleCall getObjectAttributeParserRuleCall_0() { return cObjectAttributeParserRuleCall_0; }
		
		//ObjectPronoun
		public RuleCall getObjectPronounParserRuleCall_1() { return cObjectPronounParserRuleCall_1; }
	}
	public class ObjectAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ObjectAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cObjectObjectDeclarationCrossReference_0_0 = (CrossReference)cObjectAssignment_0.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeAttributeCrossReference_2_0.eContents().get(1);
		private final Assignment cModifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModifiersModifierListParserRuleCall_3_0 = (RuleCall)cModifiersAssignment_3.eContents().get(0);
		
		//ObjectAttribute:
		//    object = [ObjectDeclaration] "." attribute = [Attribute]
		//    modifiers = ModifierList
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//object = [ObjectDeclaration] "." attribute = [Attribute]
		//modifiers = ModifierList
		public Group getGroup() { return cGroup; }
		
		//object = [ObjectDeclaration]
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectObjectDeclarationCrossReference_0_0() { return cObjectObjectDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getObjectObjectDeclarationIDTerminalRuleCall_0_0_1() { return cObjectObjectDeclarationIDTerminalRuleCall_0_0_1; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute = [Attribute]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_2_0() { return cAttributeAttributeCrossReference_2_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_2_0_1() { return cAttributeAttributeIDTerminalRuleCall_2_0_1; }
		
		//modifiers = ModifierList
		public Assignment getModifiersAssignment_3() { return cModifiersAssignment_3; }
		
		//ModifierList
		public RuleCall getModifiersModifierListParserRuleCall_3_0() { return cModifiersModifierListParserRuleCall_3_0; }
	}
	public class ObjectPronounElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ObjectPronoun");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cObjectObjectDeclarationCrossReference_0_0 = (CrossReference)cObjectAssignment_0.eContents().get(0);
		private final RuleCall cObjectObjectDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cObjectObjectDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cPronounAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPronounPronounIdentifierEnumRuleCall_1_0 = (RuleCall)cPronounAssignment_1.eContents().get(0);
		
		//ObjectPronoun:
		//    object = [ObjectDeclaration]
		//    pronoun = PronounIdentifier
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//object = [ObjectDeclaration]
		//pronoun = PronounIdentifier
		public Group getGroup() { return cGroup; }
		
		//object = [ObjectDeclaration]
		public Assignment getObjectAssignment_0() { return cObjectAssignment_0; }
		
		//[ObjectDeclaration]
		public CrossReference getObjectObjectDeclarationCrossReference_0_0() { return cObjectObjectDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getObjectObjectDeclarationIDTerminalRuleCall_0_0_1() { return cObjectObjectDeclarationIDTerminalRuleCall_0_0_1; }
		
		//pronoun = PronounIdentifier
		public Assignment getPronounAssignment_1() { return cPronounAssignment_1; }
		
		//PronounIdentifier
		public RuleCall getPronounPronounIdentifierEnumRuleCall_1_0() { return cPronounPronounIdentifierEnumRuleCall_1_0; }
	}
	public class WordListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.WordList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWordsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWordsWordParserRuleCall_0_0 = (RuleCall)cWordsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSeparatorOrParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cWordsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWordsWordParserRuleCall_1_1_0 = (RuleCall)cWordsAssignment_1_1.eContents().get(0);
		
		//WordList:
		//    words += Word (SeparatorOr words += Word)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//words += Word (SeparatorOr words += Word)*
		public Group getGroup() { return cGroup; }
		
		//words += Word
		public Assignment getWordsAssignment_0() { return cWordsAssignment_0; }
		
		//Word
		public RuleCall getWordsWordParserRuleCall_0_0() { return cWordsWordParserRuleCall_0_0; }
		
		//(SeparatorOr words += Word)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SeparatorOr
		public RuleCall getSeparatorOrParserRuleCall_1_0() { return cSeparatorOrParserRuleCall_1_0; }
		
		//words += Word
		public Assignment getWordsAssignment_1_1() { return cWordsAssignment_1_1; }
		
		//Word
		public RuleCall getWordsWordParserRuleCall_1_1_0() { return cWordsWordParserRuleCall_1_1_0; }
	}
	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.AttributeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttributesAttributeParserRuleCall_0_0 = (RuleCall)cAttributesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSeparatorAndParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cAttributesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttributesAttributeParserRuleCall_1_1_0 = (RuleCall)cAttributesAssignment_1_1.eContents().get(0);
		
		//AttributeList:
		//    attributes += Attribute ( SeparatorAnd attributes += Attribute)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//attributes += Attribute ( SeparatorAnd attributes += Attribute)*
		public Group getGroup() { return cGroup; }
		
		//attributes += Attribute
		public Assignment getAttributesAssignment_0() { return cAttributesAssignment_0; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_0_0() { return cAttributesAttributeParserRuleCall_0_0; }
		
		//( SeparatorAnd attributes += Attribute)*
		public Group getGroup_1() { return cGroup_1; }
		
		//SeparatorAnd
		public RuleCall getSeparatorAndParserRuleCall_1_0() { return cSeparatorAndParserRuleCall_1_0; }
		
		//attributes += Attribute
		public Assignment getAttributesAssignment_1_1() { return cAttributesAssignment_1_1; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_1_1_0() { return cAttributesAttributeParserRuleCall_1_1_0; }
	}
	public class PronounsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Pronouns");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueHeKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueSheKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueItKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueTheyKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		
		///*
		//    Modifiers
		// */
		//Pronouns:
		//    value = ("He" | "She" | "It" | "They")
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = ("He" | "She" | "It" | "They")
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//("He" | "She" | "It" | "They")
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//"He"
		public Keyword getValueHeKeyword_0_0() { return cValueHeKeyword_0_0; }
		
		//"She"
		public Keyword getValueSheKeyword_0_1() { return cValueSheKeyword_0_1; }
		
		//"It"
		public Keyword getValueItKeyword_0_2() { return cValueItKeyword_0_2; }
		
		//"They"
		public Keyword getValueTheyKeyword_0_3() { return cValueTheyKeyword_0_3; }
	}
	public class ModifierListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.ModifierList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModifierListAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersModifierEnumRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		
		//ModifierList:
		//    {ModifierList} modifiers += Modifier*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ModifierList} modifiers += Modifier*
		public Group getGroup() { return cGroup; }
		
		//{ModifierList}
		public Action getModifierListAction_0() { return cModifierListAction_0; }
		
		//modifiers += Modifier*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }
		
		//Modifier
		public RuleCall getModifiersModifierEnumRuleCall_1_0() { return cModifiersModifierEnumRuleCall_1_0; }
	}
	public class AssignmentOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.AssignmentOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cIsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cToKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Keyword cIsKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		///*
		//    Helpers
		// */
		//AssignmentOperator:
		//    "=" | ":" | "-" | "-->" | "is"? "equal" "to" | "is"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"=" | ":" | "-" | "-->" | "is"? "equal" "to" | "is"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"="
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }
		
		//"-->"
		public Keyword getHyphenMinusHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusHyphenMinusGreaterThanSignKeyword_3; }
		
		//"is"? "equal" "to"
		public Group getGroup_4() { return cGroup_4; }
		
		//"is"?
		public Keyword getIsKeyword_4_0() { return cIsKeyword_4_0; }
		
		//"equal"
		public Keyword getEqualKeyword_4_1() { return cEqualKeyword_4_1; }
		
		//"to"
		public Keyword getToKeyword_4_2() { return cToKeyword_4_2; }
		
		//"is"
		public Keyword getIsKeyword_5() { return cIsKeyword_5; }
	}
	public class SeparatorOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.SeparatorOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//SeparatorOr:
		//    "," | "or" | "||"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"," | "or" | "||"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_2() { return cVerticalLineVerticalLineKeyword_2; }
	}
	public class SeparatorAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.SeparatorAnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//SeparatorAnd:
		//    ',' | "and" | "&&"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//',' | "and" | "&&"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//"and"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_2() { return cAmpersandAmpersandKeyword_2; }
	}
	
	public class PronounIdentifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.PronounIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTheyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTheyTheyKeyword_0_0 = (Keyword)cTheyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cThemEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cThemThemKeyword_1_0 = (Keyword)cThemEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTheirEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTheirTheirKeyword_2_0 = (Keyword)cTheirEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTheirsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTheirsTheirsKeyword_3_0 = (Keyword)cTheirsEnumLiteralDeclaration_3.eContents().get(0);
		
		///*
		//    Used to get the correct pronoun of the object
		// */
		//enum PronounIdentifier:
		//    They = ":they" |
		//    Them = ":them" |
		//    Their = ":their" |
		//    Theirs = ":theirs"
		//;
		public EnumRule getRule() { return rule; }
		
		//They = ":they" |
		//Them = ":them" |
		//Their = ":their" |
		//Theirs = ":theirs"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//They = ":they"
		public EnumLiteralDeclaration getTheyEnumLiteralDeclaration_0() { return cTheyEnumLiteralDeclaration_0; }
		
		//":they"
		public Keyword getTheyTheyKeyword_0_0() { return cTheyTheyKeyword_0_0; }
		
		//Them = ":them"
		public EnumLiteralDeclaration getThemEnumLiteralDeclaration_1() { return cThemEnumLiteralDeclaration_1; }
		
		//":them"
		public Keyword getThemThemKeyword_1_0() { return cThemThemKeyword_1_0; }
		
		//Their = ":their"
		public EnumLiteralDeclaration getTheirEnumLiteralDeclaration_2() { return cTheirEnumLiteralDeclaration_2; }
		
		//":their"
		public Keyword getTheirTheirKeyword_2_0() { return cTheirTheirKeyword_2_0; }
		
		//Theirs = ":theirs"
		public EnumLiteralDeclaration getTheirsEnumLiteralDeclaration_3() { return cTheirsEnumLiteralDeclaration_3; }
		
		//":theirs"
		public Keyword getTheirsTheirsKeyword_3_0() { return cTheirsTheirsKeyword_3_0; }
	}
	public class ModifierElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "tracerypp.TraceryPlusPlus.Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCapitalizeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCapitalizeCapitalizeKeyword_0_0 = (Keyword)cCapitalizeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFullCapitalizeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFullCapitalizeCAPITALIZEKeyword_1_0 = (Keyword)cFullCapitalizeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPluralEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPluralSKeyword_2_0 = (Keyword)cPluralEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cArticleEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cArticleAKeyword_3_0 = (Keyword)cArticleEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPastTenseEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPastTenseEdKeyword_4_0 = (Keyword)cPastTenseEnumLiteralDeclaration_4.eContents().get(0);
		
		///*
		//    Modifiers to modify attributes or list variables
		// */
		//enum Modifier:
		//    Capitalize="-capitalize" |
		//    FullCapitalize="-CAPITALIZE" |
		//    Plural="-s" |
		//    Article="-a" |
		//    PastTense="-ed"
		//;
		public EnumRule getRule() { return rule; }
		
		//Capitalize="-capitalize" |
		//FullCapitalize="-CAPITALIZE" |
		//Plural="-s" |
		//Article="-a" |
		//PastTense="-ed"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Capitalize="-capitalize"
		public EnumLiteralDeclaration getCapitalizeEnumLiteralDeclaration_0() { return cCapitalizeEnumLiteralDeclaration_0; }
		
		//"-capitalize"
		public Keyword getCapitalizeCapitalizeKeyword_0_0() { return cCapitalizeCapitalizeKeyword_0_0; }
		
		//FullCapitalize="-CAPITALIZE"
		public EnumLiteralDeclaration getFullCapitalizeEnumLiteralDeclaration_1() { return cFullCapitalizeEnumLiteralDeclaration_1; }
		
		//"-CAPITALIZE"
		public Keyword getFullCapitalizeCAPITALIZEKeyword_1_0() { return cFullCapitalizeCAPITALIZEKeyword_1_0; }
		
		//Plural="-s"
		public EnumLiteralDeclaration getPluralEnumLiteralDeclaration_2() { return cPluralEnumLiteralDeclaration_2; }
		
		//"-s"
		public Keyword getPluralSKeyword_2_0() { return cPluralSKeyword_2_0; }
		
		//Article="-a"
		public EnumLiteralDeclaration getArticleEnumLiteralDeclaration_3() { return cArticleEnumLiteralDeclaration_3; }
		
		//"-a"
		public Keyword getArticleAKeyword_3_0() { return cArticleAKeyword_3_0; }
		
		//PastTense="-ed"
		public EnumLiteralDeclaration getPastTenseEnumLiteralDeclaration_4() { return cPastTenseEnumLiteralDeclaration_4; }
		
		//"-ed"
		public Keyword getPastTenseEdKeyword_4_0() { return cPastTenseEdKeyword_4_0; }
	}
	
	private final TraceryPlusPlusProgramElements pTraceryPlusPlusProgram;
	private final StatementElements pStatement;
	private final VariableElements pVariable;
	private final VariableUseElements pVariableUse;
	private final StoryElements pStory;
	private final ListDeclarationElements pListDeclaration;
	private final ObjectDeclarationElements pObjectDeclaration;
	private final SubstoryDeclarationElements pSubstoryDeclaration;
	private final WordElements pWord;
	private final AttributeElements pAttribute;
	private final NameExistingListAttributeElements pNameExistingListAttribute;
	private final NameValueAttributeElements pNameValueAttribute;
	private final ListUseElements pListUse;
	private final SubstoryUseElements pSubstoryUse;
	private final ObjectUseElements pObjectUse;
	private final ObjectAttributeElements pObjectAttribute;
	private final ObjectPronounElements pObjectPronoun;
	private final WordListElements pWordList;
	private final AttributeListElements pAttributeList;
	private final PronounsElements pPronouns;
	private final PronounIdentifierElements ePronounIdentifier;
	private final ModifierListElements pModifierList;
	private final ModifierElements eModifier;
	private final AssignmentOperatorElements pAssignmentOperator;
	private final SeparatorOrElements pSeparatorOr;
	private final SeparatorAndElements pSeparatorAnd;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TraceryPlusPlusGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTraceryPlusPlusProgram = new TraceryPlusPlusProgramElements();
		this.pStatement = new StatementElements();
		this.pVariable = new VariableElements();
		this.pVariableUse = new VariableUseElements();
		this.pStory = new StoryElements();
		this.pListDeclaration = new ListDeclarationElements();
		this.pObjectDeclaration = new ObjectDeclarationElements();
		this.pSubstoryDeclaration = new SubstoryDeclarationElements();
		this.pWord = new WordElements();
		this.pAttribute = new AttributeElements();
		this.pNameExistingListAttribute = new NameExistingListAttributeElements();
		this.pNameValueAttribute = new NameValueAttributeElements();
		this.pListUse = new ListUseElements();
		this.pSubstoryUse = new SubstoryUseElements();
		this.pObjectUse = new ObjectUseElements();
		this.pObjectAttribute = new ObjectAttributeElements();
		this.pObjectPronoun = new ObjectPronounElements();
		this.pWordList = new WordListElements();
		this.pAttributeList = new AttributeListElements();
		this.pPronouns = new PronounsElements();
		this.ePronounIdentifier = new PronounIdentifierElements();
		this.pModifierList = new ModifierListElements();
		this.eModifier = new ModifierElements();
		this.pAssignmentOperator = new AssignmentOperatorElements();
		this.pSeparatorOr = new SeparatorOrElements();
		this.pSeparatorAnd = new SeparatorAndElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tracerypp.TraceryPlusPlus".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * Author: Vakaris Paulavicius
	// * Version 1.0
	// */
	//TraceryPlusPlusProgram:
	//    // First all the necessary statements are declared and then the story structure is specified
	//    statements += Statement*
	//    story = Story
	//;
	public TraceryPlusPlusProgramElements getTraceryPlusPlusProgramAccess() {
		return pTraceryPlusPlusProgram;
	}
	
	public ParserRule getTraceryPlusPlusProgramRule() {
		return getTraceryPlusPlusProgramAccess().getRule();
	}
	
	//Statement:
	//    Variable
	//    // For future releases: Rule (for example if else or something similar).
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Variable:
	//    ListDeclaration |
	//    ObjectDeclaration |
	//    SubstoryDeclaration
	//;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	///*
	//    Pointers to variables
	// */
	//VariableUse:
	//    ListUse |
	//    ObjectUse |
	//    SubstoryUse
	//;
	public VariableUseElements getVariableUseAccess() {
		return pVariableUse;
	}
	
	public ParserRule getVariableUseRule() {
		return getVariableUseAccess().getRule();
	}
	
	///*
	//    Used to define what the story should look like.
	//    There must be only one story in the model for now.
	// */
	//Story:
	//    {Story} "The" "story" AssignmentOperator?
	//    story += ( Word | VariableUse )*
	//;
	public StoryElements getStoryAccess() {
		return pStory;
	}
	
	public ParserRule getStoryRule() {
		return getStoryAccess().getRule();
	}
	
	///*
	//    Define a variable and give that variable a list of values it can take.
	//    Examples of use:
	//        colors can have values: green, blue, orange
	//        fruit can be: banana or apple or pear
	// */
	//ListDeclaration:
	//    name = ID  ("can" "have" "values" | "can" "be" | ("has" | "have") "values") AssignmentOperator? list = WordList
	//;
	public ListDeclarationElements getListDeclarationAccess() {
		return pListDeclaration;
	}
	
	public ParserRule getListDeclarationRule() {
		return getListDeclarationAccess().getRule();
	}
	
	///*
	//    Define an object that has attributes. If the attribute value points to a list, the value will be selected randomly from that list.
	//    Examples of use:
	//        hero is an object.
	//        It has attributes: name = "John", occupation = occupation
	// */
	//ObjectDeclaration:
	//    "There" ("is" | "are") ("a" | "an")? name = ID
	//    pronouns = Pronouns ("has" | "have") "attributes"? AssignmentOperator? attributes = AttributeList
	//;
	public ObjectDeclarationElements getObjectDeclarationAccess() {
		return pObjectDeclaration;
	}
	
	public ParserRule getObjectDeclarationRule() {
		return getObjectDeclarationAccess().getRule();
	}
	
	///*
	//    A substory that can be used in other substories and the story itself.
	//    Examples of use:
	//        substory small:
	//            "I am a small "figure.color" "figure.shape"."
	//        end-substory
	// */
	//SubstoryDeclaration:
	//    "define"? "substory" name = ID ":" story += ( Word | VariableUse )* "end-substory"
	//;
	public SubstoryDeclarationElements getSubstoryDeclarationAccess() {
		return pSubstoryDeclaration;
	}
	
	public ParserRule getSubstoryDeclarationRule() {
		return getSubstoryDeclarationAccess().getRule();
	}
	
	///*
	//    Basic building blocks
	// */
	//Word:
	//    value = STRING
	//;
	public WordElements getWordAccess() {
		return pWord;
	}
	
	public ParserRule getWordRule() {
		return getWordAccess().getRule();
	}
	
	//Attribute:
	//    NameExistingListAttribute |
	//    NameValueAttribute
	//;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	///* NOT IN USE CURRENTLY
	//JustNameAttribute:
	//    name = [ListDeclaration]
	//;
	//*/
	//NameExistingListAttribute:
	//    name = ID (AssignmentOperator | "from")? value = [ListDeclaration]
	//;
	public NameExistingListAttributeElements getNameExistingListAttributeAccess() {
		return pNameExistingListAttribute;
	}
	
	public ParserRule getNameExistingListAttributeRule() {
		return getNameExistingListAttributeAccess().getRule();
	}
	
	//NameValueAttribute:
	//    name = ID AssignmentOperator? value = Word
	//;
	public NameValueAttributeElements getNameValueAttributeAccess() {
		return pNameValueAttribute;
	}
	
	public ParserRule getNameValueAttributeRule() {
		return getNameValueAttributeAccess().getRule();
	}
	
	//ListUse:
	//    variable = [ListDeclaration]
	//    modifiers = ModifierList
	//;
	public ListUseElements getListUseAccess() {
		return pListUse;
	}
	
	public ParserRule getListUseRule() {
		return getListUseAccess().getRule();
	}
	
	//SubstoryUse:
	//    "use" ("substory" | "sub")? variable = [SubstoryDeclaration]
	//;
	public SubstoryUseElements getSubstoryUseAccess() {
		return pSubstoryUse;
	}
	
	public ParserRule getSubstoryUseRule() {
		return getSubstoryUseAccess().getRule();
	}
	
	//ObjectUse:
	//    ObjectAttribute |
	//    ObjectPronoun
	//;
	public ObjectUseElements getObjectUseAccess() {
		return pObjectUse;
	}
	
	public ParserRule getObjectUseRule() {
		return getObjectUseAccess().getRule();
	}
	
	//ObjectAttribute:
	//    object = [ObjectDeclaration] "." attribute = [Attribute]
	//    modifiers = ModifierList
	//;
	public ObjectAttributeElements getObjectAttributeAccess() {
		return pObjectAttribute;
	}
	
	public ParserRule getObjectAttributeRule() {
		return getObjectAttributeAccess().getRule();
	}
	
	//ObjectPronoun:
	//    object = [ObjectDeclaration]
	//    pronoun = PronounIdentifier
	//;
	public ObjectPronounElements getObjectPronounAccess() {
		return pObjectPronoun;
	}
	
	public ParserRule getObjectPronounRule() {
		return getObjectPronounAccess().getRule();
	}
	
	//WordList:
	//    words += Word (SeparatorOr words += Word)*
	//;
	public WordListElements getWordListAccess() {
		return pWordList;
	}
	
	public ParserRule getWordListRule() {
		return getWordListAccess().getRule();
	}
	
	//AttributeList:
	//    attributes += Attribute ( SeparatorAnd attributes += Attribute)*
	//;
	public AttributeListElements getAttributeListAccess() {
		return pAttributeList;
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}
	
	///*
	//    Modifiers
	// */
	//Pronouns:
	//    value = ("He" | "She" | "It" | "They")
	//;
	public PronounsElements getPronounsAccess() {
		return pPronouns;
	}
	
	public ParserRule getPronounsRule() {
		return getPronounsAccess().getRule();
	}
	
	///*
	//    Used to get the correct pronoun of the object
	// */
	//enum PronounIdentifier:
	//    They = ":they" |
	//    Them = ":them" |
	//    Their = ":their" |
	//    Theirs = ":theirs"
	//;
	public PronounIdentifierElements getPronounIdentifierAccess() {
		return ePronounIdentifier;
	}
	
	public EnumRule getPronounIdentifierRule() {
		return getPronounIdentifierAccess().getRule();
	}
	
	//ModifierList:
	//    {ModifierList} modifiers += Modifier*
	//;
	public ModifierListElements getModifierListAccess() {
		return pModifierList;
	}
	
	public ParserRule getModifierListRule() {
		return getModifierListAccess().getRule();
	}
	
	///*
	//    Modifiers to modify attributes or list variables
	// */
	//enum Modifier:
	//    Capitalize="-capitalize" |
	//    FullCapitalize="-CAPITALIZE" |
	//    Plural="-s" |
	//    Article="-a" |
	//    PastTense="-ed"
	//;
	public ModifierElements getModifierAccess() {
		return eModifier;
	}
	
	public EnumRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	///*
	//    Helpers
	// */
	//AssignmentOperator:
	//    "=" | ":" | "-" | "-->" | "is"? "equal" "to" | "is"
	//;
	public AssignmentOperatorElements getAssignmentOperatorAccess() {
		return pAssignmentOperator;
	}
	
	public ParserRule getAssignmentOperatorRule() {
		return getAssignmentOperatorAccess().getRule();
	}
	
	//SeparatorOr:
	//    "," | "or" | "||"
	//;
	public SeparatorOrElements getSeparatorOrAccess() {
		return pSeparatorOr;
	}
	
	public ParserRule getSeparatorOrRule() {
		return getSeparatorOrAccess().getRule();
	}
	
	//SeparatorAnd:
	//    ',' | "and" | "&&"
	//;
	public SeparatorAndElements getSeparatorAndAccess() {
		return pSeparatorAnd;
	}
	
	public ParserRule getSeparatorAndRule() {
		return getSeparatorAndAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
