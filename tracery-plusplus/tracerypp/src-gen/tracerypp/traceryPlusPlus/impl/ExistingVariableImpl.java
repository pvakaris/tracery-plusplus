/**
 * generated by Xtext 2.30.0
 */
package tracerypp.traceryPlusPlus.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import tracerypp.traceryPlusPlus.ExistingVariable;
import tracerypp.traceryPlusPlus.TraceryPlusPlusPackage;
import tracerypp.traceryPlusPlus.Variable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Existing Variable</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link tracerypp.traceryPlusPlus.impl.ExistingVariableImpl#getPointer <em>Pointer</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExistingVariableImpl extends MinimalEObjectImpl.Container implements ExistingVariable
{
  /**
   * The cached value of the '{@link #getPointer() <em>Pointer</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPointer()
   * @generated
   * @ordered
   */
  protected Variable pointer;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExistingVariableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TraceryPlusPlusPackage.Literals.EXISTING_VARIABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable getPointer()
  {
    if (pointer != null && pointer.eIsProxy())
    {
      InternalEObject oldPointer = (InternalEObject)pointer;
      pointer = (Variable)eResolveProxy(oldPointer);
      if (pointer != oldPointer)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TraceryPlusPlusPackage.EXISTING_VARIABLE__POINTER, oldPointer, pointer));
      }
    }
    return pointer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetPointer()
  {
    return pointer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPointer(Variable newPointer)
  {
    Variable oldPointer = pointer;
    pointer = newPointer;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraceryPlusPlusPackage.EXISTING_VARIABLE__POINTER, oldPointer, pointer));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TraceryPlusPlusPackage.EXISTING_VARIABLE__POINTER:
        if (resolve) return getPointer();
        return basicGetPointer();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TraceryPlusPlusPackage.EXISTING_VARIABLE__POINTER:
        setPointer((Variable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TraceryPlusPlusPackage.EXISTING_VARIABLE__POINTER:
        setPointer((Variable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TraceryPlusPlusPackage.EXISTING_VARIABLE__POINTER:
        return pointer != null;
    }
    return super.eIsSet(featureID);
  }

} //ExistingVariableImpl
