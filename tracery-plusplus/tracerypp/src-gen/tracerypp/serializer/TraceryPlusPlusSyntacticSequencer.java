/*
 * generated by Xtext 2.30.0
 */
package tracerypp.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import tracerypp.services.TraceryPlusPlusGrammarAccess;

@SuppressWarnings("all")
public class TraceryPlusPlusSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TraceryPlusPlusGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ListDeclaration___CanKeyword_1_0_0_HaveKeyword_1_0_1_ValuesKeyword_1_0_2___or___CanKeyword_1_1_0_BeKeyword_1_1_1__;
	protected AbstractElementAlias match_ObjectDeclaration_AreKeyword_1_1_or_IsKeyword_1_0;
	protected AbstractElementAlias match_ObjectDeclaration_HasKeyword_5_0_or_HaveKeyword_5_1;
	protected AbstractElementAlias match_ObjectDeclaration_HeKeyword_4_0_or_ItKeyword_4_2_or_SheKeyword_4_1_or_TheyKeyword_4_3;
	protected AbstractElementAlias match_ObjectDeclaration___AKeyword_2_0_or_AnKeyword_2_1__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TraceryPlusPlusGrammarAccess) access;
		match_ListDeclaration___CanKeyword_1_0_0_HaveKeyword_1_0_1_ValuesKeyword_1_0_2___or___CanKeyword_1_1_0_BeKeyword_1_1_1__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getListDeclarationAccess().getCanKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getListDeclarationAccess().getHaveKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getListDeclarationAccess().getValuesKeyword_1_0_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getListDeclarationAccess().getCanKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getListDeclarationAccess().getBeKeyword_1_1_1())));
		match_ObjectDeclaration_AreKeyword_1_1_or_IsKeyword_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getAreKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getIsKeyword_1_0()));
		match_ObjectDeclaration_HasKeyword_5_0_or_HaveKeyword_5_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getHasKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getHaveKeyword_5_1()));
		match_ObjectDeclaration_HeKeyword_4_0_or_ItKeyword_4_2_or_SheKeyword_4_1_or_TheyKeyword_4_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getHeKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getItKeyword_4_2()), new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getSheKeyword_4_1()), new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getTheyKeyword_4_3()));
		match_ObjectDeclaration___AKeyword_2_0_or_AnKeyword_2_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getAKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getObjectDeclarationAccess().getAnKeyword_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getAssignmentOperatorRule())
			return getAssignmentOperatorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSeparatorAndRule())
			return getSeparatorAndToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSeparatorOrRule())
			return getSeparatorOrToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * AssignmentOperator:
	 * 	"=" | ":" | "-"
	 * ;
	 */
	protected String getAssignmentOperatorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * SeparatorAnd:
	 * 	',' | "and"
	 * ;
	 */
	protected String getSeparatorAndToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * SeparatorOr:
	 * 	"," | "or"
	 * ;
	 */
	protected String getSeparatorOrToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ListDeclaration___CanKeyword_1_0_0_HaveKeyword_1_0_1_ValuesKeyword_1_0_2___or___CanKeyword_1_1_0_BeKeyword_1_1_1__.equals(syntax))
				emit_ListDeclaration___CanKeyword_1_0_0_HaveKeyword_1_0_1_ValuesKeyword_1_0_2___or___CanKeyword_1_1_0_BeKeyword_1_1_1__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectDeclaration_AreKeyword_1_1_or_IsKeyword_1_0.equals(syntax))
				emit_ObjectDeclaration_AreKeyword_1_1_or_IsKeyword_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectDeclaration_HasKeyword_5_0_or_HaveKeyword_5_1.equals(syntax))
				emit_ObjectDeclaration_HasKeyword_5_0_or_HaveKeyword_5_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectDeclaration_HeKeyword_4_0_or_ItKeyword_4_2_or_SheKeyword_4_1_or_TheyKeyword_4_3.equals(syntax))
				emit_ObjectDeclaration_HeKeyword_4_0_or_ItKeyword_4_2_or_SheKeyword_4_1_or_TheyKeyword_4_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectDeclaration___AKeyword_2_0_or_AnKeyword_2_1__q.equals(syntax))
				emit_ObjectDeclaration___AKeyword_2_0_or_AnKeyword_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('can' 'have' 'values') | ('can' 'be')
	 *
	 * This ambiguous syntax occurs at:
	 *     name=Variable (ambiguity) AssignmentOperator list=WordList
	 
	 * </pre>
	 */
	protected void emit_ListDeclaration___CanKeyword_1_0_0_HaveKeyword_1_0_1_ValuesKeyword_1_0_2___or___CanKeyword_1_1_0_BeKeyword_1_1_1__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'is' | 'are'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'There' (ambiguity) ('a' | 'an')? name=ID
	 
	 * </pre>
	 */
	protected void emit_ObjectDeclaration_AreKeyword_1_1_or_IsKeyword_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'has' | 'have'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID ('He' | 'She' | 'It' | 'They') (ambiguity) 'attributes' AssignmentOperator attributes=AttributeList
	 
	 * </pre>
	 */
	protected void emit_ObjectDeclaration_HasKeyword_5_0_or_HaveKeyword_5_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'He' | 'She' | 'It' | 'They'
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) ('has' | 'have') 'attributes' AssignmentOperator attributes=AttributeList
	 
	 * </pre>
	 */
	protected void emit_ObjectDeclaration_HeKeyword_4_0_or_ItKeyword_4_2_or_SheKeyword_4_1_or_TheyKeyword_4_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ('a' | 'an')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'There' ('is' | 'are') (ambiguity) name=ID
	 
	 * </pre>
	 */
	protected void emit_ObjectDeclaration___AKeyword_2_0_or_AnKeyword_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
