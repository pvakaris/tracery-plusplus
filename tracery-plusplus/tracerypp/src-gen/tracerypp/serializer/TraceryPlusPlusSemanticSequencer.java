/*
 * generated by Xtext 2.30.0
 */
package tracerypp.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import tracerypp.services.TraceryPlusPlusGrammarAccess;
import tracerypp.traceryPlusPlus.AttributeList;
import tracerypp.traceryPlusPlus.ListDeclaration;
import tracerypp.traceryPlusPlus.ListUse;
import tracerypp.traceryPlusPlus.ModifierList;
import tracerypp.traceryPlusPlus.NameExistingListAttribute;
import tracerypp.traceryPlusPlus.NameValueAttribute;
import tracerypp.traceryPlusPlus.ObjectAttribute;
import tracerypp.traceryPlusPlus.ObjectDeclaration;
import tracerypp.traceryPlusPlus.ObjectPronoun;
import tracerypp.traceryPlusPlus.Pronouns;
import tracerypp.traceryPlusPlus.Story;
import tracerypp.traceryPlusPlus.SubstoryDeclaration;
import tracerypp.traceryPlusPlus.SubstoryUse;
import tracerypp.traceryPlusPlus.TraceryPlusPlusPackage;
import tracerypp.traceryPlusPlus.TraceryPlusPlusProgram;
import tracerypp.traceryPlusPlus.Word;
import tracerypp.traceryPlusPlus.WordList;

@SuppressWarnings("all")
public class TraceryPlusPlusSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceryPlusPlusGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TraceryPlusPlusPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TraceryPlusPlusPackage.ATTRIBUTE_LIST:
				sequence_AttributeList(context, (AttributeList) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.LIST_DECLARATION:
				sequence_ListDeclaration(context, (ListDeclaration) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.LIST_USE:
				sequence_ListUse(context, (ListUse) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.MODIFIER_LIST:
				sequence_ModifierList(context, (ModifierList) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.NAME_EXISTING_LIST_ATTRIBUTE:
				sequence_NameExistingListAttribute(context, (NameExistingListAttribute) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.NAME_VALUE_ATTRIBUTE:
				sequence_NameValueAttribute(context, (NameValueAttribute) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.OBJECT_ATTRIBUTE:
				sequence_ObjectAttribute(context, (ObjectAttribute) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.OBJECT_DECLARATION:
				sequence_ObjectDeclaration(context, (ObjectDeclaration) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.OBJECT_PRONOUN:
				sequence_ObjectPronoun(context, (ObjectPronoun) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.PRONOUNS:
				sequence_Pronouns(context, (Pronouns) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.STORY:
				sequence_Story(context, (Story) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.SUBSTORY_DECLARATION:
				sequence_SubstoryDeclaration(context, (SubstoryDeclaration) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.SUBSTORY_USE:
				sequence_SubstoryUse(context, (SubstoryUse) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.TRACERY_PLUS_PLUS_PROGRAM:
				sequence_TraceryPlusPlusProgram(context, (TraceryPlusPlusProgram) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.WORD:
				sequence_Word(context, (Word) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.WORD_LIST:
				sequence_WordList(context, (WordList) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeList returns AttributeList
	 *
	 * Constraint:
	 *     (attributes+=Attribute attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_AttributeList(ISerializationContext context, AttributeList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ListDeclaration
	 *     Variable returns ListDeclaration
	 *     ListDeclaration returns ListDeclaration
	 *
	 * Constraint:
	 *     (name=ID list=WordList)
	 * </pre>
	 */
	protected void sequence_ListDeclaration(ISerializationContext context, ListDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.LIST_DECLARATION__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.LIST_DECLARATION__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListDeclarationAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getListDeclarationAccess().getListWordListParserRuleCall_3_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableUse returns ListUse
	 *     ListUse returns ListUse
	 *
	 * Constraint:
	 *     (variable=[ListDeclaration|ID] modifiers=ModifierList)
	 * </pre>
	 */
	protected void sequence_ListUse(ISerializationContext context, ListUse semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.LIST_USE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.LIST_USE__VARIABLE));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.LIST_USE__MODIFIERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.LIST_USE__MODIFIERS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListUseAccess().getVariableListDeclarationIDTerminalRuleCall_0_0_1(), semanticObject.eGet(TraceryPlusPlusPackage.Literals.LIST_USE__VARIABLE, false));
		feeder.accept(grammarAccess.getListUseAccess().getModifiersModifierListParserRuleCall_1_0(), semanticObject.getModifiers());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ModifierList returns ModifierList
	 *
	 * Constraint:
	 *     modifiers+=Modifier*
	 * </pre>
	 */
	protected void sequence_ModifierList(ISerializationContext context, ModifierList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns NameExistingListAttribute
	 *     NameExistingListAttribute returns NameExistingListAttribute
	 *
	 * Constraint:
	 *     (name=ID value=[ListDeclaration|ID])
	 * </pre>
	 */
	protected void sequence_NameExistingListAttribute(ISerializationContext context, NameExistingListAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.NAME_EXISTING_LIST_ATTRIBUTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.NAME_EXISTING_LIST_ATTRIBUTE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameExistingListAttributeAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNameExistingListAttributeAccess().getValueListDeclarationIDTerminalRuleCall_2_0_1(), semanticObject.eGet(TraceryPlusPlusPackage.Literals.NAME_EXISTING_LIST_ATTRIBUTE__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns NameValueAttribute
	 *     NameValueAttribute returns NameValueAttribute
	 *
	 * Constraint:
	 *     (name=ID value=Word)
	 * </pre>
	 */
	protected void sequence_NameValueAttribute(ISerializationContext context, NameValueAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.NAME_VALUE_ATTRIBUTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.NAME_VALUE_ATTRIBUTE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameValueAttributeAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNameValueAttributeAccess().getValueWordParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableUse returns ObjectAttribute
	 *     ObjectUse returns ObjectAttribute
	 *     ObjectAttribute returns ObjectAttribute
	 *
	 * Constraint:
	 *     (object=[ObjectDeclaration|ID] attribute=[Attribute|ID] modifiers=ModifierList)
	 * </pre>
	 */
	protected void sequence_ObjectAttribute(ISerializationContext context, ObjectAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_USE__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_USE__OBJECT));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_ATTRIBUTE__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_ATTRIBUTE__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_ATTRIBUTE__MODIFIERS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_ATTRIBUTE__MODIFIERS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationIDTerminalRuleCall_0_0_1(), semanticObject.eGet(TraceryPlusPlusPackage.Literals.OBJECT_USE__OBJECT, false));
		feeder.accept(grammarAccess.getObjectAttributeAccess().getAttributeAttributeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(TraceryPlusPlusPackage.Literals.OBJECT_ATTRIBUTE__ATTRIBUTE, false));
		feeder.accept(grammarAccess.getObjectAttributeAccess().getModifiersModifierListParserRuleCall_3_0(), semanticObject.getModifiers());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ObjectDeclaration
	 *     Variable returns ObjectDeclaration
	 *     ObjectDeclaration returns ObjectDeclaration
	 *
	 * Constraint:
	 *     (name=ID pronouns=Pronouns attributes=AttributeList)
	 * </pre>
	 */
	protected void sequence_ObjectDeclaration(ISerializationContext context, ObjectDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.VARIABLE__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__PRONOUNS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__PRONOUNS));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__ATTRIBUTES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__ATTRIBUTES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectDeclarationAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjectDeclarationAccess().getPronounsPronounsParserRuleCall_4_0(), semanticObject.getPronouns());
		feeder.accept(grammarAccess.getObjectDeclarationAccess().getAttributesAttributeListParserRuleCall_8_0(), semanticObject.getAttributes());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableUse returns ObjectPronoun
	 *     ObjectUse returns ObjectPronoun
	 *     ObjectPronoun returns ObjectPronoun
	 *
	 * Constraint:
	 *     (object=[ObjectDeclaration|ID] pronoun=PronounIdentifier)
	 * </pre>
	 */
	protected void sequence_ObjectPronoun(ISerializationContext context, ObjectPronoun semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_USE__OBJECT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_USE__OBJECT));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_PRONOUN__PRONOUN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_PRONOUN__PRONOUN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectPronounAccess().getObjectObjectDeclarationIDTerminalRuleCall_0_0_1(), semanticObject.eGet(TraceryPlusPlusPackage.Literals.OBJECT_USE__OBJECT, false));
		feeder.accept(grammarAccess.getObjectPronounAccess().getPronounPronounIdentifierEnumRuleCall_1_0(), semanticObject.getPronoun());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pronouns returns Pronouns
	 *
	 * Constraint:
	 *     (value='He' | value='She' | value='It' | value='They')
	 * </pre>
	 */
	protected void sequence_Pronouns(ISerializationContext context, Pronouns semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Story returns Story
	 *
	 * Constraint:
	 *     (story+=Word | story+=VariableUse)*
	 * </pre>
	 */
	protected void sequence_Story(ISerializationContext context, Story semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns SubstoryDeclaration
	 *     Variable returns SubstoryDeclaration
	 *     SubstoryDeclaration returns SubstoryDeclaration
	 *
	 * Constraint:
	 *     (name=ID (story+=Word | story+=VariableUse)*)
	 * </pre>
	 */
	protected void sequence_SubstoryDeclaration(ISerializationContext context, SubstoryDeclaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     VariableUse returns SubstoryUse
	 *     SubstoryUse returns SubstoryUse
	 *
	 * Constraint:
	 *     variable=[SubstoryDeclaration|ID]
	 * </pre>
	 */
	protected void sequence_SubstoryUse(ISerializationContext context, SubstoryUse semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.SUBSTORY_USE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.SUBSTORY_USE__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubstoryUseAccess().getVariableSubstoryDeclarationIDTerminalRuleCall_2_0_1(), semanticObject.eGet(TraceryPlusPlusPackage.Literals.SUBSTORY_USE__VARIABLE, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TraceryPlusPlusProgram returns TraceryPlusPlusProgram
	 *
	 * Constraint:
	 *     (statements+=Statement* story=Story)
	 * </pre>
	 */
	protected void sequence_TraceryPlusPlusProgram(ISerializationContext context, TraceryPlusPlusProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WordList returns WordList
	 *
	 * Constraint:
	 *     (words+=Word words+=Word*)
	 * </pre>
	 */
	protected void sequence_WordList(ISerializationContext context, WordList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Word returns Word
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_Word(ISerializationContext context, Word semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.WORD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.WORD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
