/*
 * generated by Xtext 2.30.0
 */
package tracerypp.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import tracerypp.services.TraceryPlusPlusGrammarAccess;
import tracerypp.traceryPlusPlus.AttributeList;
import tracerypp.traceryPlusPlus.ExistingVariable;
import tracerypp.traceryPlusPlus.HePronouns;
import tracerypp.traceryPlusPlus.JustNameAttribute;
import tracerypp.traceryPlusPlus.ListDeclaration;
import tracerypp.traceryPlusPlus.NameExistingListAttribute;
import tracerypp.traceryPlusPlus.NameValueAttribute;
import tracerypp.traceryPlusPlus.ObjectAttribute;
import tracerypp.traceryPlusPlus.ObjectDeclaration;
import tracerypp.traceryPlusPlus.Pronouns;
import tracerypp.traceryPlusPlus.Story;
import tracerypp.traceryPlusPlus.StoryVariable;
import tracerypp.traceryPlusPlus.TraceryPlusPlusPackage;
import tracerypp.traceryPlusPlus.TraceryPlusPlusProgram;
import tracerypp.traceryPlusPlus.Variable;
import tracerypp.traceryPlusPlus.Word;
import tracerypp.traceryPlusPlus.WordList;

@SuppressWarnings("all")
public class TraceryPlusPlusSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceryPlusPlusGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TraceryPlusPlusPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TraceryPlusPlusPackage.ATTRIBUTE_LIST:
				sequence_AttributeList(context, (AttributeList) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.EXISTING_VARIABLE:
				sequence_ExistingVariable(context, (ExistingVariable) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.HE_PRONOUNS:
				sequence_HePronouns(context, (HePronouns) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.JUST_NAME_ATTRIBUTE:
				sequence_JustNameAttribute(context, (JustNameAttribute) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.LIST_DECLARATION:
				sequence_ListDeclaration(context, (ListDeclaration) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.NAME_EXISTING_LIST_ATTRIBUTE:
				sequence_NameExistingListAttribute(context, (NameExistingListAttribute) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.NAME_VALUE_ATTRIBUTE:
				sequence_NameValueAttribute(context, (NameValueAttribute) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.OBJECT_ATTRIBUTE:
				sequence_ObjectAttribute(context, (ObjectAttribute) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.OBJECT_DECLARATION:
				sequence_ObjectDeclaration(context, (ObjectDeclaration) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.PRONOUNS:
				sequence_Pronouns(context, (Pronouns) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.STORY:
				sequence_Story(context, (Story) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.STORY_VARIABLE:
				sequence_StoryVariable(context, (StoryVariable) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.TRACERY_PLUS_PLUS_PROGRAM:
				sequence_TraceryPlusPlusProgram(context, (TraceryPlusPlusProgram) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.WORD:
				sequence_Word(context, (Word) semanticObject); 
				return; 
			case TraceryPlusPlusPackage.WORD_LIST:
				sequence_WordList(context, (WordList) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     AttributeList returns AttributeList
	 *
	 * Constraint:
	 *     (attributes+=Attribute attributes+=Attribute*)
	 * </pre>
	 */
	protected void sequence_AttributeList(ISerializationContext context, AttributeList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ExistingVariable returns ExistingVariable
	 *
	 * Constraint:
	 *     pointer=[Variable|ID]
	 * </pre>
	 */
	protected void sequence_ExistingVariable(ISerializationContext context, ExistingVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.EXISTING_VARIABLE__POINTER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.EXISTING_VARIABLE__POINTER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExistingVariableAccess().getPointerVariableIDTerminalRuleCall_0_1(), semanticObject.eGet(TraceryPlusPlusPackage.Literals.EXISTING_VARIABLE__POINTER, false));
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     HePronouns returns HePronouns
	 *
	 * Constraint:
	 *     (they='he' them='him' their='his' theirs='his')
	 * </pre>
	 */
	protected void sequence_HePronouns(ISerializationContext context, HePronouns semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.HE_PRONOUNS__THEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.HE_PRONOUNS__THEY));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.HE_PRONOUNS__THEM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.HE_PRONOUNS__THEM));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.HE_PRONOUNS__THEIR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.HE_PRONOUNS__THEIR));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.HE_PRONOUNS__THEIRS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.HE_PRONOUNS__THEIRS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHePronounsAccess().getTheyHeKeyword_0_0(), semanticObject.getThey());
		feeder.accept(grammarAccess.getHePronounsAccess().getThemHimKeyword_1_0(), semanticObject.getThem());
		feeder.accept(grammarAccess.getHePronounsAccess().getTheirHisKeyword_2_0(), semanticObject.getTheir());
		feeder.accept(grammarAccess.getHePronounsAccess().getTheirsHisKeyword_3_0(), semanticObject.getTheirs());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns JustNameAttribute
	 *     JustNameAttribute returns JustNameAttribute
	 *
	 * Constraint:
	 *     name=ExistingVariable
	 * </pre>
	 */
	protected void sequence_JustNameAttribute(ISerializationContext context, JustNameAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.JUST_NAME_ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.JUST_NAME_ATTRIBUTE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJustNameAttributeAccess().getNameExistingVariableParserRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ListDeclaration
	 *     Declaration returns ListDeclaration
	 *     ListDeclaration returns ListDeclaration
	 *
	 * Constraint:
	 *     (name=Variable list=WordList)
	 * </pre>
	 */
	protected void sequence_ListDeclaration(ISerializationContext context, ListDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.LIST_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.LIST_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.LIST_DECLARATION__LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.LIST_DECLARATION__LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getListDeclarationAccess().getNameVariableParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getListDeclarationAccess().getListWordListParserRuleCall_3_0(), semanticObject.getList());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns NameExistingListAttribute
	 *     NameExistingListAttribute returns NameExistingListAttribute
	 *
	 * Constraint:
	 *     (name=Variable value=ExistingVariable)
	 * </pre>
	 */
	protected void sequence_NameExistingListAttribute(ISerializationContext context, NameExistingListAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.NAME_EXISTING_LIST_ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.NAME_EXISTING_LIST_ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.NAME_EXISTING_LIST_ATTRIBUTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.NAME_EXISTING_LIST_ATTRIBUTE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameExistingListAttributeAccess().getNameVariableParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNameExistingListAttributeAccess().getValueExistingVariableParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns NameValueAttribute
	 *     NameValueAttribute returns NameValueAttribute
	 *
	 * Constraint:
	 *     (name=Variable value=Word)
	 * </pre>
	 */
	protected void sequence_NameValueAttribute(ISerializationContext context, NameValueAttribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.NAME_VALUE_ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.NAME_VALUE_ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.NAME_VALUE_ATTRIBUTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.NAME_VALUE_ATTRIBUTE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNameValueAttributeAccess().getNameVariableParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getNameValueAttributeAccess().getValueWordParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ObjectAttribute returns ObjectAttribute
	 *
	 * Constraint:
	 *     (object=[ObjectDeclaration|ID] attribute=[Variable|ID] modifiers+=Modifier*)
	 * </pre>
	 */
	protected void sequence_ObjectAttribute(ISerializationContext context, ObjectAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Statement returns ObjectDeclaration
	 *     Declaration returns ObjectDeclaration
	 *     ObjectDeclaration returns ObjectDeclaration
	 *
	 * Constraint:
	 *     (name=ID pronouns=Pronouns attributes=AttributeList)
	 * </pre>
	 */
	protected void sequence_ObjectDeclaration(ISerializationContext context, ObjectDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__PRONOUNS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__PRONOUNS));
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__ATTRIBUTES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.OBJECT_DECLARATION__ATTRIBUTES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getObjectDeclarationAccess().getNameIDTerminalRuleCall_3_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getObjectDeclarationAccess().getPronounsPronounsParserRuleCall_4_0(), semanticObject.getPronouns());
		feeder.accept(grammarAccess.getObjectDeclarationAccess().getAttributesAttributeListParserRuleCall_8_0(), semanticObject.getAttributes());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pronouns returns Pronouns
	 *
	 * Constraint:
	 *     values=HePronouns
	 * </pre>
	 */
	protected void sequence_Pronouns(ISerializationContext context, Pronouns semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.PRONOUNS__VALUES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.PRONOUNS__VALUES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPronounsAccess().getValuesHePronounsParserRuleCall_1_0(), semanticObject.getValues());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     StoryVariable returns StoryVariable
	 *
	 * Constraint:
	 *     (variable=[Variable|ID] modifiers+=Modifier*)
	 * </pre>
	 */
	protected void sequence_StoryVariable(ISerializationContext context, StoryVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Story returns Story
	 *
	 * Constraint:
	 *     (story+=Word | story+=StoryVariable | story+=ObjectAttribute)*
	 * </pre>
	 */
	protected void sequence_Story(ISerializationContext context, Story semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TraceryPlusPlusProgram returns TraceryPlusPlusProgram
	 *
	 * Constraint:
	 *     (statements+=Statement* story=Story)
	 * </pre>
	 */
	protected void sequence_TraceryPlusPlusProgram(ISerializationContext context, TraceryPlusPlusProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     WordList returns WordList
	 *
	 * Constraint:
	 *     (words+=Word words+=Word*)
	 * </pre>
	 */
	protected void sequence_WordList(ISerializationContext context, WordList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Word returns Word
	 *
	 * Constraint:
	 *     value=STRING
	 * </pre>
	 */
	protected void sequence_Word(ISerializationContext context, Word semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryPlusPlusPackage.Literals.WORD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryPlusPlusPackage.Literals.WORD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
}
