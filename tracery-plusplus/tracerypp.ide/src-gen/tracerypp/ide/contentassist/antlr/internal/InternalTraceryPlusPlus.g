/*
 * generated by Xtext 2.30.0
 */
grammar InternalTraceryPlusPlus;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package tracerypp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package tracerypp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import tracerypp.services.TraceryPlusPlusGrammarAccess;

}
@parser::members {
	private TraceryPlusPlusGrammarAccess grammarAccess;

	public void setGrammarAccess(TraceryPlusPlusGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTraceryPlusPlusProgram
entryRuleTraceryPlusPlusProgram
:
{ before(grammarAccess.getTraceryPlusPlusProgramRule()); }
	 ruleTraceryPlusPlusProgram
{ after(grammarAccess.getTraceryPlusPlusProgramRule()); } 
	 EOF 
;

// Rule TraceryPlusPlusProgram
ruleTraceryPlusPlusProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTraceryPlusPlusProgramAccess().getGroup()); }
		(rule__TraceryPlusPlusProgram__Group__0)
		{ after(grammarAccess.getTraceryPlusPlusProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getDeclarationParserRuleCall()); }
		ruleDeclaration
		{ after(grammarAccess.getStatementAccess().getDeclarationParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
		(rule__Declaration__Alternatives)
		{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStory
entryRuleStory
:
{ before(grammarAccess.getStoryRule()); }
	 ruleStory
{ after(grammarAccess.getStoryRule()); } 
	 EOF 
;

// Rule Story
ruleStory 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoryAccess().getGroup()); }
		(rule__Story__Group__0)
		{ after(grammarAccess.getStoryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleListDeclaration
entryRuleListDeclaration
:
{ before(grammarAccess.getListDeclarationRule()); }
	 ruleListDeclaration
{ after(grammarAccess.getListDeclarationRule()); } 
	 EOF 
;

// Rule ListDeclaration
ruleListDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getListDeclarationAccess().getGroup()); }
		(rule__ListDeclaration__Group__0)
		{ after(grammarAccess.getListDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectDeclaration
entryRuleObjectDeclaration
:
{ before(grammarAccess.getObjectDeclarationRule()); }
	 ruleObjectDeclaration
{ after(grammarAccess.getObjectDeclarationRule()); } 
	 EOF 
;

// Rule ObjectDeclaration
ruleObjectDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getGroup()); }
		(rule__ObjectDeclaration__Group__0)
		{ after(grammarAccess.getObjectDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWord
entryRuleWord
:
{ before(grammarAccess.getWordRule()); }
	 ruleWord
{ after(grammarAccess.getWordRule()); } 
	 EOF 
;

// Rule Word
ruleWord 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWordAccess().getValueAssignment()); }
		(rule__Word__ValueAssignment)
		{ after(grammarAccess.getWordAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
		(rule__Variable__NameAssignment)
		{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStoryVariable
entryRuleStoryVariable
:
{ before(grammarAccess.getStoryVariableRule()); }
	 ruleStoryVariable
{ after(grammarAccess.getStoryVariableRule()); } 
	 EOF 
;

// Rule StoryVariable
ruleStoryVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStoryVariableAccess().getGroup()); }
		(rule__StoryVariable__Group__0)
		{ after(grammarAccess.getStoryVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttribute
entryRuleAttribute
:
{ before(grammarAccess.getAttributeRule()); }
	 ruleAttribute
{ after(grammarAccess.getAttributeRule()); } 
	 EOF 
;

// Rule Attribute
ruleAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeAccess().getAlternatives()); }
		(rule__Attribute__Alternatives)
		{ after(grammarAccess.getAttributeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExistingVariable
entryRuleExistingVariable
:
{ before(grammarAccess.getExistingVariableRule()); }
	 ruleExistingVariable
{ after(grammarAccess.getExistingVariableRule()); } 
	 EOF 
;

// Rule ExistingVariable
ruleExistingVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExistingVariableAccess().getPointerAssignment()); }
		(rule__ExistingVariable__PointerAssignment)
		{ after(grammarAccess.getExistingVariableAccess().getPointerAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleJustNameAttribute
entryRuleJustNameAttribute
:
{ before(grammarAccess.getJustNameAttributeRule()); }
	 ruleJustNameAttribute
{ after(grammarAccess.getJustNameAttributeRule()); } 
	 EOF 
;

// Rule JustNameAttribute
ruleJustNameAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJustNameAttributeAccess().getNameAssignment()); }
		(rule__JustNameAttribute__NameAssignment)
		{ after(grammarAccess.getJustNameAttributeAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNameExistingListAttribute
entryRuleNameExistingListAttribute
:
{ before(grammarAccess.getNameExistingListAttributeRule()); }
	 ruleNameExistingListAttribute
{ after(grammarAccess.getNameExistingListAttributeRule()); } 
	 EOF 
;

// Rule NameExistingListAttribute
ruleNameExistingListAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNameExistingListAttributeAccess().getGroup()); }
		(rule__NameExistingListAttribute__Group__0)
		{ after(grammarAccess.getNameExistingListAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNameValueAttribute
entryRuleNameValueAttribute
:
{ before(grammarAccess.getNameValueAttributeRule()); }
	 ruleNameValueAttribute
{ after(grammarAccess.getNameValueAttributeRule()); } 
	 EOF 
;

// Rule NameValueAttribute
ruleNameValueAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNameValueAttributeAccess().getGroup()); }
		(rule__NameValueAttribute__Group__0)
		{ after(grammarAccess.getNameValueAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectAttribute
entryRuleObjectAttribute
:
{ before(grammarAccess.getObjectAttributeRule()); }
	 ruleObjectAttribute
{ after(grammarAccess.getObjectAttributeRule()); } 
	 EOF 
;

// Rule ObjectAttribute
ruleObjectAttribute 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectAttributeAccess().getGroup()); }
		(rule__ObjectAttribute__Group__0)
		{ after(grammarAccess.getObjectAttributeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWordList
entryRuleWordList
:
{ before(grammarAccess.getWordListRule()); }
	 ruleWordList
{ after(grammarAccess.getWordListRule()); } 
	 EOF 
;

// Rule WordList
ruleWordList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWordListAccess().getGroup()); }
		(rule__WordList__Group__0)
		{ after(grammarAccess.getWordListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAttributeList
entryRuleAttributeList
:
{ before(grammarAccess.getAttributeListRule()); }
	 ruleAttributeList
{ after(grammarAccess.getAttributeListRule()); } 
	 EOF 
;

// Rule AttributeList
ruleAttributeList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAttributeListAccess().getGroup()); }
		(rule__AttributeList__Group__0)
		{ after(grammarAccess.getAttributeListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePronouns
entryRulePronouns
:
{ before(grammarAccess.getPronounsRule()); }
	 rulePronouns
{ after(grammarAccess.getPronounsRule()); } 
	 EOF 
;

// Rule Pronouns
rulePronouns 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPronounsAccess().getAlternatives()); }
		(rule__Pronouns__Alternatives)
		{ after(grammarAccess.getPronounsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePronounIdentifier
entryRulePronounIdentifier
:
{ before(grammarAccess.getPronounIdentifierRule()); }
	 rulePronounIdentifier
{ after(grammarAccess.getPronounIdentifierRule()); } 
	 EOF 
;

// Rule PronounIdentifier
rulePronounIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPronounIdentifierAccess().getNameAssignment()); }
		(rule__PronounIdentifier__NameAssignment)
		{ after(grammarAccess.getPronounIdentifierAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleModifier
entryRuleModifier
:
{ before(grammarAccess.getModifierRule()); }
	 ruleModifier
{ after(grammarAccess.getModifierRule()); } 
	 EOF 
;

// Rule Modifier
ruleModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModifierAccess().getAlternatives()); }
		(rule__Modifier__Alternatives)
		{ after(grammarAccess.getModifierAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCapitalizationModifier
entryRuleCapitalizationModifier
:
{ before(grammarAccess.getCapitalizationModifierRule()); }
	 ruleCapitalizationModifier
{ after(grammarAccess.getCapitalizationModifierRule()); } 
	 EOF 
;

// Rule CapitalizationModifier
ruleCapitalizationModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCapitalizationModifierAccess().getCapitalizeKeyword()); }
		'.capitalize'
		{ after(grammarAccess.getCapitalizationModifierAccess().getCapitalizeKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFullCapitalizationModifier
entryRuleFullCapitalizationModifier
:
{ before(grammarAccess.getFullCapitalizationModifierRule()); }
	 ruleFullCapitalizationModifier
{ after(grammarAccess.getFullCapitalizationModifierRule()); } 
	 EOF 
;

// Rule FullCapitalizationModifier
ruleFullCapitalizationModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFullCapitalizationModifierAccess().getCAPITALIZEKeyword()); }
		'.CAPITALIZE'
		{ after(grammarAccess.getFullCapitalizationModifierAccess().getCAPITALIZEKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePluralityModifier
entryRulePluralityModifier
:
{ before(grammarAccess.getPluralityModifierRule()); }
	 rulePluralityModifier
{ after(grammarAccess.getPluralityModifierRule()); } 
	 EOF 
;

// Rule PluralityModifier
rulePluralityModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPluralityModifierAccess().getSKeyword()); }
		'.s'
		{ after(grammarAccess.getPluralityModifierAccess().getSKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleArticleModifier
entryRuleArticleModifier
:
{ before(grammarAccess.getArticleModifierRule()); }
	 ruleArticleModifier
{ after(grammarAccess.getArticleModifierRule()); } 
	 EOF 
;

// Rule ArticleModifier
ruleArticleModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getArticleModifierAccess().getAKeyword()); }
		'.a'
		{ after(grammarAccess.getArticleModifierAccess().getAKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePastTenseModifier
entryRulePastTenseModifier
:
{ before(grammarAccess.getPastTenseModifierRule()); }
	 rulePastTenseModifier
{ after(grammarAccess.getPastTenseModifierRule()); } 
	 EOF 
;

// Rule PastTenseModifier
rulePastTenseModifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPastTenseModifierAccess().getEdKeyword()); }
		'.ed'
		{ after(grammarAccess.getPastTenseModifierAccess().getEdKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignmentOperator
entryRuleAssignmentOperator
:
{ before(grammarAccess.getAssignmentOperatorRule()); }
	 ruleAssignmentOperator
{ after(grammarAccess.getAssignmentOperatorRule()); } 
	 EOF 
;

// Rule AssignmentOperator
ruleAssignmentOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getAlternatives()); }
		(rule__AssignmentOperator__Alternatives)
		{ after(grammarAccess.getAssignmentOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSeparatorOr
entryRuleSeparatorOr
:
{ before(grammarAccess.getSeparatorOrRule()); }
	 ruleSeparatorOr
{ after(grammarAccess.getSeparatorOrRule()); } 
	 EOF 
;

// Rule SeparatorOr
ruleSeparatorOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSeparatorOrAccess().getAlternatives()); }
		(rule__SeparatorOr__Alternatives)
		{ after(grammarAccess.getSeparatorOrAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSeparatorAnd
entryRuleSeparatorAnd
:
{ before(grammarAccess.getSeparatorAndRule()); }
	 ruleSeparatorAnd
{ after(grammarAccess.getSeparatorAndRule()); } 
	 EOF 
;

// Rule SeparatorAnd
ruleSeparatorAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSeparatorAndAccess().getAlternatives()); }
		(rule__SeparatorAnd__Alternatives)
		{ after(grammarAccess.getSeparatorAndAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getListDeclarationParserRuleCall_0()); }
		ruleListDeclaration
		{ after(grammarAccess.getDeclarationAccess().getListDeclarationParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclarationAccess().getObjectDeclarationParserRuleCall_1()); }
		ruleObjectDeclaration
		{ after(grammarAccess.getDeclarationAccess().getObjectDeclarationParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__StoryAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryAccess().getStoryWordParserRuleCall_3_0_0()); }
		ruleWord
		{ after(grammarAccess.getStoryAccess().getStoryWordParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getStoryAccess().getStoryStoryVariableParserRuleCall_3_0_1()); }
		ruleStoryVariable
		{ after(grammarAccess.getStoryAccess().getStoryStoryVariableParserRuleCall_3_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getStoryAccess().getStoryObjectAttributeParserRuleCall_3_0_2()); }
		ruleObjectAttribute
		{ after(grammarAccess.getStoryAccess().getStoryObjectAttributeParserRuleCall_3_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListDeclarationAccess().getGroup_1_0()); }
		(rule__ListDeclaration__Group_1_0__0)
		{ after(grammarAccess.getListDeclarationAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getListDeclarationAccess().getGroup_1_1()); }
		(rule__ListDeclaration__Group_1_1__0)
		{ after(grammarAccess.getListDeclarationAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getIsKeyword_1_0()); }
		'is'
		{ after(grammarAccess.getObjectDeclarationAccess().getIsKeyword_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getAreKeyword_1_1()); }
		'are'
		{ after(grammarAccess.getObjectDeclarationAccess().getAreKeyword_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getAKeyword_2_0()); }
		'a'
		{ after(grammarAccess.getObjectDeclarationAccess().getAKeyword_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getAnKeyword_2_1()); }
		'an'
		{ after(grammarAccess.getObjectDeclarationAccess().getAnKeyword_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Alternatives_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getHasKeyword_5_0()); }
		'has'
		{ after(grammarAccess.getObjectDeclarationAccess().getHasKeyword_5_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getHaveKeyword_5_1()); }
		'have'
		{ after(grammarAccess.getObjectDeclarationAccess().getHaveKeyword_5_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Attribute__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeAccess().getJustNameAttributeParserRuleCall_0()); }
		ruleJustNameAttribute
		{ after(grammarAccess.getAttributeAccess().getJustNameAttributeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeAccess().getNameExistingListAttributeParserRuleCall_1()); }
		ruleNameExistingListAttribute
		{ after(grammarAccess.getAttributeAccess().getNameExistingListAttributeParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getAttributeAccess().getNameValueAttributeParserRuleCall_2()); }
		ruleNameValueAttribute
		{ after(grammarAccess.getAttributeAccess().getNameValueAttributeParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAttributeAccess().getGroup_0_0()); }
		(rule__ObjectAttribute__Group_0_0__0)
		{ after(grammarAccess.getObjectAttributeAccess().getGroup_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getObjectAttributeAccess().getGroup_0_1()); }
		(rule__ObjectAttribute__Group_0_1__0)
		{ after(grammarAccess.getObjectAttributeAccess().getGroup_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pronouns__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPronounsAccess().getValueAssignment_0()); }
		(rule__Pronouns__ValueAssignment_0)
		{ after(grammarAccess.getPronounsAccess().getValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getPronounsAccess().getValueAssignment_1()); }
		(rule__Pronouns__ValueAssignment_1)
		{ after(grammarAccess.getPronounsAccess().getValueAssignment_1()); }
	)
	|
	(
		{ before(grammarAccess.getPronounsAccess().getValueAssignment_2()); }
		(rule__Pronouns__ValueAssignment_2)
		{ after(grammarAccess.getPronounsAccess().getValueAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getPronounsAccess().getValueAssignment_3()); }
		(rule__Pronouns__ValueAssignment_3)
		{ after(grammarAccess.getPronounsAccess().getValueAssignment_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PronounIdentifier__NameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPronounIdentifierAccess().getNameTheyKeyword_0_0()); }
		'they'
		{ after(grammarAccess.getPronounIdentifierAccess().getNameTheyKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPronounIdentifierAccess().getNameThemKeyword_0_1()); }
		'them'
		{ after(grammarAccess.getPronounIdentifierAccess().getNameThemKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getPronounIdentifierAccess().getNameTheirKeyword_0_2()); }
		'their'
		{ after(grammarAccess.getPronounIdentifierAccess().getNameTheirKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getPronounIdentifierAccess().getNameTheirsKeyword_0_3()); }
		'theirs'
		{ after(grammarAccess.getPronounIdentifierAccess().getNameTheirsKeyword_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModifierAccess().getCapitalizationModifierParserRuleCall_0()); }
		ruleCapitalizationModifier
		{ after(grammarAccess.getModifierAccess().getCapitalizationModifierParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getFullCapitalizationModifierParserRuleCall_1()); }
		ruleFullCapitalizationModifier
		{ after(grammarAccess.getModifierAccess().getFullCapitalizationModifierParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getPluralityModifierParserRuleCall_2()); }
		rulePluralityModifier
		{ after(grammarAccess.getModifierAccess().getPluralityModifierParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getArticleModifierParserRuleCall_3()); }
		ruleArticleModifier
		{ after(grammarAccess.getModifierAccess().getArticleModifierParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getModifierAccess().getPastTenseModifierParserRuleCall_4()); }
		rulePastTenseModifier
		{ after(grammarAccess.getModifierAccess().getPastTenseModifierParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignmentOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); }
		'='
		{ after(grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getColonKeyword_1()); }
		':'
		{ after(grammarAccess.getAssignmentOperatorAccess().getColonKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentOperatorAccess().getHyphenMinusKeyword_2()); }
		'-'
		{ after(grammarAccess.getAssignmentOperatorAccess().getHyphenMinusKeyword_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SeparatorOr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeparatorOrAccess().getCommaKeyword_0()); }
		','
		{ after(grammarAccess.getSeparatorOrAccess().getCommaKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSeparatorOrAccess().getOrKeyword_1()); }
		'or'
		{ after(grammarAccess.getSeparatorOrAccess().getOrKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SeparatorAnd__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSeparatorAndAccess().getCommaKeyword_0()); }
		','
		{ after(grammarAccess.getSeparatorAndAccess().getCommaKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getSeparatorAndAccess().getAndKeyword_1()); }
		'and'
		{ after(grammarAccess.getSeparatorAndAccess().getAndKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceryPlusPlusProgram__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceryPlusPlusProgram__Group__0__Impl
	rule__TraceryPlusPlusProgram__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceryPlusPlusProgram__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceryPlusPlusProgramAccess().getStatementsAssignment_0()); }
	(rule__TraceryPlusPlusProgram__StatementsAssignment_0)*
	{ after(grammarAccess.getTraceryPlusPlusProgramAccess().getStatementsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceryPlusPlusProgram__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TraceryPlusPlusProgram__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceryPlusPlusProgram__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTraceryPlusPlusProgramAccess().getStoryAssignment_1()); }
	(rule__TraceryPlusPlusProgram__StoryAssignment_1)
	{ after(grammarAccess.getTraceryPlusPlusProgramAccess().getStoryAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Story__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Story__Group__0__Impl
	rule__Story__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryAccess().getStoryAction_0()); }
	()
	{ after(grammarAccess.getStoryAccess().getStoryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Story__Group__1__Impl
	rule__Story__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryAccess().getTheKeyword_1()); }
	'The'
	{ after(grammarAccess.getStoryAccess().getTheKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Story__Group__2__Impl
	rule__Story__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryAccess().getStoryKeyword_2()); }
	'story:'
	{ after(grammarAccess.getStoryAccess().getStoryKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Story__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryAccess().getStoryAssignment_3()); }
	(rule__Story__StoryAssignment_3)*
	{ after(grammarAccess.getStoryAccess().getStoryAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDeclaration__Group__0__Impl
	rule__ListDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDeclarationAccess().getNameAssignment_0()); }
	(rule__ListDeclaration__NameAssignment_0)
	{ after(grammarAccess.getListDeclarationAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDeclaration__Group__1__Impl
	rule__ListDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDeclarationAccess().getAlternatives_1()); }
	(rule__ListDeclaration__Alternatives_1)
	{ after(grammarAccess.getListDeclarationAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDeclaration__Group__2__Impl
	rule__ListDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDeclarationAccess().getAssignmentOperatorParserRuleCall_2()); }
	ruleAssignmentOperator
	{ after(grammarAccess.getListDeclarationAccess().getAssignmentOperatorParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDeclarationAccess().getListAssignment_3()); }
	(rule__ListDeclaration__ListAssignment_3)
	{ after(grammarAccess.getListDeclarationAccess().getListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListDeclaration__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDeclaration__Group_1_0__0__Impl
	rule__ListDeclaration__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDeclarationAccess().getCanKeyword_1_0_0()); }
	'can'
	{ after(grammarAccess.getListDeclarationAccess().getCanKeyword_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDeclaration__Group_1_0__1__Impl
	rule__ListDeclaration__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDeclarationAccess().getHaveKeyword_1_0_1()); }
	'have'
	{ after(grammarAccess.getListDeclarationAccess().getHaveKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDeclaration__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDeclarationAccess().getValuesKeyword_1_0_2()); }
	'values'
	{ after(grammarAccess.getListDeclarationAccess().getValuesKeyword_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ListDeclaration__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDeclaration__Group_1_1__0__Impl
	rule__ListDeclaration__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDeclarationAccess().getCanKeyword_1_1_0()); }
	'can'
	{ after(grammarAccess.getListDeclarationAccess().getCanKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ListDeclaration__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getListDeclarationAccess().getBeKeyword_1_1_1()); }
	'be'
	{ after(grammarAccess.getListDeclarationAccess().getBeKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectDeclaration__Group__0__Impl
	rule__ObjectDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectDeclarationAccess().getThereKeyword_0()); }
	'There'
	{ after(grammarAccess.getObjectDeclarationAccess().getThereKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectDeclaration__Group__1__Impl
	rule__ObjectDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectDeclarationAccess().getAlternatives_1()); }
	(rule__ObjectDeclaration__Alternatives_1)
	{ after(grammarAccess.getObjectDeclarationAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectDeclaration__Group__2__Impl
	rule__ObjectDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectDeclarationAccess().getAlternatives_2()); }
	(rule__ObjectDeclaration__Alternatives_2)?
	{ after(grammarAccess.getObjectDeclarationAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectDeclaration__Group__3__Impl
	rule__ObjectDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectDeclarationAccess().getNameAssignment_3()); }
	(rule__ObjectDeclaration__NameAssignment_3)
	{ after(grammarAccess.getObjectDeclarationAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectDeclaration__Group__4__Impl
	rule__ObjectDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectDeclarationAccess().getPronounsAssignment_4()); }
	(rule__ObjectDeclaration__PronounsAssignment_4)
	{ after(grammarAccess.getObjectDeclarationAccess().getPronounsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectDeclaration__Group__5__Impl
	rule__ObjectDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectDeclarationAccess().getAlternatives_5()); }
	(rule__ObjectDeclaration__Alternatives_5)
	{ after(grammarAccess.getObjectDeclarationAccess().getAlternatives_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectDeclaration__Group__6__Impl
	rule__ObjectDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectDeclarationAccess().getAttributesKeyword_6()); }
	'attributes'
	{ after(grammarAccess.getObjectDeclarationAccess().getAttributesKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectDeclaration__Group__7__Impl
	rule__ObjectDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectDeclarationAccess().getAssignmentOperatorParserRuleCall_7()); }
	ruleAssignmentOperator
	{ after(grammarAccess.getObjectDeclarationAccess().getAssignmentOperatorParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectDeclaration__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectDeclarationAccess().getAttributesAssignment_8()); }
	(rule__ObjectDeclaration__AttributesAssignment_8)
	{ after(grammarAccess.getObjectDeclarationAccess().getAttributesAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StoryVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StoryVariable__Group__0__Impl
	rule__StoryVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryVariableAccess().getVariableAssignment_0()); }
	(rule__StoryVariable__VariableAssignment_0)
	{ after(grammarAccess.getStoryVariableAccess().getVariableAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StoryVariable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStoryVariableAccess().getModifiersAssignment_1()); }
	(rule__StoryVariable__ModifiersAssignment_1)*
	{ after(grammarAccess.getStoryVariableAccess().getModifiersAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NameExistingListAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NameExistingListAttribute__Group__0__Impl
	rule__NameExistingListAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExistingListAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameExistingListAttributeAccess().getNameAssignment_0()); }
	(rule__NameExistingListAttribute__NameAssignment_0)
	{ after(grammarAccess.getNameExistingListAttributeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExistingListAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NameExistingListAttribute__Group__1__Impl
	rule__NameExistingListAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExistingListAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameExistingListAttributeAccess().getAssignmentOperatorParserRuleCall_1()); }
	ruleAssignmentOperator
	{ after(grammarAccess.getNameExistingListAttributeAccess().getAssignmentOperatorParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExistingListAttribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NameExistingListAttribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExistingListAttribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameExistingListAttributeAccess().getValueAssignment_2()); }
	(rule__NameExistingListAttribute__ValueAssignment_2)
	{ after(grammarAccess.getNameExistingListAttributeAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NameValueAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NameValueAttribute__Group__0__Impl
	rule__NameValueAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NameValueAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameValueAttributeAccess().getNameAssignment_0()); }
	(rule__NameValueAttribute__NameAssignment_0)
	{ after(grammarAccess.getNameValueAttributeAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameValueAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NameValueAttribute__Group__1__Impl
	rule__NameValueAttribute__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NameValueAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameValueAttributeAccess().getAssignmentOperatorParserRuleCall_1()); }
	ruleAssignmentOperator
	{ after(grammarAccess.getNameValueAttributeAccess().getAssignmentOperatorParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameValueAttribute__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NameValueAttribute__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NameValueAttribute__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNameValueAttributeAccess().getValueAssignment_2()); }
	(rule__NameValueAttribute__ValueAssignment_2)
	{ after(grammarAccess.getNameValueAttributeAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectAttribute__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectAttribute__Group__0__Impl
	rule__ObjectAttribute__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAttributeAccess().getAlternatives_0()); }
	(rule__ObjectAttribute__Alternatives_0)
	{ after(grammarAccess.getObjectAttributeAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectAttribute__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAttributeAccess().getModifiersAssignment_1()); }
	(rule__ObjectAttribute__ModifiersAssignment_1)*
	{ after(grammarAccess.getObjectAttributeAccess().getModifiersAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectAttribute__Group_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectAttribute__Group_0_0__0__Impl
	rule__ObjectAttribute__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAttributeAccess().getObjectAssignment_0_0_0()); }
	(rule__ObjectAttribute__ObjectAssignment_0_0_0)
	{ after(grammarAccess.getObjectAttributeAccess().getObjectAssignment_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectAttribute__Group_0_0__1__Impl
	rule__ObjectAttribute__Group_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAttributeAccess().getFullStopKeyword_0_0_1()); }
	'.'
	{ after(grammarAccess.getObjectAttributeAccess().getFullStopKeyword_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectAttribute__Group_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAttributeAccess().getAttributeAssignment_0_0_2()); }
	(rule__ObjectAttribute__AttributeAssignment_0_0_2)
	{ after(grammarAccess.getObjectAttributeAccess().getAttributeAssignment_0_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ObjectAttribute__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectAttribute__Group_0_1__0__Impl
	rule__ObjectAttribute__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAttributeAccess().getObjectAssignment_0_1_0()); }
	(rule__ObjectAttribute__ObjectAssignment_0_1_0)
	{ after(grammarAccess.getObjectAttributeAccess().getObjectAssignment_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectAttribute__Group_0_1__1__Impl
	rule__ObjectAttribute__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAttributeAccess().getFullStopKeyword_0_1_1()); }
	'.'
	{ after(grammarAccess.getObjectAttributeAccess().getFullStopKeyword_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ObjectAttribute__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__Group_0_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObjectAttributeAccess().getPronounAssignment_0_1_2()); }
	(rule__ObjectAttribute__PronounAssignment_0_1_2)
	{ after(grammarAccess.getObjectAttributeAccess().getPronounAssignment_0_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WordList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordList__Group__0__Impl
	rule__WordList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WordList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordListAccess().getWordsAssignment_0()); }
	(rule__WordList__WordsAssignment_0)
	{ after(grammarAccess.getWordListAccess().getWordsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WordList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordListAccess().getGroup_1()); }
	(rule__WordList__Group_1__0)*
	{ after(grammarAccess.getWordListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WordList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordList__Group_1__0__Impl
	rule__WordList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WordList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordListAccess().getSeparatorOrParserRuleCall_1_0()); }
	ruleSeparatorOr
	{ after(grammarAccess.getWordListAccess().getSeparatorOrParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WordList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WordList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWordListAccess().getWordsAssignment_1_1()); }
	(rule__WordList__WordsAssignment_1_1)
	{ after(grammarAccess.getWordListAccess().getWordsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeList__Group__0__Impl
	rule__AttributeList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeListAccess().getAttributesAssignment_0()); }
	(rule__AttributeList__AttributesAssignment_0)
	{ after(grammarAccess.getAttributeListAccess().getAttributesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeListAccess().getGroup_1()); }
	(rule__AttributeList__Group_1__0)*
	{ after(grammarAccess.getAttributeListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AttributeList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeList__Group_1__0__Impl
	rule__AttributeList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeListAccess().getSeparatorAndParserRuleCall_1_0()); }
	ruleSeparatorAnd
	{ after(grammarAccess.getAttributeListAccess().getSeparatorAndParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AttributeList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAttributeListAccess().getAttributesAssignment_1_1()); }
	(rule__AttributeList__AttributesAssignment_1_1)
	{ after(grammarAccess.getAttributeListAccess().getAttributesAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TraceryPlusPlusProgram__StatementsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceryPlusPlusProgramAccess().getStatementsStatementParserRuleCall_0_0()); }
		ruleStatement
		{ after(grammarAccess.getTraceryPlusPlusProgramAccess().getStatementsStatementParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceryPlusPlusProgram__StoryAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTraceryPlusPlusProgramAccess().getStoryStoryParserRuleCall_1_0()); }
		ruleStory
		{ after(grammarAccess.getTraceryPlusPlusProgramAccess().getStoryStoryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Story__StoryAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryAccess().getStoryAlternatives_3_0()); }
		(rule__Story__StoryAlternatives_3_0)
		{ after(grammarAccess.getStoryAccess().getStoryAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListDeclarationAccess().getNameVariableParserRuleCall_0_0()); }
		ruleVariable
		{ after(grammarAccess.getListDeclarationAccess().getNameVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ListDeclaration__ListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getListDeclarationAccess().getListWordListParserRuleCall_3_0()); }
		ruleWordList
		{ after(grammarAccess.getListDeclarationAccess().getListWordListParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getObjectDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__PronounsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getPronounsPronounsParserRuleCall_4_0()); }
		rulePronouns
		{ after(grammarAccess.getObjectDeclarationAccess().getPronounsPronounsParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectDeclaration__AttributesAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectDeclarationAccess().getAttributesAttributeListParserRuleCall_8_0()); }
		ruleAttributeList
		{ after(grammarAccess.getObjectDeclarationAccess().getAttributesAttributeListParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Word__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getWordAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__VariableAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryVariableAccess().getVariableVariableCrossReference_0_0()); }
		(
			{ before(grammarAccess.getStoryVariableAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStoryVariableAccess().getVariableVariableIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getStoryVariableAccess().getVariableVariableCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StoryVariable__ModifiersAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStoryVariableAccess().getModifiersModifierParserRuleCall_1_0()); }
		ruleModifier
		{ after(grammarAccess.getStoryVariableAccess().getModifiersModifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExistingVariable__PointerAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExistingVariableAccess().getPointerVariableCrossReference_0()); }
		(
			{ before(grammarAccess.getExistingVariableAccess().getPointerVariableIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getExistingVariableAccess().getPointerVariableIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getExistingVariableAccess().getPointerVariableCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__JustNameAttribute__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJustNameAttributeAccess().getNameExistingVariableParserRuleCall_0()); }
		ruleExistingVariable
		{ after(grammarAccess.getJustNameAttributeAccess().getNameExistingVariableParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExistingListAttribute__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameExistingListAttributeAccess().getNameVariableParserRuleCall_0_0()); }
		ruleVariable
		{ after(grammarAccess.getNameExistingListAttributeAccess().getNameVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameExistingListAttribute__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameExistingListAttributeAccess().getValueExistingVariableParserRuleCall_2_0()); }
		ruleExistingVariable
		{ after(grammarAccess.getNameExistingListAttributeAccess().getValueExistingVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameValueAttribute__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameValueAttributeAccess().getNameVariableParserRuleCall_0_0()); }
		ruleVariable
		{ after(grammarAccess.getNameValueAttributeAccess().getNameVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NameValueAttribute__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNameValueAttributeAccess().getValueWordParserRuleCall_2_0()); }
		ruleWord
		{ after(grammarAccess.getNameValueAttributeAccess().getValueWordParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__ObjectAssignment_0_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationCrossReference_0_0_0_0()); }
		(
			{ before(grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationIDTerminalRuleCall_0_0_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationIDTerminalRuleCall_0_0_0_0_1()); }
		)
		{ after(grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationCrossReference_0_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__AttributeAssignment_0_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAttributeAccess().getAttributeVariableCrossReference_0_0_2_0()); }
		(
			{ before(grammarAccess.getObjectAttributeAccess().getAttributeVariableIDTerminalRuleCall_0_0_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getObjectAttributeAccess().getAttributeVariableIDTerminalRuleCall_0_0_2_0_1()); }
		)
		{ after(grammarAccess.getObjectAttributeAccess().getAttributeVariableCrossReference_0_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__ObjectAssignment_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationCrossReference_0_1_0_0()); }
		(
			{ before(grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationIDTerminalRuleCall_0_1_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationIDTerminalRuleCall_0_1_0_0_1()); }
		)
		{ after(grammarAccess.getObjectAttributeAccess().getObjectObjectDeclarationCrossReference_0_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__PronounAssignment_0_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAttributeAccess().getPronounPronounIdentifierParserRuleCall_0_1_2_0()); }
		rulePronounIdentifier
		{ after(grammarAccess.getObjectAttributeAccess().getPronounPronounIdentifierParserRuleCall_0_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ObjectAttribute__ModifiersAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObjectAttributeAccess().getModifiersModifierParserRuleCall_1_0()); }
		ruleModifier
		{ after(grammarAccess.getObjectAttributeAccess().getModifiersModifierParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordList__WordsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordListAccess().getWordsWordParserRuleCall_0_0()); }
		ruleWord
		{ after(grammarAccess.getWordListAccess().getWordsWordParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WordList__WordsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWordListAccess().getWordsWordParserRuleCall_1_1_0()); }
		ruleWord
		{ after(grammarAccess.getWordListAccess().getWordsWordParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__AttributesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeListAccess().getAttributesAttributeParserRuleCall_0_0()); }
		ruleAttribute
		{ after(grammarAccess.getAttributeListAccess().getAttributesAttributeParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AttributeList__AttributesAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAttributeListAccess().getAttributesAttributeParserRuleCall_1_1_0()); }
		ruleAttribute
		{ after(grammarAccess.getAttributeListAccess().getAttributesAttributeParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pronouns__ValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPronounsAccess().getValueHeKeyword_0_0()); }
		(
			{ before(grammarAccess.getPronounsAccess().getValueHeKeyword_0_0()); }
			'He'
			{ after(grammarAccess.getPronounsAccess().getValueHeKeyword_0_0()); }
		)
		{ after(grammarAccess.getPronounsAccess().getValueHeKeyword_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pronouns__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPronounsAccess().getValueSheKeyword_1_0()); }
		(
			{ before(grammarAccess.getPronounsAccess().getValueSheKeyword_1_0()); }
			'She'
			{ after(grammarAccess.getPronounsAccess().getValueSheKeyword_1_0()); }
		)
		{ after(grammarAccess.getPronounsAccess().getValueSheKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pronouns__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPronounsAccess().getValueItKeyword_2_0()); }
		(
			{ before(grammarAccess.getPronounsAccess().getValueItKeyword_2_0()); }
			'It'
			{ after(grammarAccess.getPronounsAccess().getValueItKeyword_2_0()); }
		)
		{ after(grammarAccess.getPronounsAccess().getValueItKeyword_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pronouns__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPronounsAccess().getValueTheyKeyword_3_0()); }
		(
			{ before(grammarAccess.getPronounsAccess().getValueTheyKeyword_3_0()); }
			'They'
			{ after(grammarAccess.getPronounsAccess().getValueTheyKeyword_3_0()); }
		)
		{ after(grammarAccess.getPronounsAccess().getValueTheyKeyword_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PronounIdentifier__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPronounIdentifierAccess().getNameAlternatives_0()); }
		(rule__PronounIdentifier__NameAlternatives_0)
		{ after(grammarAccess.getPronounIdentifierAccess().getNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
